===================================================================
--- lib/aave-v3-origin-private/src/contracts/protocol/libraries/logic/GenericLogic.sol
+++ lib/aave-v3-origin/src/contracts/protocol/libraries/logic/GenericLogic.sol
@@ -8,8 +8,10 @@
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
 import {EModeConfiguration} from "../configuration/EModeConfiguration.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
+import {TokenMath} from "../helpers/TokenMath.sol";
+import {MathUtils} from "../math/MathUtils.sol";
 import {DataTypes} from "../types/DataTypes.sol";
 import {ReserveLogic} from "./ReserveLogic.sol";
 import {EModeLogic} from "./EModeLogic.sol";
 
@@ -19,8 +21,9 @@
  * @notice Implements protocol-level logic to calculate and validate the state of a user
  */
 library GenericLogic {
     using ReserveLogic for DataTypes.ReserveData;
+    using TokenMath for uint256;
     using WadRayMath for uint256;
     using PercentageMath for uint256;
     using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
     using UserConfiguration for DataTypes.UserConfigurationMap;
@@ -177,8 +180,20 @@
                 ++vars.i;
             }
         }
 
+        // @note At this point, `avgLiquidationThreshold` represents
+        // `SUM(collateral_base_value_i * liquidation_threshold_i)` for all collateral assets.
+        // It has 8 decimals (base currency) + 2 decimals (percentage) = 10 decimals.
+        // healthFactor has 18 decimals
+        // healthFactor = (avgLiquidationThreshold * WAD / totalDebtInBaseCurrency) / 100_00
+        // 18 decimals = (10 decimals * 18 decimals / 8 decimals) / 2 decimals = 18 decimals
+        vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)
+            ? type(uint256).max
+            : vars.avgLiquidationThreshold.wadDiv(
+                vars.totalDebtInBaseCurrency
+            ) / 100_00;
+
         unchecked {
             vars.avgLtv = vars.totalCollateralInBaseCurrency != 0
                 ? vars.avgLtv / vars.totalCollateralInBaseCurrency
                 : 0;
@@ -188,15 +203,8 @@
                     vars.totalCollateralInBaseCurrency
                 : 0;
         }
 
-        vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)
-            ? type(uint256).max
-            : (
-                vars.totalCollateralInBaseCurrency.percentMul(
-                    vars.avgLiquidationThreshold
-                )
-            ).wadDiv(vars.totalDebtInBaseCurrency);
         return (
             vars.totalCollateralInBaseCurrency,
             vars.totalDebtInBaseCurrency,
             vars.avgLtv,
@@ -219,9 +227,9 @@
         uint256 totalDebtInBaseCurrency,
         uint256 ltv
     ) internal pure returns (uint256) {
         uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency
-            .percentMul(ltv);
+            .percentMulFloor(ltv);
 
         if (availableBorrowsInBaseCurrency <= totalDebtInBaseCurrency) {
             return 0;
         }
@@ -248,22 +256,13 @@
         DataTypes.ReserveData storage reserve,
         uint256 assetPrice,
         uint256 assetUnit
     ) private view returns (uint256) {
-        // fetching variable debt
         uint256 userTotalDebt = IScaledBalanceToken(
             reserve.variableDebtTokenAddress
-        ).scaledBalanceOf(user);
-        if (userTotalDebt == 0) {
-            return 0;
-        }
+        ).scaledBalanceOf(user).getVTokenBalance(reserve.getNormalizedDebt());
 
-        userTotalDebt =
-            userTotalDebt.rayMul(reserve.getNormalizedDebt()) *
-            assetPrice;
-        unchecked {
-            return userTotalDebt / assetUnit;
-        }
+        return MathUtils.mulDivCeil(userTotalDebt, assetPrice, assetUnit);
     }
 
     /**
      * @notice Calculates total aToken balance of the user in the based currency used by the price oracle
@@ -280,13 +279,12 @@
         DataTypes.ReserveData storage reserve,
         uint256 assetPrice,
         uint256 assetUnit
     ) private view returns (uint256) {
-        uint256 normalizedIncome = reserve.getNormalizedIncome();
         uint256 balance = (
             IScaledBalanceToken(reserve.aTokenAddress)
                 .scaledBalanceOf(user)
-                .rayMul(normalizedIncome)
+                .getATokenBalance(reserve.getNormalizedIncome())
         ) * assetPrice;
 
         unchecked {
             return balance / assetUnit;
