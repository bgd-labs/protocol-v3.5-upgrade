===================================================================
--- lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/IncentivizedERC20.sol
+++ lib/aave-v3-origin/src/contracts/protocol/tokenization/base/IncentivizedERC20.sol
@@ -22,8 +22,20 @@
     using WadRayMath for uint256;
     using SafeCast for uint256;
 
     /**
+     * @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.
+     * @param spender Address that may be allowed to operate on tokens without being their owner.
+     * @param allowance Amount of tokens a `spender` is allowed to operate with.
+     * @param needed Minimum amount required to perform a transfer.
+     */
+    error ERC20InsufficientAllowance(
+        address spender,
+        uint256 allowance,
+        uint256 needed
+    );
+
+    /**
      * @dev Only pool admin can call functions marked by this modifier.
      */
     modifier onlyPoolAdmin() {
         IACLManager aclManager = IACLManager(
@@ -216,8 +228,39 @@
         return true;
     }
 
     /**
+     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.
+     *
+     * Revert if not enough allowance is available.
+     *
+     * @param owner The owner of the tokens
+     * @param spender The user allowed to spend on behalf of owner
+     * @param amount The minimum amount being consumed from the allowance
+     * @param correctedAmount The maximum amount being consumed from the allowance
+     */
+    function _spendAllowance(
+        address owner,
+        address spender,
+        uint256 amount,
+        uint256 correctedAmount
+    ) internal virtual {
+        uint256 currentAllowance = _allowances[owner][spender];
+        if (currentAllowance < amount) {
+            revert ERC20InsufficientAllowance(
+                spender,
+                currentAllowance,
+                amount
+            );
+        }
+
+        uint256 consumption = currentAllowance >= correctedAmount
+            ? correctedAmount
+            : currentAllowance;
+        _approve(owner, spender, currentAllowance - consumption);
+    }
+
+    /**
      * @notice Transfers tokens between two users and apply incentives if defined.
      * @param sender The source address
      * @param recipient The destination address
      * @param amount The amount getting transferred
