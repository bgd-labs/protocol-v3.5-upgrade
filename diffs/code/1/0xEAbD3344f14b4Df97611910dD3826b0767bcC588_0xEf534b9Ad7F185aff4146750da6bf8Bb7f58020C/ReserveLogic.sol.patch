===================================================================
--- lib/aave-v3-origin-private/src/contracts/protocol/libraries/logic/ReserveLogic.sol
+++ lib/aave-v3-origin/src/contracts/protocol/libraries/logic/ReserveLogic.sol
@@ -10,8 +10,9 @@
 import {MathUtils} from "../math/MathUtils.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
 import {Errors} from "../helpers/Errors.sol";
+import {TokenMath} from "../helpers/TokenMath.sol";
 import {DataTypes} from "../types/DataTypes.sol";
 import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 
 /**
@@ -20,8 +21,9 @@
  * @notice Implements the logic to update the reserves state
  */
 library ReserveLogic {
     using WadRayMath for uint256;
+    using TokenMath for uint256;
     using PercentageMath for uint256;
     using SafeCast for uint256;
     using GPv2SafeERC20 for IERC20;
     using ReserveLogic for DataTypes.ReserveData;
@@ -143,11 +145,11 @@
         uint256 liquidityAdded,
         uint256 liquidityTaken,
         address interestRateStrategyAddress
     ) internal {
-        uint256 totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(
-            reserveCache.nextVariableBorrowIndex
-        );
+        uint256 totalVariableDebt = reserveCache
+            .nextScaledVariableDebt
+            .getVTokenBalance(reserveCache.nextVariableBorrowIndex);
 
         (
             uint256 nextLiquidityRate,
             uint256 nextVariableRate
@@ -199,29 +201,24 @@
         if (reserveCache.reserveFactor == 0) {
             return;
         }
 
-        //calculate the total variable debt at moment of the last interaction
-        uint256 prevTotalVariableDebt = reserveCache
+        // debt accrued is the sum of the current debt minus the sum of the debt at the last update
+        // Rounding down to undermint to the treasury and keep the invariant healthy.
+        uint256 totalDebtAccrued = reserveCache
             .currScaledVariableDebt
-            .rayMul(reserveCache.currVariableBorrowIndex);
+            .rayMulFloor(
+                reserveCache.nextVariableBorrowIndex -
+                    reserveCache.currVariableBorrowIndex
+            );
 
-        //calculate the new total variable debt after accumulation of the interest on the index
-        uint256 currTotalVariableDebt = reserveCache
-            .currScaledVariableDebt
-            .rayMul(reserveCache.nextVariableBorrowIndex);
-
-        //debt accrued is the sum of the current debt minus the sum of the debt at the last update
-        uint256 totalDebtAccrued = currTotalVariableDebt -
-            prevTotalVariableDebt;
-
         uint256 amountToMint = totalDebtAccrued.percentMul(
             reserveCache.reserveFactor
         );
 
         if (amountToMint != 0) {
             reserve.accruedToTreasury += amountToMint
-                .rayDiv(reserveCache.nextLiquidityIndex)
+                .getATokenMintScaledAmount(reserveCache.nextLiquidityIndex)
                 .toUint128();
         }
     }
 
