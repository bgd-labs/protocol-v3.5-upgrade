===================================================================
--- lib/aave-v3-origin-private/src/contracts/protocol/pool/Pool.sol
+++ lib/aave-v3-origin/src/contracts/protocol/pool/Pool.sol
@@ -256,8 +256,9 @@
         return
             BorrowLogic.executeRepay(
                 _reserves,
                 _reservesList,
+                _eModeCategories,
                 _usersConfig[onBehalfOf],
                 DataTypes.ExecuteRepayParams({
                     asset: asset,
                     user: _msgSender(),
@@ -266,9 +267,11 @@
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
                     onBehalfOf: onBehalfOf,
-                    useATokens: false
+                    useATokens: false,
+                    oracle: ADDRESSES_PROVIDER.getPriceOracle(),
+                    userEModeCategory: _usersEModeCategory[onBehalfOf]
                 })
             );
     }
 
@@ -305,14 +308,17 @@
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
                     onBehalfOf: onBehalfOf,
-                    useATokens: false
+                    useATokens: false,
+                    oracle: ADDRESSES_PROVIDER.getPriceOracle(),
+                    userEModeCategory: _usersEModeCategory[onBehalfOf]
                 });
             return
                 BorrowLogic.executeRepay(
                     _reserves,
                     _reservesList,
+                    _eModeCategories,
                     _usersConfig[onBehalfOf],
                     params
                 );
         }
@@ -327,8 +333,9 @@
         return
             BorrowLogic.executeRepay(
                 _reserves,
                 _reservesList,
+                _eModeCategories,
                 _usersConfig[_msgSender()],
                 DataTypes.ExecuteRepayParams({
                     asset: asset,
                     user: _msgSender(),
@@ -337,9 +344,11 @@
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
                     onBehalfOf: _msgSender(),
-                    useATokens: true
+                    useATokens: true,
+                    oracle: ADDRESSES_PROVIDER.getPriceOracle(),
+                    userEModeCategory: _usersEModeCategory[_msgSender()]
                 })
             );
     }
 
@@ -648,11 +657,11 @@
     function finalizeTransfer(
         address asset,
         address from,
         address to,
-        uint256 amount,
-        uint256 balanceFromBefore,
-        uint256 balanceToBefore
+        uint256 scaledAmount,
+        uint256 scaledBalanceFromBefore,
+        uint256 scaledBalanceToBefore
     ) external virtual override {
         require(
             _msgSender() == _reserves[asset].aTokenAddress,
             Errors.CallerNotAToken()
@@ -665,11 +674,11 @@
             DataTypes.FinalizeTransferParams({
                 asset: asset,
                 from: from,
                 to: to,
-                amount: amount,
-                balanceFromBefore: balanceFromBefore,
-                balanceToBefore: balanceToBefore,
+                scaledAmount: scaledAmount,
+                scaledBalanceFromBefore: scaledBalanceFromBefore,
+                scaledBalanceToBefore: scaledBalanceToBefore,
                 oracle: ADDRESSES_PROVIDER.getPriceOracle(),
                 fromEModeCategory: _usersEModeCategory[from]
             })
         );
@@ -910,19 +919,20 @@
     /// @inheritdoc IPool
     function eliminateReserveDeficit(
         address asset,
         uint256 amount
-    ) external override onlyUmbrella {
-        LiquidationLogic.executeEliminateDeficit(
-            _reserves,
-            _usersConfig[_msgSender()],
-            DataTypes.ExecuteEliminateDeficitParams({
-                user: _msgSender(),
-                asset: asset,
-                amount: amount,
-                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY
-            })
-        );
+    ) external override onlyUmbrella returns (uint256) {
+        return
+            LiquidationLogic.executeEliminateDeficit(
+                _reserves,
+                _usersConfig[_msgSender()],
+                DataTypes.ExecuteEliminateDeficitParams({
+                    user: _msgSender(),
+                    asset: asset,
+                    amount: amount,
+                    interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY
+                })
+            );
     }
 
     /// @inheritdoc IPool
     function approvePositionManager(
