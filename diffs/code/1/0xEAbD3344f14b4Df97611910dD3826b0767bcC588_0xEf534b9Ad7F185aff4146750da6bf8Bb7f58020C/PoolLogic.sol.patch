===================================================================
--- lib/aave-v3-origin-private/src/contracts/protocol/libraries/logic/PoolLogic.sol
+++ lib/aave-v3-origin/src/contracts/protocol/libraries/logic/PoolLogic.sol
@@ -7,9 +7,9 @@
 import {IAToken} from "../../../interfaces/IAToken.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
 import {ReserveConfiguration} from "../configuration/ReserveConfiguration.sol";
 import {Errors} from "../helpers/Errors.sol";
-import {WadRayMath} from "../math/WadRayMath.sol";
+import {TokenMath} from "../helpers/TokenMath.sol";
 import {DataTypes} from "../types/DataTypes.sol";
 import {ReserveLogic} from "./ReserveLogic.sol";
 import {ValidationLogic} from "./ValidationLogic.sol";
 import {GenericLogic} from "./GenericLogic.sol";
@@ -21,9 +21,9 @@
  * @notice Implements the logic for Pool specific functions
  */
 library PoolLogic {
     using GPv2SafeERC20 for IERC20;
-    using WadRayMath for uint256;
+    using TokenMath for uint256;
     using ReserveLogic for DataTypes.ReserveData;
     using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
 
     /**
@@ -136,13 +136,13 @@
 
             if (accruedToTreasury != 0) {
                 reserve.accruedToTreasury = 0;
                 uint256 normalizedIncome = reserve.getNormalizedIncome();
-                uint256 amountToMint = accruedToTreasury.rayMul(
+                uint256 amountToMint = accruedToTreasury.getATokenBalance(
                     normalizedIncome
                 );
                 IAToken(reserve.aTokenAddress).mintToTreasury(
-                    amountToMint,
+                    accruedToTreasury,
                     normalizedIncome
                 );
 
                 emit IPool.MintedToTreasury(assetAddress, amountToMint);
