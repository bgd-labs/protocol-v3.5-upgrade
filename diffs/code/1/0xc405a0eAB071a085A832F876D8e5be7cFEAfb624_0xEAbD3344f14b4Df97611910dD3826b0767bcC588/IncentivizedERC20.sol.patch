===================================================================
--- lib/aave-v3-origin/src/contracts/protocol/tokenization/base/IncentivizedERC20.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/IncentivizedERC20.sol
@@ -3,15 +3,16 @@
 
 import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {IERC20Detailed} from "../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
-import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
 import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
 import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
 import {IACLManager} from "../../../interfaces/IACLManager.sol";
+import {DelegationMode} from "./DelegationMode.sol";
 
 /**
  * @title IncentivizedERC20
  * @author Aave, inspired by the Openzeppelin ERC20 implementation
@@ -28,19 +29,19 @@
         IACLManager aclManager = IACLManager(
             _addressesProvider.getACLManager()
         );
         require(
-            aclManager.isPoolAdmin(msg.sender),
-            Errors.CALLER_NOT_POOL_ADMIN
+            aclManager.isPoolAdmin(_msgSender()),
+            Errors.CallerNotPoolAdmin()
         );
         _;
     }
 
     /**
      * @dev Only pool can call functions marked by this modifier.
      */
     modifier onlyPool() {
-        require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);
+        require(_msgSender() == address(POOL), Errors.CallerMustBePool());
         _;
     }
 
     /**
@@ -48,9 +49,10 @@
      * ATokens and VariableDebtTokens use this field store the index of the
      * user's last supply/withdrawal/borrow/repayment.
      */
     struct UserState {
-        uint128 balance;
+        uint120 balance;
+        DelegationMode delegationMode;
         uint128 additionalData;
     }
     // Map of users address and their state data (userAddress => userStateData)
     mapping(address => UserState) internal _userState;
@@ -61,30 +63,39 @@
     uint256 internal _totalSupply;
     string private _name;
     string private _symbol;
     uint8 private _decimals;
-    IAaveIncentivesController internal _incentivesController;
+    // @dev deprecated on v3.4.0, replaced with immutable REWARDS_CONTROLLER
+    IAaveIncentivesController internal __deprecated_incentivesController;
     IPoolAddressesProvider internal immutable _addressesProvider;
     IPool public immutable POOL;
+    /**
+     * @notice Returns the address of the Incentives Controller contract
+     * @return The address of the Incentives Controller
+     */
+    IAaveIncentivesController public immutable REWARDS_CONTROLLER;
 
     /**
      * @dev Constructor.
      * @param pool The reference to the main Pool contract
      * @param name_ The name of the token
      * @param symbol_ The symbol of the token
      * @param decimals_ The number of decimals of the token
+     * @param rewardsController The address of the rewards controller contract
      */
     constructor(
         IPool pool,
         string memory name_,
         string memory symbol_,
-        uint8 decimals_
+        uint8 decimals_,
+        address rewardsController
     ) {
         _addressesProvider = pool.ADDRESSES_PROVIDER();
         _name = name_;
         _symbol = symbol_;
         _decimals = decimals_;
         POOL = pool;
+        REWARDS_CONTROLLER = IAaveIncentivesController(rewardsController);
     }
 
     /// @inheritdoc IERC20Detailed
     function name() public view override returns (string memory) {
@@ -122,27 +133,17 @@
         view
         virtual
         returns (IAaveIncentivesController)
     {
-        return _incentivesController;
+        return REWARDS_CONTROLLER;
     }
 
-    /**
-     * @notice Sets a new Incentives Controller
-     * @param controller the new Incentives controller
-     */
-    function setIncentivesController(
-        IAaveIncentivesController controller
-    ) external onlyPoolAdmin {
-        _incentivesController = controller;
-    }
-
     /// @inheritdoc IERC20
     function transfer(
         address recipient,
         uint256 amount
     ) external virtual override returns (bool) {
-        uint128 castAmount = amount.toUint128();
+        uint120 castAmount = amount.toUint120();
         _transfer(_msgSender(), recipient, castAmount);
         return true;
     }
 
@@ -168,9 +169,9 @@
         address sender,
         address recipient,
         uint256 amount
     ) external virtual override returns (bool) {
-        uint128 castAmount = amount.toUint128();
+        uint120 castAmount = amount.toUint120();
         _approve(
             sender,
             _msgSender(),
             _allowances[sender][_msgSender()] - castAmount
@@ -223,25 +224,24 @@
      */
     function _transfer(
         address sender,
         address recipient,
-        uint128 amount
+        uint120 amount
     ) internal virtual {
-        uint128 oldSenderBalance = _userState[sender].balance;
+        uint120 oldSenderBalance = _userState[sender].balance;
         _userState[sender].balance = oldSenderBalance - amount;
-        uint128 oldRecipientBalance = _userState[recipient].balance;
+        uint120 oldRecipientBalance = _userState[recipient].balance;
         _userState[recipient].balance = oldRecipientBalance + amount;
 
-        IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-        if (address(incentivesControllerLocal) != address(0)) {
+        if (address(REWARDS_CONTROLLER) != address(0)) {
             uint256 currentTotalSupply = _totalSupply;
-            incentivesControllerLocal.handleAction(
+            REWARDS_CONTROLLER.handleAction(
                 sender,
                 currentTotalSupply,
                 oldSenderBalance
             );
             if (sender != recipient) {
-                incentivesControllerLocal.handleAction(
+                REWARDS_CONTROLLER.handleAction(
                     recipient,
                     currentTotalSupply,
                     oldRecipientBalance
                 );
