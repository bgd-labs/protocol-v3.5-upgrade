===================================================================
--- lib/aave-v3-origin/src/contracts/protocol/pool/Pool.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/pool/Pool.sol
@@ -1,7 +1,8 @@
 // SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.10;
 
+import {Multicall, Context} from "openzeppelin-contracts/contracts/utils/Multicall.sol";
 import {VersionedInitializable} from "../../misc/aave-upgradeability/VersionedInitializable.sol";
 import {Errors} from "../libraries/helpers/Errors.sol";
 import {ReserveConfiguration} from "../libraries/configuration/ReserveConfiguration.sol";
 import {PoolLogic} from "../libraries/logic/PoolLogic.sol";
@@ -11,11 +12,11 @@
 import {FlashLoanLogic} from "../libraries/logic/FlashLoanLogic.sol";
 import {BorrowLogic} from "../libraries/logic/BorrowLogic.sol";
 import {LiquidationLogic} from "../libraries/logic/LiquidationLogic.sol";
 import {DataTypes} from "../libraries/types/DataTypes.sol";
-import {BridgeLogic} from "../libraries/logic/BridgeLogic.sol";
 import {IERC20WithPermit} from "../../interfaces/IERC20WithPermit.sol";
 import {IPoolAddressesProvider} from "../../interfaces/IPoolAddressesProvider.sol";
+import {IReserveInterestRateStrategy} from "../../interfaces/IReserveInterestRateStrategy.sol";
 import {IPool} from "../../interfaces/IPool.sol";
 import {IACLManager} from "../../interfaces/IACLManager.sol";
 import {PoolStorage} from "./PoolStorage.sol";
 
@@ -34,13 +35,20 @@
  * @dev To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific market
  * @dev All admin functions are callable by the PoolConfigurator contract defined also in the
  *   PoolAddressesProvider
  */
-abstract contract Pool is VersionedInitializable, PoolStorage, IPool {
+abstract contract Pool is
+    VersionedInitializable,
+    PoolStorage,
+    IPool,
+    Multicall
+{
     using ReserveLogic for DataTypes.ReserveData;
 
     IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;
 
+    address public immutable RESERVE_INTEREST_RATE_STRATEGY;
+
     // @notice The name used to fetch the UMBRELLA contract
     bytes32 public constant UMBRELLA = "UMBRELLA";
 
     /**
@@ -59,57 +67,63 @@
         _;
     }
 
     /**
-     * @dev Only bridge can call functions marked by this modifier.
+     * @dev Only an approved position manager can call functions marked by this modifier.
      */
-    modifier onlyBridge() {
-        _onlyBridge();
+    modifier onlyPositionManager(address onBehalfOf) {
+        _onlyPositionManager(onBehalfOf);
         _;
     }
 
     /**
      * @dev Only the umbrella contract can call functions marked by this modifier.
      */
     modifier onlyUmbrella() {
         require(
-            ADDRESSES_PROVIDER.getAddress(UMBRELLA) == msg.sender,
-            Errors.CALLER_NOT_UMBRELLA
+            ADDRESSES_PROVIDER.getAddress(UMBRELLA) == _msgSender(),
+            Errors.CallerNotUmbrella()
         );
         _;
     }
 
     function _onlyPoolConfigurator() internal view virtual {
         require(
-            ADDRESSES_PROVIDER.getPoolConfigurator() == msg.sender,
-            Errors.CALLER_NOT_POOL_CONFIGURATOR
+            ADDRESSES_PROVIDER.getPoolConfigurator() == _msgSender(),
+            Errors.CallerNotPoolConfigurator()
         );
     }
 
     function _onlyPoolAdmin() internal view virtual {
         require(
             IACLManager(ADDRESSES_PROVIDER.getACLManager()).isPoolAdmin(
-                msg.sender
+                _msgSender()
             ),
-            Errors.CALLER_NOT_POOL_ADMIN
+            Errors.CallerNotPoolAdmin()
         );
     }
 
-    function _onlyBridge() internal view virtual {
+    function _onlyPositionManager(address onBehalfOf) internal view virtual {
         require(
-            IACLManager(ADDRESSES_PROVIDER.getACLManager()).isBridge(
-                msg.sender
-            ),
-            Errors.CALLER_NOT_BRIDGE
+            _positionManager[onBehalfOf][_msgSender()],
+            Errors.CallerNotPositionManager()
         );
     }
 
     /**
      * @dev Constructor.
      * @param provider The address of the PoolAddressesProvider contract
      */
-    constructor(IPoolAddressesProvider provider) {
+    constructor(
+        IPoolAddressesProvider provider,
+        IReserveInterestRateStrategy interestRateStrategy
+    ) {
         ADDRESSES_PROVIDER = provider;
+        require(
+            address(interestRateStrategy) != address(0),
+            Errors.ZeroAddressNotValid()
+        );
+        RESERVE_INTEREST_RATE_STRATEGY = address(interestRateStrategy);
     }
 
     /**
      * @notice Initializes the Pool.
@@ -120,42 +134,8 @@
      */
     function initialize(IPoolAddressesProvider provider) external virtual;
 
     /// @inheritdoc IPool
-    function mintUnbacked(
-        address asset,
-        uint256 amount,
-        address onBehalfOf,
-        uint16 referralCode
-    ) external virtual override onlyBridge {
-        BridgeLogic.executeMintUnbacked(
-            _reserves,
-            _reservesList,
-            _usersConfig[onBehalfOf],
-            asset,
-            amount,
-            onBehalfOf,
-            referralCode
-        );
-    }
-
-    /// @inheritdoc IPool
-    function backUnbacked(
-        address asset,
-        uint256 amount,
-        uint256 fee
-    ) external virtual override onlyBridge returns (uint256) {
-        return
-            BridgeLogic.executeBackUnbacked(
-                _reserves[asset],
-                asset,
-                amount,
-                fee,
-                _bridgeProtocolFee
-            );
-    }
-
-    /// @inheritdoc IPool
     function supply(
         address asset,
         uint256 amount,
         address onBehalfOf,
@@ -165,9 +145,11 @@
             _reserves,
             _reservesList,
             _usersConfig[onBehalfOf],
             DataTypes.ExecuteSupplyParams({
+                user: _msgSender(),
                 asset: asset,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                 amount: amount,
                 onBehalfOf: onBehalfOf,
                 referralCode: referralCode
             })
@@ -186,9 +168,9 @@
         bytes32 permitS
     ) public virtual override {
         try
             IERC20WithPermit(asset).permit(
-                msg.sender,
+                _msgSender(),
                 address(this),
                 amount,
                 deadline,
                 permitV,
@@ -200,9 +182,11 @@
             _reserves,
             _reservesList,
             _usersConfig[onBehalfOf],
             DataTypes.ExecuteSupplyParams({
+                user: _msgSender(),
                 asset: asset,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                 amount: amount,
                 onBehalfOf: onBehalfOf,
                 referralCode: referralCode
             })
@@ -219,16 +203,17 @@
             SupplyLogic.executeWithdraw(
                 _reserves,
                 _reservesList,
                 _eModeCategories,
-                _usersConfig[msg.sender],
+                _usersConfig[_msgSender()],
                 DataTypes.ExecuteWithdrawParams({
+                    user: _msgSender(),
                     asset: asset,
+                    interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                     amount: amount,
                     to: to,
-                    reservesCount: _reservesCount,
                     oracle: ADDRESSES_PROVIDER.getPriceOracle(),
-                    userEModeCategory: _usersEModeCategory[msg.sender]
+                    userEModeCategory: _usersEModeCategory[_msgSender()]
                 })
             );
     }
 
@@ -246,15 +231,15 @@
             _eModeCategories,
             _usersConfig[onBehalfOf],
             DataTypes.ExecuteBorrowParams({
                 asset: asset,
-                user: msg.sender,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
+                user: _msgSender(),
                 onBehalfOf: onBehalfOf,
                 amount: amount,
                 interestRateMode: DataTypes.InterestRateMode(interestRateMode),
                 referralCode: referralCode,
                 releaseUnderlying: true,
-                reservesCount: _reservesCount,
                 oracle: ADDRESSES_PROVIDER.getPriceOracle(),
                 userEModeCategory: _usersEModeCategory[onBehalfOf],
                 priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()
             })
@@ -274,8 +259,10 @@
                 _reservesList,
                 _usersConfig[onBehalfOf],
                 DataTypes.ExecuteRepayParams({
                     asset: asset,
+                    user: _msgSender(),
+                    interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                     amount: amount,
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
@@ -297,9 +284,9 @@
         bytes32 permitS
     ) public virtual override returns (uint256) {
         try
             IERC20WithPermit(asset).permit(
-                msg.sender,
+                _msgSender(),
                 address(this),
                 amount,
                 deadline,
                 permitV,
@@ -311,8 +298,10 @@
         {
             DataTypes.ExecuteRepayParams memory params = DataTypes
                 .ExecuteRepayParams({
                     asset: asset,
+                    user: _msgSender(),
+                    interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                     amount: amount,
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
@@ -338,16 +327,18 @@
         return
             BorrowLogic.executeRepay(
                 _reserves,
                 _reservesList,
-                _usersConfig[msg.sender],
+                _usersConfig[_msgSender()],
                 DataTypes.ExecuteRepayParams({
                     asset: asset,
+                    user: _msgSender(),
+                    interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                     amount: amount,
                     interestRateMode: DataTypes.InterestRateMode(
                         interestRateMode
                     ),
-                    onBehalfOf: msg.sender,
+                    onBehalfOf: _msgSender(),
                     useATokens: true
                 })
             );
     }
@@ -360,22 +351,22 @@
         SupplyLogic.executeUseReserveAsCollateral(
             _reserves,
             _reservesList,
             _eModeCategories,
-            _usersConfig[msg.sender],
+            _usersConfig[_msgSender()],
+            _msgSender(),
             asset,
             useAsCollateral,
-            _reservesCount,
             ADDRESSES_PROVIDER.getPriceOracle(),
-            _usersEModeCategory[msg.sender]
+            _usersEModeCategory[_msgSender()]
         );
     }
 
     /// @inheritdoc IPool
     function liquidationCall(
         address collateralAsset,
         address debtAsset,
-        address user,
+        address borrower,
         uint256 debtToCover,
         bool receiveAToken
     ) public virtual override {
         LiquidationLogic.executeLiquidationCall(
@@ -383,17 +374,19 @@
             _reservesList,
             _usersConfig,
             _eModeCategories,
             DataTypes.ExecuteLiquidationCallParams({
-                reservesCount: _reservesCount,
+                liquidator: _msgSender(),
                 debtToCover: debtToCover,
                 collateralAsset: collateralAsset,
                 debtAsset: debtAsset,
-                user: user,
+                borrower: borrower,
                 receiveAToken: receiveAToken,
                 priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),
-                userEModeCategory: _usersEModeCategory[user],
-                priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()
+                borrowerEModeCategory: _usersEModeCategory[borrower],
+                priceOracleSentinel: ADDRESSES_PROVIDER
+                    .getPriceOracleSentinel(),
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY
             })
         );
     }
 
@@ -408,24 +401,24 @@
         uint16 referralCode
     ) public virtual override {
         DataTypes.FlashloanParams memory flashParams = DataTypes
             .FlashloanParams({
+                user: _msgSender(),
                 receiverAddress: receiverAddress,
                 assets: assets,
                 amounts: amounts,
                 interestRateModes: interestRateModes,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                 onBehalfOf: onBehalfOf,
                 params: params,
                 referralCode: referralCode,
-                flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,
-                flashLoanPremiumTotal: _flashLoanPremiumTotal,
-                reservesCount: _reservesCount,
+                flashLoanPremium: _flashLoanPremium,
                 addressesProvider: address(ADDRESSES_PROVIDER),
                 pool: address(this),
                 userEModeCategory: _usersEModeCategory[onBehalfOf],
                 isAuthorizedFlashBorrower: IACLManager(
                     ADDRESSES_PROVIDER.getACLManager()
-                ).isFlashBorrower(msg.sender)
+                ).isFlashBorrower(_msgSender())
             });
 
         FlashLoanLogic.executeFlashLoan(
             _reserves,
@@ -445,15 +438,16 @@
         uint16 referralCode
     ) public virtual override {
         DataTypes.FlashloanSimpleParams memory flashParams = DataTypes
             .FlashloanSimpleParams({
+                user: _msgSender(),
                 receiverAddress: receiverAddress,
                 asset: asset,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                 amount: amount,
                 params: params,
                 referralCode: referralCode,
-                flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,
-                flashLoanPremiumTotal: _flashLoanPremiumTotal
+                flashLoanPremium: _flashLoanPremium
             });
         FlashLoanLogic.executeFlashLoanSimple(_reserves[asset], flashParams);
     }
 
@@ -471,13 +465,11 @@
         external
         view
         virtual
         override
-        returns (DataTypes.ReserveDataLegacy memory)
+        returns (DataTypes.ReserveDataLegacy memory res)
     {
         DataTypes.ReserveData storage reserve = _reserves[asset];
-        DataTypes.ReserveDataLegacy memory res;
-
         res.configuration = reserve.configuration;
         res.liquidityIndex = reserve.liquidityIndex;
         res.currentLiquidityRate = reserve.currentLiquidityRate;
         res.variableBorrowIndex = reserve.variableBorrowIndex;
@@ -485,19 +477,18 @@
         res.lastUpdateTimestamp = reserve.lastUpdateTimestamp;
         res.id = reserve.id;
         res.aTokenAddress = reserve.aTokenAddress;
         res.variableDebtTokenAddress = reserve.variableDebtTokenAddress;
-        res.interestRateStrategyAddress = reserve.interestRateStrategyAddress;
+        res.interestRateStrategyAddress = RESERVE_INTEREST_RATE_STRATEGY;
         res.accruedToTreasury = reserve.accruedToTreasury;
-        res.unbacked = reserve.unbacked;
+        res.unbacked = 0;
         res.isolationModeTotalDebt = reserve.isolationModeTotalDebt;
         // This is a temporary workaround for integrations that are broken by Aave 3.2
         // While the new pool data provider is backward compatible, some integrations hard-code an old implementation
         // To allow them to not have any infrastructural blocker, a mock must be configured in the Aave Pool Addresses Provider, returning zero on all required view methods, instead of reverting
         res.stableDebtTokenAddress = ADDRESSES_PROVIDER.getAddress(
             bytes32("MOCK_STABLE_DEBT")
         );
-        return res;
     }
 
     /// @inheritdoc IPool
     function getVirtualUnderlyingBalance(
@@ -529,9 +520,8 @@
                 _reservesList,
                 _eModeCategories,
                 DataTypes.CalculateUserAccountDataParams({
                     userConfig: _usersConfig[user],
-                    reservesCount: _reservesCount,
                     user: user,
                     oracle: ADDRESSES_PROVIDER.getPriceOracle(),
                     userEModeCategory: _usersEModeCategory[user]
                 })
@@ -621,27 +611,16 @@
         return _reservesList[id];
     }
 
     /// @inheritdoc IPool
-    function BRIDGE_PROTOCOL_FEE()
-        public
-        view
-        virtual
-        override
-        returns (uint256)
-    {
-        return _bridgeProtocolFee;
-    }
-
-    /// @inheritdoc IPool
     function FLASHLOAN_PREMIUM_TOTAL()
         public
         view
         virtual
         override
         returns (uint128)
     {
-        return _flashLoanPremiumTotal;
+        return _flashLoanPremium;
     }
 
     /// @inheritdoc IPool
     function FLASHLOAN_PREMIUM_TO_PROTOCOL()
@@ -650,9 +629,9 @@
         virtual
         override
         returns (uint128)
     {
-        return _flashLoanPremiumToProtocol;
+        return 100_00;
     }
 
     /// @inheritdoc IPool
     function MAX_NUMBER_RESERVES()
@@ -674,10 +653,10 @@
         uint256 balanceFromBefore,
         uint256 balanceToBefore
     ) external virtual override {
         require(
-            msg.sender == _reserves[asset].aTokenAddress,
-            Errors.CALLER_NOT_ATOKEN
+            _msgSender() == _reserves[asset].aTokenAddress,
+            Errors.CallerNotAToken()
         );
         SupplyLogic.executeFinalizeTransfer(
             _reserves,
             _reservesList,
@@ -689,9 +668,8 @@
                 to: to,
                 amount: amount,
                 balanceFromBefore: balanceFromBefore,
                 balanceToBefore: balanceToBefore,
-                reservesCount: _reservesCount,
                 oracle: ADDRESSES_PROVIDER.getPriceOracle(),
                 fromEModeCategory: _usersEModeCategory[from]
             })
         );
@@ -700,10 +678,9 @@
     /// @inheritdoc IPool
     function initReserve(
         address asset,
         address aTokenAddress,
-        address variableDebtAddress,
-        address interestRateStrategyAddress
+        address variableDebtAddress
     ) external virtual override onlyPoolConfigurator {
         if (
             PoolLogic.executeInitReserve(
                 _reserves,
@@ -711,9 +688,8 @@
                 DataTypes.InitReserveParams({
                     asset: asset,
                     aTokenAddress: aTokenAddress,
                     variableDebtAddress: variableDebtAddress,
-                    interestRateStrategyAddress: interestRateStrategyAddress,
                     reservesCount: _reservesCount,
                     maxNumberReserves: MAX_NUMBER_RESERVES()
                 })
             )
@@ -729,83 +705,52 @@
         PoolLogic.executeDropReserve(_reserves, _reservesList, asset);
     }
 
     /// @inheritdoc IPool
-    function setReserveInterestRateStrategyAddress(
-        address asset,
-        address rateStrategyAddress
-    ) external virtual override onlyPoolConfigurator {
-        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
-        require(
-            _reserves[asset].id != 0 || _reservesList[0] == asset,
-            Errors.ASSET_NOT_LISTED
-        );
-
-        _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;
-    }
-
-    /// @inheritdoc IPool
     function syncIndexesState(
         address asset
     ) external virtual override onlyPoolConfigurator {
-        DataTypes.ReserveData storage reserve = _reserves[asset];
-        DataTypes.ReserveCache memory reserveCache = reserve.cache();
-
-        reserve.updateState(reserveCache);
+        PoolLogic.executeSyncIndexesState(_reserves[asset]);
     }
 
     /// @inheritdoc IPool
     function syncRatesState(
         address asset
     ) external virtual override onlyPoolConfigurator {
-        DataTypes.ReserveData storage reserve = _reserves[asset];
-        DataTypes.ReserveCache memory reserveCache = reserve.cache();
-
-        ReserveLogic.updateInterestRatesAndVirtualBalance(
-            reserve,
-            reserveCache,
+        PoolLogic.executeSyncRatesState(
+            _reserves[asset],
             asset,
-            0,
-            0
+            RESERVE_INTEREST_RATE_STRATEGY
         );
     }
 
     /// @inheritdoc IPool
     function setConfiguration(
         address asset,
         DataTypes.ReserveConfigurationMap calldata configuration
     ) external virtual override onlyPoolConfigurator {
-        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
+        require(asset != address(0), Errors.ZeroAddressNotValid());
         require(
             _reserves[asset].id != 0 || _reservesList[0] == asset,
-            Errors.ASSET_NOT_LISTED
+            Errors.AssetNotListed()
         );
         _reserves[asset].configuration = configuration;
     }
 
     /// @inheritdoc IPool
-    function updateBridgeProtocolFee(
-        uint256 protocolFee
+    function updateFlashloanPremium(
+        uint128 flashLoanPremium
     ) external virtual override onlyPoolConfigurator {
-        _bridgeProtocolFee = protocolFee;
+        _flashLoanPremium = flashLoanPremium;
     }
 
     /// @inheritdoc IPool
-    function updateFlashloanPremiums(
-        uint128 flashLoanPremiumTotal,
-        uint128 flashLoanPremiumToProtocol
-    ) external virtual override onlyPoolConfigurator {
-        _flashLoanPremiumTotal = flashLoanPremiumTotal;
-        _flashLoanPremiumToProtocol = flashLoanPremiumToProtocol;
-    }
-
-    /// @inheritdoc IPool
     function configureEModeCategory(
         uint8 id,
         DataTypes.EModeCategoryBaseConfiguration calldata category
     ) external virtual override onlyPoolConfigurator {
         // category 0 is reserved for volatile heterogeneous assets and it's always disabled
-        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
+        require(id != 0, Errors.EModeCategoryReserved());
         _eModeCategories[id].ltv = category.ltv;
         _eModeCategories[id].liquidationThreshold = category
             .liquidationThreshold;
         _eModeCategories[id].liquidationBonus = category.liquidationBonus;
@@ -817,9 +762,9 @@
         uint8 id,
         uint128 collateralBitmap
     ) external virtual override onlyPoolConfigurator {
         // category 0 is reserved for volatile heterogeneous assets and it's always disabled
-        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
+        require(id != 0, Errors.EModeCategoryReserved());
         _eModeCategories[id].collateralBitmap = collateralBitmap;
     }
 
     /// @inheritdoc IPool
@@ -827,9 +772,9 @@
         uint8 id,
         uint128 borrowableBitmap
     ) external virtual override onlyPoolConfigurator {
         // category 0 is reserved for volatile heterogeneous assets and it's always disabled
-        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);
+        require(id != 0, Errors.EModeCategoryReserved());
         _eModeCategories[id].borrowableBitmap = borrowableBitmap;
     }
 
     /// @inheritdoc IPool
@@ -855,15 +800,12 @@
 
     /// @inheritdoc IPool
     function getEModeCategoryCollateralConfig(
         uint8 id
-    ) external view returns (DataTypes.CollateralConfig memory) {
-        return
-            DataTypes.CollateralConfig({
-                ltv: _eModeCategories[id].ltv,
-                liquidationThreshold: _eModeCategories[id].liquidationThreshold,
-                liquidationBonus: _eModeCategories[id].liquidationBonus
-            });
+    ) external view returns (DataTypes.CollateralConfig memory res) {
+        res.ltv = _eModeCategories[id].ltv;
+        res.liquidationThreshold = _eModeCategories[id].liquidationThreshold;
+        res.liquidationBonus = _eModeCategories[id].liquidationBonus;
     }
 
     /// @inheritdoc IPool
     function getEModeCategoryLabel(
@@ -892,14 +834,12 @@
             _reserves,
             _reservesList,
             _eModeCategories,
             _usersEModeCategory,
-            _usersConfig[msg.sender],
-            DataTypes.ExecuteSetUserEModeParams({
-                reservesCount: _reservesCount,
-                oracle: ADDRESSES_PROVIDER.getPriceOracle(),
-                categoryId: categoryId
-            })
+            _usersConfig[_msgSender()],
+            _msgSender(),
+            ADDRESSES_PROVIDER.getPriceOracle(),
+            categoryId
         );
     }
 
     /// @inheritdoc IPool
@@ -929,9 +869,9 @@
         uint40 until
     ) external virtual override onlyPoolConfigurator {
         require(
             _reserves[asset].id != 0 || _reservesList[0] == asset,
-            Errors.ASSET_NOT_LISTED
+            Errors.AssetNotListed()
         );
         PoolLogic.executeSetLiquidationGracePeriod(_reserves, asset, until);
     }
 
@@ -956,9 +896,11 @@
             _reserves,
             _reservesList,
             _usersConfig[onBehalfOf],
             DataTypes.ExecuteSupplyParams({
+                user: _msgSender(),
                 asset: asset,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY,
                 amount: amount,
                 onBehalfOf: onBehalfOf,
                 referralCode: referralCode
             })
@@ -971,17 +913,94 @@
         uint256 amount
     ) external override onlyUmbrella {
         LiquidationLogic.executeEliminateDeficit(
             _reserves,
-            _usersConfig[msg.sender],
+            _usersConfig[_msgSender()],
             DataTypes.ExecuteEliminateDeficitParams({
+                user: _msgSender(),
                 asset: asset,
-                amount: amount
+                amount: amount,
+                interestRateStrategyAddress: RESERVE_INTEREST_RATE_STRATEGY
             })
         );
     }
 
     /// @inheritdoc IPool
+    function approvePositionManager(
+        address positionManager,
+        bool approve
+    ) external override {
+        if (_positionManager[_msgSender()][positionManager] == approve) return;
+        _positionManager[_msgSender()][positionManager] = approve;
+
+        if (approve) {
+            emit PositionManagerApproved({
+                user: _msgSender(),
+                positionManager: positionManager
+            });
+        } else {
+            emit PositionManagerRevoked({
+                user: _msgSender(),
+                positionManager: positionManager
+            });
+        }
+    }
+
+    /// @inheritdoc IPool
+    function renouncePositionManagerRole(address user) external override {
+        if (_positionManager[user][_msgSender()] == false) return;
+        _positionManager[user][_msgSender()] = false;
+        emit PositionManagerRevoked({
+            user: user,
+            positionManager: _msgSender()
+        });
+    }
+
+    /// @inheritdoc IPool
+    function setUserUseReserveAsCollateralOnBehalfOf(
+        address asset,
+        bool useAsCollateral,
+        address onBehalfOf
+    ) external override onlyPositionManager(onBehalfOf) {
+        SupplyLogic.executeUseReserveAsCollateral(
+            _reserves,
+            _reservesList,
+            _eModeCategories,
+            _usersConfig[onBehalfOf],
+            onBehalfOf,
+            asset,
+            useAsCollateral,
+            ADDRESSES_PROVIDER.getPriceOracle(),
+            _usersEModeCategory[onBehalfOf]
+        );
+    }
+
+    /// @inheritdoc IPool
+    function setUserEModeOnBehalfOf(
+        uint8 categoryId,
+        address onBehalfOf
+    ) external override onlyPositionManager(onBehalfOf) {
+        EModeLogic.executeSetUserEMode(
+            _reserves,
+            _reservesList,
+            _eModeCategories,
+            _usersEModeCategory,
+            _usersConfig[onBehalfOf],
+            onBehalfOf,
+            ADDRESSES_PROVIDER.getPriceOracle(),
+            categoryId
+        );
+    }
+
+    /// @inheritdoc IPool
+    function isApprovedPositionManager(
+        address user,
+        address positionManager
+    ) external view override returns (bool) {
+        return _positionManager[user][positionManager];
+    }
+
+    /// @inheritdoc IPool
     function getReserveDeficit(
         address asset
     ) external view virtual returns (uint256) {
         return _reserves[asset].deficit;
@@ -1011,13 +1030,8 @@
         return address(BorrowLogic);
     }
 
     /// @inheritdoc IPool
-    function getBridgeLogic() external pure returns (address) {
-        return address(BridgeLogic);
-    }
-
-    /// @inheritdoc IPool
     function getEModeLogic() external pure returns (address) {
         return address(EModeLogic);
     }
 
