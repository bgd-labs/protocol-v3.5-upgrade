===================================================================
--- lib/gho-core/src/contracts/facilitators/aave/tokens/base/ScaledBalanceTokenBase.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol
@@ -1,13 +1,13 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {SafeCast} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {Errors} from "@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "@aave/core-v3/contracts/interfaces/IPool.sol";
-import {IScaledBalanceToken} from "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol";
-import {MintableIncentivizedERC20} from "@aave/core-v3/contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
+import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
+import {MintableIncentivizedERC20} from "./MintableIncentivizedERC20.sol";
 
 /**
  * @title ScaledBalanceTokenBase
  * @author Aave
@@ -25,15 +25,25 @@
      * @param pool The reference to the main Pool contract
      * @param name The name of the token
      * @param symbol The symbol of the token
      * @param decimals The number of decimals of the token
+     * @param rewardsController The address of the rewards controller contract
      */
     constructor(
         IPool pool,
         string memory name,
         string memory symbol,
-        uint8 decimals
-    ) MintableIncentivizedERC20(pool, name, symbol, decimals) {
+        uint8 decimals,
+        address rewardsController
+    )
+        MintableIncentivizedERC20(
+            pool,
+            name,
+            symbol,
+            decimals,
+            rewardsController
+        )
+    {
         // Intentionally left blank
     }
 
     /// @inheritdoc IScaledBalanceToken
@@ -80,19 +90,19 @@
         address caller,
         address onBehalfOf,
         uint256 amount,
         uint256 index
-    ) internal virtual returns (bool) {
+    ) internal returns (bool) {
         uint256 amountScaled = amount.rayDiv(index);
-        require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
+        require(amountScaled != 0, Errors.InvalidMintAmount());
 
         uint256 scaledBalance = super.balanceOf(onBehalfOf);
         uint256 balanceIncrease = scaledBalance.rayMul(index) -
             scaledBalance.rayMul(_userState[onBehalfOf].additionalData);
 
         _userState[onBehalfOf].additionalData = index.toUint128();
 
-        _mint(onBehalfOf, amountScaled.toUint128());
+        _mint(onBehalfOf, amountScaled.toUint120());
 
         uint256 amountToMint = amount + balanceIncrease;
         emit Transfer(address(0), onBehalfOf, amountToMint);
         emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);
@@ -107,25 +117,26 @@
      * @param user The user which debt is burnt
      * @param target The address that will receive the underlying, if any
      * @param amount The amount getting burned
      * @param index The variable debt index of the reserve
+     * @return `true` if the the new balance of the user is 0
      */
     function _burnScaled(
         address user,
         address target,
         uint256 amount,
         uint256 index
-    ) internal virtual {
+    ) internal returns (bool) {
         uint256 amountScaled = amount.rayDiv(index);
-        require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
+        require(amountScaled != 0, Errors.InvalidBurnAmount());
 
         uint256 scaledBalance = super.balanceOf(user);
         uint256 balanceIncrease = scaledBalance.rayMul(index) -
             scaledBalance.rayMul(_userState[user].additionalData);
 
         _userState[user].additionalData = index.toUint128();
 
-        _burn(user, amountScaled.toUint128());
+        _burn(user, amountScaled.toUint120());
 
         if (balanceIncrease > amount) {
             uint256 amountToMint = balanceIncrease - amount;
             emit Transfer(address(0), user, amountToMint);
@@ -134,6 +145,7 @@
             uint256 amountToBurn = amount - balanceIncrease;
             emit Transfer(user, address(0), amountToBurn);
             emit Burn(user, target, amountToBurn, balanceIncrease, index);
         }
+        return scaledBalance - amountScaled == 0;
     }
 }
