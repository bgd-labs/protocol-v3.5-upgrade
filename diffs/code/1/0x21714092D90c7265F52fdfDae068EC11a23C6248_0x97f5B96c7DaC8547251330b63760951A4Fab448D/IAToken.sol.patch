===================================================================
--- lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IAToken.sol
+++ lib/aave-v3-origin-private/src/contracts/interfaces/IAToken.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IERC20} from "../dependencies/openzeppelin/contracts/IERC20.sol";
 import {IScaledBalanceToken} from "./IScaledBalanceToken.sol";
@@ -67,13 +67,15 @@
      * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken
      * @param from The address getting liquidated, current owner of the aTokens
      * @param to The recipient
      * @param value The amount of tokens getting transferred
+     * @param index The next liquidity index of the reserve
      */
     function transferOnLiquidation(
         address from,
         address to,
-        uint256 value
+        uint256 value,
+        uint256 index
     ) external;
 
     /**
      * @notice Transfers the underlying asset to `target`.
@@ -83,23 +85,8 @@
      */
     function transferUnderlyingTo(address target, uint256 amount) external;
 
     /**
-     * @notice Handles the underlying received by the aToken after the transfer has been completed.
-     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the
-     * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying
-     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.
-     * @param user The user executing the repayment
-     * @param onBehalfOf The address of the user who will get his debt reduced/removed
-     * @param amount The amount getting repaid
-     */
-    function handleRepayment(
-        address user,
-        address onBehalfOf,
-        uint256 amount
-    ) external;
-
-    /**
      * @notice Allow passing a signed message to approve spending
      * @dev implements the permit function as for
      * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md
      * @param owner The owner of the funds
