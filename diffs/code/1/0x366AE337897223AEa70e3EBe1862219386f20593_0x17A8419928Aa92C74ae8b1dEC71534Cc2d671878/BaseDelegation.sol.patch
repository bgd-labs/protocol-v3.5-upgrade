===================================================================
--- lib/aave-token-v3/src/BaseDelegation.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/delegation/BaseDelegation.sol
@@ -1,13 +1,17 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
+pragma solidity ^0.8.10;
 
+import {MessageHashUtils} from "openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol";
 import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 
-import {SafeCast72} from "./utils/SafeCast72.sol";
-import {IGovernancePowerDelegationToken} from "./interfaces/IGovernancePowerDelegationToken.sol";
-import {DelegationMode} from "./DelegationAwareBalance.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
 
+import {IBaseDelegation} from "./interfaces/IBaseDelegation.sol";
+import {DelegationMode} from "../base/DelegationMode.sol";
+
 /**
  * @notice The contract implements generic delegation functionality for the upcoming governance v3
  * @author BGD Labs
  * @dev to make it's pluggable to any exising token it has a set of virtual functions
@@ -17,9 +21,9 @@
  *   and possible totalSupply lower then 4722366482869645213696,
  *   otherwise at least POWER_SCALE_FACTOR should be adjusted !!!
  *   *************************************************************
  */
-abstract contract BaseDelegation is IGovernancePowerDelegationToken {
+abstract contract BaseDelegation is IBaseDelegation {
     struct DelegationState {
         uint72 delegatedPropositionBalance;
         uint72 delegatedVotingBalance;
         DelegationMode delegationMode;
@@ -84,23 +88,23 @@
         address user,
         DelegationState memory delegationState
     ) internal virtual;
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function delegateByType(
         address delegatee,
         GovernancePowerType delegationType
     ) external virtual override {
         _delegateByType(msg.sender, delegatee, delegationType);
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function delegate(address delegatee) external override {
         _delegateByType(msg.sender, delegatee, GovernancePowerType.VOTING);
         _delegateByType(msg.sender, delegatee, GovernancePowerType.PROPOSITION);
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function getDelegateeByType(
         address delegator,
         GovernancePowerType delegationType
     ) external view override returns (address) {
@@ -111,9 +115,9 @@
                 delegationType
             );
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function getDelegates(
         address delegator
     ) external view override returns (address, address) {
         DelegationState memory delegatorBalance = _getDelegationState(
@@ -132,9 +136,9 @@
             )
         );
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function getPowerCurrent(
         address user,
         GovernancePowerType delegationType
     ) public view virtual override returns (uint256) {
@@ -147,12 +151,14 @@
         uint256 userDelegatedPower = _getDelegatedPowerByType(
             userState,
             delegationType
         );
+
+        // The power returned is the scaled power, assuming an index of 1e27. The voting strategy is based on the same assumption.
         return userOwnPower + userDelegatedPower;
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function getPowersCurrent(
         address user
     ) external view override returns (uint256, uint256) {
         return (
@@ -160,9 +166,9 @@
             getPowerCurrent(user, GovernancePowerType.PROPOSITION)
         );
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function metaDelegateByType(
         address delegator,
         address delegatee,
         GovernancePowerType delegationType,
@@ -170,12 +176,13 @@
         uint8 v,
         bytes32 r,
         bytes32 s
     ) external override {
-        require(delegator != address(0), "INVALID_OWNER");
+        require(delegator != address(0), Errors.ZeroAddressNotValid());
         //solium-disable-next-line
-        require(block.timestamp <= deadline, "INVALID_EXPIRATION");
-        bytes32 digest = ECDSA.toTypedDataHash(
+        require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+        bytes32 digest = MessageHashUtils.toTypedDataHash(
             _getDomainSeparator(),
             keccak256(
                 abi.encode(
                     DELEGATE_BY_TYPE_TYPEHASH,
@@ -189,26 +196,28 @@
         );
 
         require(
             delegator == ECDSA.recover(digest, v, r, s),
-            "INVALID_SIGNATURE"
+            Errors.InvalidSignature()
         );
+
         _delegateByType(delegator, delegatee, delegationType);
     }
 
-    /// @inheritdoc IGovernancePowerDelegationToken
+    /// @inheritdoc IBaseDelegation
     function metaDelegate(
         address delegator,
         address delegatee,
         uint256 deadline,
         uint8 v,
         bytes32 r,
         bytes32 s
     ) external override {
-        require(delegator != address(0), "INVALID_OWNER");
+        require(delegator != address(0), Errors.ZeroAddressNotValid());
         //solium-disable-next-line
-        require(block.timestamp <= deadline, "INVALID_EXPIRATION");
-        bytes32 digest = ECDSA.toTypedDataHash(
+        require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+        bytes32 digest = MessageHashUtils.toTypedDataHash(
             _getDomainSeparator(),
             keccak256(
                 abi.encode(
                     DELEGATE_TYPEHASH,
@@ -221,10 +230,11 @@
         );
 
         require(
             delegator == ECDSA.recover(digest, v, r, s),
-            "INVALID_SIGNATURE"
+            Errors.InvalidSignature()
         );
+
         _delegateByType(delegator, delegatee, GovernancePowerType.VOTING);
         _delegateByType(delegator, delegatee, GovernancePowerType.PROPOSITION);
     }
 
@@ -252,12 +262,12 @@
         if (impactOnDelegationBefore == impactOnDelegationAfter) return;
 
         // we use uint72, because this is the most optimal for AaveTokenV3
         // To make delegated balance fit into uint72 we're decreasing precision of delegated balance by POWER_SCALE_FACTOR
-        uint72 impactOnDelegationBefore72 = SafeCast72.toUint72(
+        uint72 impactOnDelegationBefore72 = SafeCast.toUint72(
             impactOnDelegationBefore / POWER_SCALE_FACTOR
         );
-        uint72 impactOnDelegationAfter72 = SafeCast72.toUint72(
+        uint72 impactOnDelegationAfter72 = SafeCast.toUint72(
             impactOnDelegationAfter / POWER_SCALE_FACTOR
         );
 
         DelegationState memory delegateeState = _getDelegationState(delegatee);
