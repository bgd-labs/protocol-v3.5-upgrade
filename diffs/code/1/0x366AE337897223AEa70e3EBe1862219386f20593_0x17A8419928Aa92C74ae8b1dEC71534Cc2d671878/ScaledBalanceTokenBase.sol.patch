===================================================================
--- src/contracts/ScaledBalanceTokenBase.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {SafeCast} from "./dependencies/SafeCast.sol";
-import {Errors} from "aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "aave-v3-core/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {IScaledBalanceToken} from "aave-v3-core/contracts/interfaces/IScaledBalanceToken.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
+import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
 import {MintableIncentivizedERC20} from "./MintableIncentivizedERC20.sol";
 
 /**
  * @title ScaledBalanceTokenBase
@@ -25,15 +25,25 @@
      * @param pool The reference to the main Pool contract
      * @param name The name of the token
      * @param symbol The symbol of the token
      * @param decimals The number of decimals of the token
+     * @param rewardsController The address of the rewards controller contract
      */
     constructor(
         IPool pool,
         string memory name,
         string memory symbol,
-        uint8 decimals
-    ) MintableIncentivizedERC20(pool, name, symbol, decimals) {
+        uint8 decimals,
+        address rewardsController
+    )
+        MintableIncentivizedERC20(
+            pool,
+            name,
+            symbol,
+            decimals,
+            rewardsController
+        )
+    {
         // Intentionally left blank
     }
 
     /// @inheritdoc IScaledBalanceToken
@@ -82,9 +92,9 @@
         uint256 amount,
         uint256 index
     ) internal returns (bool) {
         uint256 amountScaled = amount.rayDiv(index);
-        require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
+        require(amountScaled != 0, Errors.InvalidMintAmount());
 
         uint256 scaledBalance = super.balanceOf(onBehalfOf);
         uint256 balanceIncrease = scaledBalance.rayMul(index) -
             scaledBalance.rayMul(_userState[onBehalfOf].additionalData);
@@ -107,17 +117,18 @@
      * @param user The user which debt is burnt
      * @param target The address that will receive the underlying, if any
      * @param amount The amount getting burned
      * @param index The variable debt index of the reserve
+     * @return `true` if the the new balance of the user is 0
      */
     function _burnScaled(
         address user,
         address target,
         uint256 amount,
         uint256 index
-    ) internal {
+    ) internal returns (bool) {
         uint256 amountScaled = amount.rayDiv(index);
-        require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
+        require(amountScaled != 0, Errors.InvalidBurnAmount());
 
         uint256 scaledBalance = super.balanceOf(user);
         uint256 balanceIncrease = scaledBalance.rayMul(index) -
             scaledBalance.rayMul(_userState[user].additionalData);
@@ -134,59 +145,7 @@
             uint256 amountToBurn = amount - balanceIncrease;
             emit Transfer(user, address(0), amountToBurn);
             emit Burn(user, target, amountToBurn, balanceIncrease, index);
         }
+        return scaledBalance - amountScaled == 0;
     }
-
-    /**
-     * @notice Implements the basic logic to transfer scaled balance tokens between two users
-     * @dev It emits a mint event with the interest accrued per user
-     * @param sender The source address
-     * @param recipient The destination address
-     * @param amount The amount getting transferred
-     * @param index The next liquidity index of the reserve
-     */
-    function _transfer(
-        address sender,
-        address recipient,
-        uint256 amount,
-        uint256 index
-    ) internal {
-        uint256 senderScaledBalance = super.balanceOf(sender);
-        uint256 senderBalanceIncrease = senderScaledBalance.rayMul(index) -
-            senderScaledBalance.rayMul(_userState[sender].additionalData);
-
-        uint256 recipientScaledBalance = super.balanceOf(recipient);
-        uint256 recipientBalanceIncrease = recipientScaledBalance.rayMul(
-            index
-        ) - recipientScaledBalance.rayMul(_userState[recipient].additionalData);
-
-        _userState[sender].additionalData = index.toUint128();
-        _userState[recipient].additionalData = index.toUint128();
-
-        super._transfer(sender, recipient, amount.rayDiv(index).toUint120());
-
-        if (senderBalanceIncrease > 0) {
-            emit Transfer(address(0), sender, senderBalanceIncrease);
-            emit Mint(
-                _msgSender(),
-                sender,
-                senderBalanceIncrease,
-                senderBalanceIncrease,
-                index
-            );
-        }
-
-        if (sender != recipient && recipientBalanceIncrease > 0) {
-            emit Transfer(address(0), recipient, recipientBalanceIncrease);
-            emit Mint(
-                _msgSender(),
-                recipient,
-                recipientBalanceIncrease,
-                recipientBalanceIncrease,
-                index
-            );
-        }
-
-        emit Transfer(sender, recipient, amount);
-    }
 }
