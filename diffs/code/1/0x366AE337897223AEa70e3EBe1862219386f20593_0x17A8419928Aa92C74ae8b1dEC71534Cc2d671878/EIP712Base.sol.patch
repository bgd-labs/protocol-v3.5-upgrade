===================================================================
--- src/contracts/dependencies/EIP712Base.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/EIP712Base.sol
@@ -1,38 +1,42 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
-import {EIP712} from "aave-token-v3/utils/EIP712.sol";
-
 /**
  * @title EIP712Base
  * @author Aave
  * @notice Base contract implementation of EIP712.
  */
-abstract contract EIP712Base is EIP712 {
+abstract contract EIP712Base {
+    bytes public constant EIP712_REVISION = bytes("1");
+    bytes32 internal constant EIP712_DOMAIN =
+        keccak256(
+            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
+        );
+
     // Map of address nonces (address => nonce)
     mapping(address => uint256) internal _nonces;
 
-    bytes32 private _______DEPRECATED_DOMAIN_SEPARATOR;
+    bytes32 internal _domainSeparator;
+    uint256 internal immutable _chainId;
 
     /**
      * @dev Constructor.
      */
-    constructor() EIP712("Aave Ethereum AAVE", "2") {}
-
-    /// @dev maintained for backwards compatibility. See EIP712 _EIP712Version
-    function EIP712_REVISION() external returns (bytes memory) {
-        return bytes(_EIP712Version());
+    constructor() {
+        _chainId = block.chainid;
     }
 
     /**
      * @notice Get the domain separator for the token
      * @dev Return cached value if chainId matches cache, otherwise recomputes separator
      * @return The domain separator of the token at current chain
      */
     function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
-        return _domainSeparatorV4();
+        if (block.chainid == _chainId) {
+            return _domainSeparator;
+        }
+        return _calculateDomainSeparator();
     }
 
     /**
      * @notice Returns the nonce value for address specified as parameter
@@ -43,8 +47,25 @@
         return _nonces[owner];
     }
 
     /**
+     * @notice Compute the current domain separator
+     * @return The domain separator for the token
+     */
+    function _calculateDomainSeparator() internal view returns (bytes32) {
+        return
+            keccak256(
+                abi.encode(
+                    EIP712_DOMAIN,
+                    keccak256(bytes(_EIP712BaseId())),
+                    keccak256(EIP712_REVISION),
+                    block.chainid,
+                    address(this)
+                )
+            );
+    }
+
+    /**
      * @notice Returns the user readable name of signing domain (e.g. token name)
      * @return The name of the signing domain
      */
     function _EIP712BaseId() internal view virtual returns (string memory);
