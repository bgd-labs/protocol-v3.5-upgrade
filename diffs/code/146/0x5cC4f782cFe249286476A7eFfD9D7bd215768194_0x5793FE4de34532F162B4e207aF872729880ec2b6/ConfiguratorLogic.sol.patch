===================================================================
--- src/contracts/protocol/libraries/logic/ConfiguratorLogic.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/libraries/logic/ConfiguratorLogic.sol
@@ -1,8 +1,9 @@
 // SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.10;
 
 import {IPool} from "../../../interfaces/IPool.sol";
+import {IPoolConfigurator} from "../../../interfaces/IPoolConfigurator.sol";
 import {IInitializableAToken} from "../../../interfaces/IInitializableAToken.sol";
 import {IInitializableDebtToken} from "../../../interfaces/IInitializableDebtToken.sol";
 import {InitializableImmutableAdminUpgradeabilityProxy} from "../../../misc/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol";
 import {IReserveInterestRateStrategy} from "../../../interfaces/IReserveInterestRateStrategy.sol";
@@ -19,27 +20,8 @@
  */
 library ConfiguratorLogic {
     using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
 
-    // See `IPoolConfigurator` for descriptions
-    event ReserveInitialized(
-        address indexed asset,
-        address indexed aToken,
-        address stableDebtToken,
-        address variableDebtToken,
-        address interestRateStrategyAddress
-    );
-    event ATokenUpgraded(
-        address indexed asset,
-        address indexed proxy,
-        address indexed implementation
-    );
-    event VariableDebtTokenUpgraded(
-        address indexed asset,
-        address indexed proxy,
-        address indexed implementation
-    );
-
     /**
      * @notice Initialize a reserve by creating and initializing aToken and variable debt token
      * @dev Emits the `ReserveInitialized` event
      * @param pool The Pool in which the reserve will be initialized
@@ -51,18 +33,16 @@
     ) external {
         // It is an assumption that the asset listed is non-malicious, and the external call doesn't create re-entrancies
         uint8 underlyingAssetDecimals = IERC20Detailed(input.underlyingAsset)
             .decimals();
-        require(underlyingAssetDecimals > 5, Errors.INVALID_DECIMALS);
+        require(underlyingAssetDecimals > 5, Errors.InvalidDecimals());
 
         address aTokenProxyAddress = _initTokenWithProxy(
             input.aTokenImpl,
             abi.encodeWithSelector(
                 IInitializableAToken.initialize.selector,
                 pool,
-                input.treasury,
                 input.underlyingAsset,
-                input.incentivesController,
                 underlyingAssetDecimals,
                 input.aTokenName,
                 input.aTokenSymbol,
                 input.params
@@ -74,9 +54,8 @@
             abi.encodeWithSelector(
                 IInitializableDebtToken.initialize.selector,
                 pool,
                 input.underlyingAsset,
-                input.incentivesController,
                 underlyingAssetDecimals,
                 input.variableDebtTokenName,
                 input.variableDebtTokenSymbol,
                 input.params
@@ -85,10 +64,9 @@
 
         pool.initReserve(
             input.underlyingAsset,
             aTokenProxyAddress,
-            variableDebtTokenProxyAddress,
-            input.interestRateStrategyAddress
+            variableDebtTokenProxyAddress
         );
 
         DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes
             .ReserveConfigurationMap(0);
@@ -97,24 +75,26 @@
 
         currentConfig.setActive(true);
         currentConfig.setPaused(false);
         currentConfig.setFrozen(false);
-        currentConfig.setVirtualAccActive(input.useVirtualBalance);
+        currentConfig.setVirtualAccActive();
 
         pool.setConfiguration(input.underlyingAsset, currentConfig);
 
-        IReserveInterestRateStrategy(input.interestRateStrategyAddress)
+        address interestRateStrategyAddress = pool
+            .RESERVE_INTEREST_RATE_STRATEGY();
+        IReserveInterestRateStrategy(interestRateStrategyAddress)
             .setInterestRateParams(
                 input.underlyingAsset,
                 input.interestRateData
             );
 
-        emit ReserveInitialized(
+        emit IPoolConfigurator.ReserveInitialized(
             input.underlyingAsset,
             aTokenProxyAddress,
             address(0),
             variableDebtTokenProxyAddress,
-            input.interestRateStrategyAddress
+            interestRateStrategyAddress
         );
     }
 
     /**
@@ -135,11 +115,9 @@
 
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableAToken.initialize.selector,
             cachedPool,
-            input.treasury,
             input.asset,
-            input.incentivesController,
             decimals,
             input.name,
             input.symbol,
             input.params
@@ -150,9 +128,13 @@
             input.implementation,
             encodedCall
         );
 
-        emit ATokenUpgraded(input.asset, aTokenAddress, input.implementation);
+        emit IPoolConfigurator.ATokenUpgraded(
+            input.asset,
+            aTokenAddress,
+            input.implementation
+        );
     }
 
     /**
      * @notice Updates the variable debt token implementation and initializes it
@@ -174,9 +156,8 @@
         bytes memory encodedCall = abi.encodeWithSelector(
             IInitializableDebtToken.initialize.selector,
             cachedPool,
             input.asset,
-            input.incentivesController,
             decimals,
             input.name,
             input.symbol,
             input.params
@@ -187,9 +168,9 @@
             input.implementation,
             encodedCall
         );
 
-        emit VariableDebtTokenUpgraded(
+        emit IPoolConfigurator.VariableDebtTokenUpgraded(
             input.asset,
             variableDebtTokenAddress,
             input.implementation
         );
