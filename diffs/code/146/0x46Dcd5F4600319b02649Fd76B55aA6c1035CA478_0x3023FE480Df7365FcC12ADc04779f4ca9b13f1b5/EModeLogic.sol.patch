===================================================================
--- src/contracts/protocol/libraries/logic/EModeLogic.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/libraries/logic/EModeLogic.sol
@@ -2,8 +2,9 @@
 pragma solidity ^0.8.10;
 
 import {GPv2SafeERC20} from "../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
 import {UserConfiguration} from "../configuration/UserConfiguration.sol";
 import {WadRayMath} from "../math/WadRayMath.sol";
 import {PercentageMath} from "../math/PercentageMath.sol";
 import {DataTypes} from "../types/DataTypes.sol";
@@ -22,11 +23,8 @@
     using UserConfiguration for DataTypes.UserConfigurationMap;
     using WadRayMath for uint256;
     using PercentageMath for uint256;
 
-    // See `IPool` for descriptions
-    event UserEModeSet(address indexed user, uint8 categoryId);
-
     /**
      * @notice Updates the user efficiency mode category
      * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD
      * @dev Emits the `UserEModeSet` event
@@ -34,38 +32,40 @@
      * @param reservesList The addresses of all the active reserves
      * @param eModeCategories The configuration of all the efficiency mode categories
      * @param usersEModeCategory The state of all users efficiency mode category
      * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets
-     * @param params The additional parameters needed to execute the setUserEMode function
+     * @param user The selected user
+     * @param oracle The address of the oracle
+     * @param categoryId The selected eMode categoryId
      */
     function executeSetUserEMode(
         mapping(address => DataTypes.ReserveData) storage reservesData,
         mapping(uint256 => address) storage reservesList,
         mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,
         mapping(address => uint8) storage usersEModeCategory,
         DataTypes.UserConfigurationMap storage userConfig,
-        DataTypes.ExecuteSetUserEModeParams memory params
+        address user,
+        address oracle,
+        uint8 categoryId
     ) external {
-        if (usersEModeCategory[msg.sender] == params.categoryId) return;
+        if (usersEModeCategory[user] == categoryId) return;
 
         ValidationLogic.validateSetUserEMode(
             eModeCategories,
             userConfig,
-            params.reservesCount,
-            params.categoryId
+            categoryId
         );
 
-        usersEModeCategory[msg.sender] = params.categoryId;
+        usersEModeCategory[user] = categoryId;
 
         ValidationLogic.validateHealthFactor(
             reservesData,
             reservesList,
             eModeCategories,
             userConfig,
-            msg.sender,
-            params.categoryId,
-            params.reservesCount,
-            params.oracle
+            user,
+            categoryId,
+            oracle
         );
-        emit UserEModeSet(msg.sender, params.categoryId);
+        emit IPool.UserEModeSet(user, categoryId);
     }
 }
