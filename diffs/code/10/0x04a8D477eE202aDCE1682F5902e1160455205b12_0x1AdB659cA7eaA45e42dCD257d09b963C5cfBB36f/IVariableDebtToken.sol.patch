===================================================================
--- lib/aave-v3-core/contracts/interfaces/IVariableDebtToken.sol
+++ lib/aave-v3-origin-private/src/contracts/interfaces/IVariableDebtToken.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IScaledBalanceToken} from "./IScaledBalanceToken.sol";
 import {IInitializableDebtToken} from "./IInitializableDebtToken.sol";
@@ -16,32 +16,32 @@
      * of credit delegate, or same as `onBehalfOf` otherwise
      * @param onBehalfOf The address receiving the debt tokens
      * @param amount The amount of debt being minted
      * @param index The variable debt index of the reserve
-     * @return True if the previous balance of the user is 0, false otherwise
      * @return The scaled total debt of the reserve
      */
     function mint(
         address user,
         address onBehalfOf,
         uint256 amount,
         uint256 index
-    ) external returns (bool, uint256);
+    ) external returns (uint256);
 
     /**
      * @notice Burns user variable debt
      * @dev In some instances, a burn transaction will emit a mint event
      * if the amount to burn is less than the interest that the user accrued
      * @param from The address from which the debt will be burned
      * @param amount The amount getting burned
      * @param index The variable debt index of the reserve
+     * @return True if the new balance is zero
      * @return The scaled total debt of the reserve
      */
     function burn(
         address from,
         uint256 amount,
         uint256 index
-    ) external returns (uint256);
+    ) external returns (bool, uint256);
 
     /**
      * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)
      * @return The address of the underlying asset
