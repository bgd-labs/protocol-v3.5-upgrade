===================================================================
--- lib/aave-v3-core/contracts/protocol/tokenization/base/DebtTokenBase.sol
+++ lib/aave-v3-origin-private/src/contracts/protocol/tokenization/base/DebtTokenBase.sol
@@ -1,17 +1,19 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
+import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
+
 import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
-import {VersionedInitializable} from "../../libraries/aave-upgradeability/VersionedInitializable.sol";
+import {VersionedInitializable} from "../../../misc/aave-upgradeability/VersionedInitializable.sol";
 import {ICreditDelegationToken} from "../../../interfaces/ICreditDelegationToken.sol";
 import {EIP712Base} from "./EIP712Base.sol";
 
 /**
  * @title DebtTokenBase
  * @author Aave
- * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken
+ * @notice Base contract for different types of debt tokens, like VariableDebtToken
  */
 abstract contract DebtTokenBase is
     VersionedInitializable,
     EIP712Base,
@@ -53,11 +55,11 @@
         uint8 v,
         bytes32 r,
         bytes32 s
     ) external {
-        require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
+        require(delegator != address(0), Errors.ZeroAddressNotValid());
         //solium-disable-next-line
-        require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
+        require(block.timestamp <= deadline, Errors.InvalidExpiration());
         uint256 currentValidNonce = _nonces[delegator];
         bytes32 digest = keccak256(
             abi.encodePacked(
                 "\x19\x01",
@@ -73,10 +75,10 @@
                 )
             )
         );
         require(
-            delegator == ecrecover(digest, v, r, s),
-            Errors.INVALID_SIGNATURE
+            delegator == ECDSA.recover(digest, v, r, s),
+            Errors.InvalidSignature()
         );
         _nonces[delegator] = currentValidNonce + 1;
         _approveDelegation(delegator, delegatee, value);
     }
