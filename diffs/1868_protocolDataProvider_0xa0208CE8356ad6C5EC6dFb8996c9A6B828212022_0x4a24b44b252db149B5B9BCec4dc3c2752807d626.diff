diff --git a/tmp/1868_0xa0208CE8356ad6C5EC6dFb8996c9A6B828212022_flat/Contract.sol b/tmp/1868_0x4a24b44b252db149B5B9BCec4dc3c2752807d626_flat/Contract.sol
index b14c6a6..9f36462 100644
--- a/tmp/1868_0xa0208CE8356ad6C5EC6dFb8996c9A6B828212022_flat/Contract.sol
+++ b/tmp/1868_0x4a24b44b252db149B5B9BCec4dc3c2752807d626_flat/Contract.sol
@@ -10,6 +10,7 @@ import {IPoolAddressesProvider} from "../interfaces/IPoolAddressesProvider.sol";
 import {IVariableDebtToken} from "../interfaces/IVariableDebtToken.sol";
 import {IPool} from "../interfaces/IPool.sol";
 import {IPoolDataProvider} from "../interfaces/IPoolDataProvider.sol";
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
 
 /**
  * @title AaveProtocolDataProvider
@@ -27,18 +28,28 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
   /// @inheritdoc IPoolDataProvider
   IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;
 
+  /// @inheritdoc IPoolDataProvider
+  IPool public immutable POOL;
+
   /**
    * @notice Constructor
    * @param addressesProvider The address of the PoolAddressesProvider contract
    */
   constructor(IPoolAddressesProvider addressesProvider) {
     ADDRESSES_PROVIDER = addressesProvider;
+
+    address pool = addressesProvider.getPool();
+    require(pool != address(0), Errors.ZeroAddressNotValid());
+
+    // @dev The pool can be immutable, because in practice it never changes after initialization.
+    // The reason why it is not an actual `immutable` on `ADDRESSES_PROVIDER` is that there is a cross reference between ADDRESSES_PROVIDER <> Pool,
+    // which in turn makes is complicated to have it `immutable` on both contracts.
+    POOL = IPool(pool);
   }
 
   /// @inheritdoc IPoolDataProvider
   function getAllReservesTokens() external view override returns (TokenData[] memory) {
-    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
-    address[] memory reserves = pool.getReservesList();
+    address[] memory reserves = POOL.getReservesList();
     TokenData[] memory reservesTokens = new TokenData[](reserves.length);
     for (uint256 i = 0; i < reserves.length; i++) {
       if (reserves[i] == MKR) {
@@ -56,11 +67,10 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
 
   /// @inheritdoc IPoolDataProvider
   function getAllATokens() external view override returns (TokenData[] memory) {
-    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
-    address[] memory reserves = pool.getReservesList();
+    address[] memory reserves = POOL.getReservesList();
     TokenData[] memory aTokens = new TokenData[](reserves.length);
     for (uint256 i = 0; i < reserves.length; i++) {
-      address aTokenAddress = pool.getReserveAToken(reserves[i]);
+      address aTokenAddress = POOL.getReserveAToken(reserves[i]);
       aTokens[i] = TokenData({symbol: IERC20Detailed(aTokenAddress).symbol(), tokenAddress: aTokenAddress});
     }
     return aTokens;
@@ -84,7 +94,7 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
       bool isFrozen
     )
   {
-    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset);
+    DataTypes.ReserveConfigurationMap memory configuration = POOL.getConfiguration(asset);
 
     (ltv, liquidationThreshold, liquidationBonus, decimals, reserveFactor) = configuration.getParams();
 
@@ -98,32 +108,32 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
 
   /// @inheritdoc IPoolDataProvider
   function getReserveCaps(address asset) external view override returns (uint256 borrowCap, uint256 supplyCap) {
-    (borrowCap, supplyCap) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getCaps();
+    (borrowCap, supplyCap) = POOL.getConfiguration(asset).getCaps();
   }
 
   /// @inheritdoc IPoolDataProvider
   function getPaused(address asset) external view override returns (bool isPaused) {
-    (,,, isPaused) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getFlags();
+    (,,, isPaused) = POOL.getConfiguration(asset).getFlags();
   }
 
   /// @inheritdoc IPoolDataProvider
   function getSiloedBorrowing(address asset) external view override returns (bool) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getSiloedBorrowing();
+    return POOL.getConfiguration(asset).getSiloedBorrowing();
   }
 
   /// @inheritdoc IPoolDataProvider
   function getLiquidationProtocolFee(address asset) external view override returns (uint256) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getLiquidationProtocolFee();
+    return POOL.getConfiguration(asset).getLiquidationProtocolFee();
   }
 
   /// @inheritdoc IPoolDataProvider
-  function getUnbackedMintCap(address asset) external view override returns (uint256) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getUnbackedMintCap();
+  function getUnbackedMintCap(address) external pure override returns (uint256) {
+    return 0;
   }
 
   /// @inheritdoc IPoolDataProvider
   function getDebtCeiling(address asset) external view override returns (uint256) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getDebtCeiling();
+    return POOL.getConfiguration(asset).getDebtCeiling();
   }
 
   /// @inheritdoc IPoolDataProvider
@@ -137,7 +147,7 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
     view
     override
     returns (
-      uint256 unbacked,
+      uint256, /* unbacked */
       uint256 accruedToTreasuryScaled,
       uint256 totalAToken,
       uint256,
@@ -151,11 +161,11 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
       uint40 lastUpdateTimestamp
     )
   {
-    DataTypes.ReserveDataLegacy memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(asset);
+    DataTypes.ReserveDataLegacy memory reserve = POOL.getReserveData(asset);
 
     // @notice all stable debt related parameters deprecated in v3.2.0
     return (
-      reserve.unbacked,
+      0, // @dev unbacked is deprecated from v3.4.0, always zero, never used
       reserve.accruedToTreasury,
       IERC20Detailed(reserve.aTokenAddress).totalSupply(),
       0,
@@ -172,13 +182,13 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
 
   /// @inheritdoc IPoolDataProvider
   function getATokenTotalSupply(address asset) external view override returns (uint256) {
-    address aTokenAddress = IPool(ADDRESSES_PROVIDER.getPool()).getReserveAToken(asset);
+    address aTokenAddress = POOL.getReserveAToken(asset);
     return IERC20Detailed(aTokenAddress).totalSupply();
   }
 
   /// @inheritdoc IPoolDataProvider
   function getTotalDebt(address asset) external view override returns (uint256) {
-    address variableDebtTokenAddress = IPool(ADDRESSES_PROVIDER.getPool()).getReserveVariableDebtToken(asset);
+    address variableDebtTokenAddress = POOL.getReserveVariableDebtToken(asset);
     return IERC20Detailed(variableDebtTokenAddress).totalSupply();
   }
 
@@ -199,9 +209,9 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
       bool usageAsCollateralEnabled
     )
   {
-    DataTypes.ReserveDataLegacy memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(asset);
+    DataTypes.ReserveDataLegacy memory reserve = POOL.getReserveData(asset);
 
-    DataTypes.UserConfigurationMap memory userConfig = IPool(ADDRESSES_PROVIDER.getPool()).getUserConfiguration(user);
+    DataTypes.UserConfigurationMap memory userConfig = POOL.getUserConfiguration(user);
 
     currentATokenBalance = IERC20Detailed(reserve.aTokenAddress).balanceOf(user);
     currentVariableDebt = IERC20Detailed(reserve.variableDebtTokenAddress).balanceOf(user);
@@ -221,40 +231,34 @@ contract AaveProtocolDataProvider is IPoolDataProvider {
     override
     returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress)
   {
-    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
-
     // @notice all stable debt related parameters deprecated in v3.2.0
-    return (pool.getReserveAToken(asset), address(0), pool.getReserveVariableDebtToken(asset));
+    return (POOL.getReserveAToken(asset), address(0), POOL.getReserveVariableDebtToken(asset));
   }
 
   /// @inheritdoc IPoolDataProvider
-  function getInterestRateStrategyAddress(address asset) external view override returns (address irStrategyAddress) {
-    DataTypes.ReserveDataLegacy memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(asset);
-
-    return (reserve.interestRateStrategyAddress);
+  function getInterestRateStrategyAddress(address) external view override returns (address irStrategyAddress) {
+    return POOL.RESERVE_INTEREST_RATE_STRATEGY();
   }
 
   /// @inheritdoc IPoolDataProvider
   function getFlashLoanEnabled(address asset) external view override returns (bool) {
-    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset);
+    DataTypes.ReserveConfigurationMap memory configuration = POOL.getConfiguration(asset);
 
     return configuration.getFlashLoanEnabled();
   }
 
   /// @inheritdoc IPoolDataProvider
-  function getIsVirtualAccActive(address asset) external view override returns (bool) {
-    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset);
-
-    return configuration.getIsVirtualAccActive();
+  function getIsVirtualAccActive(address) external pure override returns (bool) {
+    return true;
   }
 
   /// @inheritdoc IPoolDataProvider
   function getVirtualUnderlyingBalance(address asset) external view override returns (uint256) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getVirtualUnderlyingBalance(asset);
+    return POOL.getVirtualUnderlyingBalance(asset);
   }
 
   /// @inheritdoc IPoolDataProvider
   function getReserveDeficit(address asset) external view override returns (uint256) {
-    return IPool(ADDRESSES_PROVIDER.getPool()).getReserveDeficit(asset);
+    return POOL.getReserveDeficit(asset);
   }
 }
