diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/Context.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/Context.sol
index 445ee64..93f354b 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/Context.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/Context.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.10;
+pragma solidity ^0.8.10;
 
 /*
  * @dev Provides information about the current execution context, including the
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/DataTypes.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DataTypes.sol
index 93b7e31..3debcd4 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/DataTypes.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DataTypes.sol
@@ -1,8 +1,12 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 library DataTypes {
-  struct ReserveData {
+  /**
+   * This exists specifically to maintain the `getReserveData()` interface, since the new, internal
+   * `ReserveData` struct includes the reserve's `virtualUnderlyingBalance`.
+   */
+  struct ReserveDataLegacy {
     //stores the reserve configuration
     ReserveConfigurationMap configuration;
     //the liquidity index. Expressed in ray
@@ -13,7 +17,7 @@ library DataTypes {
     uint128 variableBorrowIndex;
     //the current variable borrow rate. Expressed in ray
     uint128 currentVariableBorrowRate;
-    //the current stable borrow rate. Expressed in ray
+    // DEPRECATED on v3.2.0
     uint128 currentStableBorrowRate;
     //timestamp of last update
     uint40 lastUpdateTimestamp;
@@ -21,20 +25,59 @@ library DataTypes {
     uint16 id;
     //aToken address
     address aTokenAddress;
-    //stableDebtToken address
+    // DEPRECATED on v3.2.0
     address stableDebtTokenAddress;
     //variableDebtToken address
     address variableDebtTokenAddress;
-    //address of the interest rate strategy
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
     address interestRateStrategyAddress;
     //the current treasury balance, scaled
     uint128 accruedToTreasury;
-    //the outstanding unbacked aTokens minted through the bridging feature
+    // DEPRECATED on v3.4.0
     uint128 unbacked;
     //the outstanding debt borrowed against this asset in isolation mode
     uint128 isolationModeTotalDebt;
   }
 
+  struct ReserveData {
+    //stores the reserve configuration
+    ReserveConfigurationMap configuration;
+    //the liquidity index. Expressed in ray
+    uint128 liquidityIndex;
+    //the current supply rate. Expressed in ray
+    uint128 currentLiquidityRate;
+    //variable borrow index. Expressed in ray
+    uint128 variableBorrowIndex;
+    //the current variable borrow rate. Expressed in ray
+    uint128 currentVariableBorrowRate;
+    /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+    // the current accumulate deficit in underlying tokens
+    uint128 deficit;
+    //timestamp of last update
+    uint40 lastUpdateTimestamp;
+    //the id of the reserve. Represents the position in the list of the active reserves
+    uint16 id;
+    //timestamp until when liquidations are not allowed on the reserve, if set to past liquidations will be allowed
+    uint40 liquidationGracePeriodUntil;
+    //aToken address
+    address aTokenAddress;
+    // DEPRECATED on v3.2.0
+    address __deprecatedStableDebtTokenAddress;
+    //variableDebtToken address
+    address variableDebtTokenAddress;
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
+    address __deprecatedInterestRateStrategyAddress;
+    //the current treasury balance, scaled
+    uint128 accruedToTreasury;
+    // In aave 3.3.0 this storage slot contained the `unbacked`
+    uint128 virtualUnderlyingBalance;
+    //the outstanding debt borrowed against this asset in isolation mode
+    uint128 isolationModeTotalDebt;
+    //the amount of underlying accounted for by the protocol
+    // DEPRECATED on v3.4.0. Moved into the same slot as accruedToTreasury for optimized storage access.
+    uint128 __deprecatedVirtualUnderlyingBalance;
+  }
+
   struct ReserveConfigurationMap {
     //bit 0-15: LTV
     //bit 16-31: Liq. threshold
@@ -43,18 +86,20 @@ library DataTypes {
     //bit 56: reserve is active
     //bit 57: reserve is frozen
     //bit 58: borrowing is enabled
-    //bit 59: stable rate borrowing enabled
+    //bit 59: DEPRECATED: stable rate borrowing enabled
     //bit 60: asset is paused
     //bit 61: borrowing in isolation mode is enabled
-    //bit 62-63: reserved
+    //bit 62: siloed borrowing enabled
+    //bit 63: flashloaning enabled
     //bit 64-79: reserve factor
-    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
-    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
-    //bit 152-167 liquidation protocol fee
-    //bit 168-175 eMode category
-    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
-    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-    //bit 252-255 unused
+    //bit 80-115: borrow cap in whole tokens, borrowCap == 0 => no cap
+    //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
+    //bit 152-167: liquidation protocol fee
+    //bit 168-175: DEPRECATED: eMode category
+    //bit 176-211: DEPRECATED: unbacked mint cap
+    //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
+    //bit 252: DEPRECATED: virtual accounting is enabled for the reserve
+    //bit 253-255 unused
     uint256 data;
   }
 
@@ -67,30 +112,49 @@ library DataTypes {
     uint256 data;
   }
 
-  struct EModeCategory {
+  // DEPRECATED: kept for backwards compatibility, might be removed in a future version
+  struct EModeCategoryLegacy {
     // each eMode category has a custom ltv and liquidation threshold
     uint16 ltv;
     uint16 liquidationThreshold;
     uint16 liquidationBonus;
-    // each eMode category may or may not have a custom oracle to override the individual assets price oracles
+    // DEPRECATED
     address priceSource;
     string label;
   }
 
+  struct CollateralConfig {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+  }
+
+  struct EModeCategoryBaseConfiguration {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    string label;
+  }
+
+  struct EModeCategory {
+    // each eMode category has a custom ltv and liquidation threshold
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    uint128 collateralBitmap;
+    string label;
+    uint128 borrowableBitmap;
+  }
+
   enum InterestRateMode {
     NONE,
-    STABLE,
+    __DEPRECATED,
     VARIABLE
   }
 
   struct ReserveCache {
     uint256 currScaledVariableDebt;
     uint256 nextScaledVariableDebt;
-    uint256 currPrincipalStableDebt;
-    uint256 currAvgStableBorrowRate;
-    uint256 currTotalStableDebt;
-    uint256 nextAvgStableBorrowRate;
-    uint256 nextTotalStableDebt;
     uint256 currLiquidityIndex;
     uint256 nextLiquidityIndex;
     uint256 currVariableBorrowIndex;
@@ -100,26 +164,27 @@ library DataTypes {
     uint256 reserveFactor;
     ReserveConfigurationMap reserveConfiguration;
     address aTokenAddress;
-    address stableDebtTokenAddress;
     address variableDebtTokenAddress;
     uint40 reserveLastUpdateTimestamp;
-    uint40 stableDebtLastUpdateTimestamp;
   }
 
   struct ExecuteLiquidationCallParams {
-    uint256 reservesCount;
+    address liquidator;
     uint256 debtToCover;
     address collateralAsset;
     address debtAsset;
-    address user;
+    address borrower;
     bool receiveAToken;
     address priceOracle;
-    uint8 userEModeCategory;
+    uint8 borrowerEModeCategory;
     address priceOracleSentinel;
+    address interestRateStrategyAddress;
   }
 
   struct ExecuteSupplyParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address onBehalfOf;
     uint16 referralCode;
@@ -129,12 +194,11 @@ library DataTypes {
     address asset;
     address user;
     address onBehalfOf;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     uint16 referralCode;
     bool releaseUnderlying;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
@@ -142,6 +206,8 @@ library DataTypes {
 
   struct ExecuteRepayParams {
     address asset;
+    address user;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     address onBehalfOf;
@@ -149,18 +215,20 @@ library DataTypes {
   }
 
   struct ExecuteWithdrawParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address to;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
   }
 
-  struct ExecuteSetUserEModeParams {
-    uint256 reservesCount;
-    address oracle;
-    uint8 categoryId;
+  struct ExecuteEliminateDeficitParams {
+    address user;
+    address asset;
+    address interestRateStrategyAddress;
+    uint256 amount;
   }
 
   struct FinalizeTransferParams {
@@ -170,50 +238,50 @@ library DataTypes {
     uint256 amount;
     uint256 balanceFromBefore;
     uint256 balanceToBefore;
-    uint256 reservesCount;
     address oracle;
     uint8 fromEModeCategory;
   }
 
   struct FlashloanParams {
+    address user;
     address receiverAddress;
     address[] assets;
     uint256[] amounts;
     uint256[] interestRateModes;
+    address interestRateStrategyAddress;
     address onBehalfOf;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
+    uint256 flashLoanPremium;
     address addressesProvider;
+    address pool;
     uint8 userEModeCategory;
     bool isAuthorizedFlashBorrower;
   }
 
   struct FlashloanSimpleParams {
+    address user;
     address receiverAddress;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
+    uint256 flashLoanPremium;
   }
 
   struct FlashLoanRepaymentParams {
+    address user;
     uint256 amount;
     uint256 totalPremium;
-    uint256 flashLoanPremiumToProtocol;
     address asset;
+    address interestRateStrategyAddress;
     address receiverAddress;
     uint16 referralCode;
   }
 
   struct CalculateUserAccountDataParams {
     UserConfigurationMap userConfig;
-    uint256 reservesCount;
     address user;
     address oracle;
     uint8 userEModeCategory;
@@ -226,14 +294,9 @@ library DataTypes {
     address userAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
-    uint256 maxStableLoanPercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
-    bool isolationModeActive;
-    address isolationModeCollateralAddress;
-    uint256 isolationModeDebtCeiling;
   }
 
   struct ValidateLiquidationCallParams {
@@ -241,26 +304,26 @@ library DataTypes {
     uint256 totalDebt;
     uint256 healthFactor;
     address priceOracleSentinel;
+    address borrower;
+    address liquidator;
   }
 
   struct CalculateInterestRatesParams {
     uint256 unbacked;
     uint256 liquidityAdded;
     uint256 liquidityTaken;
-    uint256 totalStableDebt;
-    uint256 totalVariableDebt;
-    uint256 averageStableBorrowRate;
+    uint256 totalDebt;
     uint256 reserveFactor;
     address reserve;
-    address aToken;
+    // @notice DEPRECATED in 3.4, but kept for backwards compatibility
+    bool usingVirtualBalance;
+    uint256 virtualUnderlyingBalance;
   }
 
   struct InitReserveParams {
     address asset;
     address aTokenAddress;
-    address stableDebtAddress;
     address variableDebtAddress;
-    address interestRateStrategyAddress;
     uint16 reservesCount;
     uint16 maxNumberReserves;
   }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/DebtTokenBase.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DebtTokenBase.sol
index 9881349..ab9ee55 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/DebtTokenBase.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DebtTokenBase.sol
@@ -1,16 +1,18 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
+
+import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
 
 import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
-import {VersionedInitializable} from "../../libraries/aave-upgradeability/VersionedInitializable.sol";
+import {VersionedInitializable} from "../../../misc/aave-upgradeability/VersionedInitializable.sol";
 import {ICreditDelegationToken} from "../../../interfaces/ICreditDelegationToken.sol";
 import {EIP712Base} from "./EIP712Base.sol";
 
 /**
  * @title DebtTokenBase
  * @author Aave
- * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken
+ * @notice Base contract for different types of debt tokens, like VariableDebtToken
  */
 abstract contract DebtTokenBase is VersionedInitializable, EIP712Base, Context, ICreditDelegationToken {
   // Map of borrow allowances (delegator => delegatee => borrowAllowanceAmount)
@@ -44,9 +46,9 @@ abstract contract DebtTokenBase is VersionedInitializable, EIP712Base, Context,
     bytes32 r,
     bytes32 s
   ) external {
-    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
+    require(delegator != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
     uint256 currentValidNonce = _nonces[delegator];
     bytes32 digest = keccak256(
       abi.encodePacked(
@@ -55,7 +57,7 @@ abstract contract DebtTokenBase is VersionedInitializable, EIP712Base, Context,
         keccak256(abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline))
       )
     );
-    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);
+    require(delegator == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
     _nonces[delegator] = currentValidNonce + 1;
     _approveDelegation(delegator, delegatee, value);
   }
diff --git a/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DelegationMode.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DelegationMode.sol
new file mode 100644
index 0000000..8d59013
--- /dev/null
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/DelegationMode.sol
@@ -0,0 +1,9 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+enum DelegationMode {
+  NO_DELEGATION,
+  VOTING_DELEGATED,
+  PROPOSITION_DELEGATED,
+  FULL_POWER_DELEGATED
+}
diff --git a/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ECDSA.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ECDSA.sol
new file mode 100644
index 0000000..ab51116
--- /dev/null
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ECDSA.sol
@@ -0,0 +1,180 @@
+// SPDX-License-Identifier: MIT
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)
+
+pragma solidity ^0.8.20;
+
+/**
+ * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
+ *
+ * These functions can be used to verify that a message was signed by the holder
+ * of the private keys of a given address.
+ */
+library ECDSA {
+  enum RecoverError {
+    NoError,
+    InvalidSignature,
+    InvalidSignatureLength,
+    InvalidSignatureS
+  }
+
+  /**
+   * @dev The signature derives the `address(0)`.
+   */
+  error ECDSAInvalidSignature();
+
+  /**
+   * @dev The signature has an invalid length.
+   */
+  error ECDSAInvalidSignatureLength(uint256 length);
+
+  /**
+   * @dev The signature has an S value that is in the upper half order.
+   */
+  error ECDSAInvalidSignatureS(bytes32 s);
+
+  /**
+   * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
+   * return address(0) without also returning an error description. Errors are documented using an enum (error type)
+   * and a bytes32 providing additional information about the error.
+   *
+   * If no error is returned, then the address can be used for verification purposes.
+   *
+   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
+   * this function rejects them by requiring the `s` value to be in the lower
+   * half order, and the `v` value to be either 27 or 28.
+   *
+   * IMPORTANT: `hash` _must_ be the result of a hash operation for the
+   * verification to be secure: it is possible to craft signatures that
+   * recover to arbitrary addresses for non-hashed data. A safe way to ensure
+   * this is by receiving a hash of the original message (which may otherwise
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
+   *
+   * Documentation for signature generation:
+   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
+   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
+   */
+  function tryRecover(bytes32 hash, bytes memory signature)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    if (signature.length == 65) {
+      bytes32 r;
+      bytes32 s;
+      uint8 v;
+      // ecrecover takes the signature parameters, and the only way to get them
+      // currently is to use assembly.
+      assembly ("memory-safe") {
+        r := mload(add(signature, 0x20))
+        s := mload(add(signature, 0x40))
+        v := byte(0, mload(add(signature, 0x60)))
+      }
+      return tryRecover(hash, v, r, s);
+    } else {
+      return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
+    }
+  }
+
+  /**
+   * @dev Returns the address that signed a hashed message (`hash`) with
+   * `signature`. This address can then be used for verification purposes.
+   *
+   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
+   * this function rejects them by requiring the `s` value to be in the lower
+   * half order, and the `v` value to be either 27 or 28.
+   *
+   * IMPORTANT: `hash` _must_ be the result of a hash operation for the
+   * verification to be secure: it is possible to craft signatures that
+   * recover to arbitrary addresses for non-hashed data. A safe way to ensure
+   * this is by receiving a hash of the original message (which may otherwise
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
+   */
+  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
+   *
+   * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]
+   */
+  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    unchecked {
+      bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
+      // We do not check for an overflow here since the shift operation results in 0 or 1.
+      uint8 v = uint8((uint256(vs) >> 255) + 27);
+      return tryRecover(hash, v, r, s);
+    }
+  }
+
+  /**
+   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
+   */
+  function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
+   * `r` and `s` signature fields separately.
+   */
+  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
+    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
+    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
+    // signatures from current libraries generate a unique signature with an s-value in the lower half order.
+    //
+    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
+    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
+    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
+    // these malleable signatures as well.
+    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
+      return (address(0), RecoverError.InvalidSignatureS, s);
+    }
+
+    // If the signature is valid (and not malleable), return the signer address
+    address signer = ecrecover(hash, v, r, s);
+    if (signer == address(0)) {
+      return (address(0), RecoverError.InvalidSignature, bytes32(0));
+    }
+
+    return (signer, RecoverError.NoError, bytes32(0));
+  }
+
+  /**
+   * @dev Overload of {ECDSA-recover} that receives the `v`,
+   * `r` and `s` signature fields separately.
+   */
+  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
+   */
+  function _throwError(RecoverError error, bytes32 errorArg) private pure {
+    if (error == RecoverError.NoError) {
+      return; // no error: do nothing
+    } else if (error == RecoverError.InvalidSignature) {
+      revert ECDSAInvalidSignature();
+    } else if (error == RecoverError.InvalidSignatureLength) {
+      revert ECDSAInvalidSignatureLength(uint256(errorArg));
+    } else if (error == RecoverError.InvalidSignatureS) {
+      revert ECDSAInvalidSignatureS(errorArg);
+    }
+  }
+}
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/EIP712Base.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/EIP712Base.sol
index eacc1c9..be5c539 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/EIP712Base.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/EIP712Base.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 /**
  * @title EIP712Base
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/Errors.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/Errors.sol
index 4c34c1e..6c493d8 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/Errors.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/Errors.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
@@ -7,94 +7,93 @@ pragma solidity ^0.8.0;
  * @notice Defines the error messages emitted by the different contracts of the Aave protocol
  */
 library Errors {
-  string public constant CALLER_NOT_POOL_ADMIN = "1"; // 'The caller of the function is not a pool admin'
-  string public constant CALLER_NOT_EMERGENCY_ADMIN = "2"; // 'The caller of the function is not an emergency admin'
-  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = "3"; // 'The caller of the function is not a pool or emergency admin'
-  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = "4"; // 'The caller of the function is not a risk or pool admin'
-  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = "5"; // 'The caller of the function is not an asset listing or pool admin'
-  string public constant CALLER_NOT_BRIDGE = "6"; // 'The caller of the function is not a bridge'
-  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = "7"; // 'Pool addresses provider is not registered'
-  string public constant INVALID_ADDRESSES_PROVIDER_ID = "8"; // 'Invalid id for the pool addresses provider'
-  string public constant NOT_CONTRACT = "9"; // 'Address is not a contract'
-  string public constant CALLER_NOT_POOL_CONFIGURATOR = "10"; // 'The caller of the function is not the pool configurator'
-  string public constant CALLER_NOT_ATOKEN = "11"; // 'The caller of the function is not an AToken'
-  string public constant INVALID_ADDRESSES_PROVIDER = "12"; // 'The address of the pool addresses provider is invalid'
-  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = "13"; // 'Invalid return value of the flashloan executor function'
-  string public constant RESERVE_ALREADY_ADDED = "14"; // 'Reserve has already been added to reserve list'
-  string public constant NO_MORE_RESERVES_ALLOWED = "15"; // 'Maximum amount of reserves in the pool reached'
-  string public constant EMODE_CATEGORY_RESERVED = "16"; // 'Zero eMode category is reserved for volatile heterogeneous assets'
-  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = "17"; // 'Invalid eMode category assignment to asset'
-  string public constant RESERVE_LIQUIDITY_NOT_ZERO = "18"; // 'The liquidity of the reserve needs to be 0'
-  string public constant FLASHLOAN_PREMIUM_INVALID = "19"; // 'Invalid flashloan premium'
-  string public constant INVALID_RESERVE_PARAMS = "20"; // 'Invalid risk parameters for the reserve'
-  string public constant INVALID_EMODE_CATEGORY_PARAMS = "21"; // 'Invalid risk parameters for the eMode category'
-  string public constant BRIDGE_PROTOCOL_FEE_INVALID = "22"; // 'Invalid bridge protocol fee'
-  string public constant CALLER_MUST_BE_POOL = "23"; // 'The caller of this function must be a pool'
-  string public constant INVALID_MINT_AMOUNT = "24"; // 'Invalid amount to mint'
-  string public constant INVALID_BURN_AMOUNT = "25"; // 'Invalid amount to burn'
-  string public constant INVALID_AMOUNT = "26"; // 'Amount must be greater than 0'
-  string public constant RESERVE_INACTIVE = "27"; // 'Action requires an active reserve'
-  string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
-  string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
-  string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-  string public constant STABLE_BORROWING_NOT_ENABLED = "31"; // 'Stable borrowing is not enabled'
-  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
-  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
-  string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
-  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = "35"; // 'Health factor is lesser than the liquidation threshold'
-  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
-  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = "38"; // 'The requested amount is greater than the max loan size in stable rate mode'
-  string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
-  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-  string public constant NO_OUTSTANDING_STABLE_DEBT = "41"; // 'User does not have outstanding stable rate debt on this reserve'
-  string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
-  string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
-  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
-  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = "45"; // 'Health factor is not below the threshold'
-  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = "46"; // 'The collateral chosen cannot be liquidated'
-  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = "47"; // 'User did not borrow the specified currency'
-  string public constant INCONSISTENT_FLASHLOAN_PARAMS = "49"; // 'Inconsistent flashloan parameters'
-  string public constant BORROW_CAP_EXCEEDED = "50"; // 'Borrow cap is exceeded'
-  string public constant SUPPLY_CAP_EXCEEDED = "51"; // 'Supply cap is exceeded'
-  string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
-  string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
-  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-  string public constant STABLE_DEBT_NOT_ZERO = "55"; // 'Stable debt supply is not zero'
-  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
-  string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
-  string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
-  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = "59"; // 'Price oracle sentinel validation failed'
-  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = "60"; // 'Asset is not borrowable in isolation mode'
-  string public constant RESERVE_ALREADY_INITIALIZED = "61"; // 'Reserve has already been initialized'
-  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = "62"; // 'User is in isolation mode or ltv is zero'
-  string public constant INVALID_LTV = "63"; // 'Invalid ltv parameter for the reserve'
-  string public constant INVALID_LIQ_THRESHOLD = "64"; // 'Invalid liquidity threshold parameter for the reserve'
-  string public constant INVALID_LIQ_BONUS = "65"; // 'Invalid liquidity bonus parameter for the reserve'
-  string public constant INVALID_DECIMALS = "66"; // 'Invalid decimals parameter of the underlying asset of the reserve'
-  string public constant INVALID_RESERVE_FACTOR = "67"; // 'Invalid reserve factor parameter for the reserve'
-  string public constant INVALID_BORROW_CAP = "68"; // 'Invalid borrow cap for the reserve'
-  string public constant INVALID_SUPPLY_CAP = "69"; // 'Invalid supply cap for the reserve'
-  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = "70"; // 'Invalid liquidation protocol fee for the reserve'
-  string public constant INVALID_EMODE_CATEGORY = "71"; // 'Invalid eMode category for the reserve'
-  string public constant INVALID_UNBACKED_MINT_CAP = "72"; // 'Invalid unbacked mint cap for the reserve'
-  string public constant INVALID_DEBT_CEILING = "73"; // 'Invalid debt ceiling for the reserve
-  string public constant INVALID_RESERVE_INDEX = "74"; // 'Invalid reserve index'
-  string public constant ACL_ADMIN_CANNOT_BE_ZERO = "75"; // 'ACL admin cannot be set to the zero address'
-  string public constant INCONSISTENT_PARAMS_LENGTH = "76"; // 'Array parameters that should be equal length are not'
-  string public constant ZERO_ADDRESS_NOT_VALID = "77"; // 'Zero address not valid'
-  string public constant INVALID_EXPIRATION = "78"; // 'Invalid expiration'
-  string public constant INVALID_SIGNATURE = "79"; // 'Invalid signature'
-  string public constant OPERATION_NOT_SUPPORTED = "80"; // 'Operation not supported'
-  string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
-  string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
-  string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = "84"; // 'Invalid optimal stable to total debt ratio'
-  string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
-  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
-  string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-  string public constant STABLE_BORROWING_ENABLED = "88"; // 'Stable borrowing is enabled'
-  string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
-  string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
-  string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
+  error CallerNotPoolAdmin(); // 'The caller of the function is not a pool admin'
+  error CallerNotPoolOrEmergencyAdmin(); // 'The caller of the function is not a pool or emergency admin'
+  error CallerNotRiskOrPoolAdmin(); // 'The caller of the function is not a risk or pool admin'
+  error CallerNotAssetListingOrPoolAdmin(); // 'The caller of the function is not an asset listing or pool admin'
+  error AddressesProviderNotRegistered(); // 'Pool addresses provider is not registered'
+  error InvalidAddressesProviderId(); // 'Invalid id for the pool addresses provider'
+  error NotContract(); // 'Address is not a contract'
+  error CallerNotPoolConfigurator(); // 'The caller of the function is not the pool configurator'
+  error CallerNotAToken(); // 'The caller of the function is not an AToken'
+  error InvalidAddressesProvider(); // 'The address of the pool addresses provider is invalid'
+  error InvalidFlashloanExecutorReturn(); // 'Invalid return value of the flashloan executor function'
+  error ReserveAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error NoMoreReservesAllowed(); // 'Maximum amount of reserves in the pool reached'
+  error EModeCategoryReserved(); // 'Zero eMode category is reserved for volatile heterogeneous assets'
+  error ReserveLiquidityNotZero(); // 'The liquidity of the reserve needs to be 0'
+  error FlashloanPremiumInvalid(); // 'Invalid flashloan premium'
+  error InvalidReserveParams(); // 'Invalid risk parameters for the reserve'
+  error InvalidEmodeCategoryParams(); // 'Invalid risk parameters for the eMode category'
+  error CallerMustBePool(); // 'The caller of this function must be a pool'
+  error InvalidMintAmount(); // 'Invalid amount to mint'
+  error InvalidBurnAmount(); // 'Invalid amount to burn'
+  error InvalidAmount(); // 'Amount must be greater than 0'
+  error ReserveInactive(); // 'Action requires an active reserve'
+  error ReserveFrozen(); // 'Action cannot be performed because the reserve is frozen'
+  error ReservePaused(); // 'Action cannot be performed because the reserve is paused'
+  error BorrowingNotEnabled(); // 'Borrowing is not enabled'
+  error NotEnoughAvailableUserBalance(); // 'User cannot withdraw more than the available balance'
+  error InvalidInterestRateModeSelected(); // 'Invalid interest rate mode selected'
+  error CollateralBalanceIsZero(); // 'The collateral balance is 0'
+  error HealthFactorLowerThanLiquidationThreshold(); // 'Health factor is below the liquidation threshold'
+  error CollateralCannotCoverNewBorrow(); // 'There is not enough collateral to cover a new borrow'
+  error NoDebtOfSelectedType(); // 'For repayment of a specific type of debt, the user needs to have debt that type'
+  error NoExplicitAmountToRepayOnBehalf(); // 'To repay on behalf of a user an explicit amount to repay is needed'
+  error UnderlyingBalanceZero(); // 'The underlying balance needs to be greater than 0'
+  error HealthFactorNotBelowThreshold(); // 'Health factor is not below the threshold'
+  error CollateralCannotBeLiquidated(); // 'The collateral chosen cannot be liquidated'
+  error SpecifiedCurrencyNotBorrowedByUser(); // 'User did not borrow the specified currency'
+  error InconsistentFlashloanParams(); // 'Inconsistent flashloan parameters'
+  error BorrowCapExceeded(); // 'Borrow cap is exceeded'
+  error SupplyCapExceeded(); // 'Supply cap is exceeded'
+  error DebtCeilingExceeded(); // 'Debt ceiling is exceeded'
+  error UnderlyingClaimableRightsNotZero(); // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
+  error VariableDebtSupplyNotZero(); // 'Variable debt supply is not zero'
+  error LtvValidationFailed(); // 'Ltv validation failed'
+  error InconsistentEModeCategory(); // 'Inconsistent eMode category'
+  error PriceOracleSentinelCheckFailed(); // 'Price oracle sentinel validation failed'
+  error AssetNotBorrowableInIsolation(); // 'Asset is not borrowable in isolation mode'
+  error ReserveAlreadyInitialized(); // 'Reserve has already been initialized'
+  error UserInIsolationModeOrLtvZero(); // 'User is in isolation mode or ltv is zero'
+  error InvalidLtv(); // 'Invalid ltv parameter for the reserve'
+  error InvalidLiquidationThreshold(); // 'Invalid liquidity threshold parameter for the reserve'
+  error InvalidLiquidationBonus(); // 'Invalid liquidity bonus parameter for the reserve'
+  error InvalidDecimals(); // 'Invalid decimals parameter of the underlying asset of the reserve'
+  error InvalidReserveFactor(); // 'Invalid reserve factor parameter for the reserve'
+  error InvalidBorrowCap(); // 'Invalid borrow cap for the reserve'
+  error InvalidSupplyCap(); // 'Invalid supply cap for the reserve'
+  error InvalidLiquidationProtocolFee(); // 'Invalid liquidation protocol fee for the reserve'
+  error InvalidDebtCeiling(); // 'Invalid debt ceiling for the reserve'
+  error InvalidReserveIndex(); // 'Invalid reserve index'
+  error AclAdminCannotBeZero(); // 'ACL admin cannot be set to the zero address'
+  error InconsistentParamsLength(); // 'Array parameters that should be equal length are not'
+  error ZeroAddressNotValid(); // 'Zero address not valid'
+  error InvalidExpiration(); // 'Invalid expiration'
+  error InvalidSignature(); // 'Invalid signature'
+  error OperationNotSupported(); // 'Operation not supported'
+  error DebtCeilingNotZero(); // 'Debt ceiling is not zero'
+  error AssetNotListed(); // 'Asset is not listed'
+  error InvalidOptimalUsageRatio(); // 'Invalid optimal usage ratio'
+  error UnderlyingCannotBeRescued(); // 'The underlying asset cannot be rescued'
+  error AddressesProviderAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error PoolAddressesDoNotMatch(); // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
+  error SiloedBorrowingViolation(); // 'User is trying to borrow multiple assets including a siloed one'
+  error ReserveDebtNotZero(); // the total debt of the reserve needs to be 0
+  error FlashloanDisabled(); // FlashLoaning for this asset is disabled
+  error InvalidMaxRate(); // The expect maximum borrow rate is invalid
+  error WithdrawToAToken(); // Withdrawing to the aToken is not allowed
+  error SupplyToAToken(); // Supplying to the aToken is not allowed
+  error Slope2MustBeGteSlope1(); // Variable interest rate slope 2 can not be lower than slope 1
+  error CallerNotRiskOrPoolOrEmergencyAdmin(); // 'The caller of the function is not a risk, pool or emergency admin'
+  error LiquidationGraceSentinelCheckFailed(); // 'Liquidation grace sentinel validation failed'
+  error InvalidGracePeriod(); // Grace period above a valid range
+  error InvalidFreezeState(); // Reserve is already in the passed freeze state
+  error NotBorrowableInEMode(); // Asset not borrowable in eMode
+  error CallerNotUmbrella(); // The caller of the function is not the umbrella contract
+  error ReserveNotInDeficit(); // The reserve is not in deficit
+  error MustNotLeaveDust(); // Below a certain threshold liquidators need to take the full position
+  error UserCannotHaveDebt(); // Thrown when a user tries to interact with a method that requires a position without debt
+  error SelfLiquidation(); // Thrown when a user tries to liquidate themselves
+  error CallerNotPositionManager(); // Thrown when the caller has not been enabled as a position manager of the on-behalf-of user
 }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IACLManager.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IACLManager.sol
index 3cd09eb..6fa1a5e 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IACLManager.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IACLManager.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IAaveIncentivesController.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IAaveIncentivesController.sol
index c06c605..7cc8421 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IAaveIncentivesController.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IAaveIncentivesController.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/ICreditDelegationToken.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ICreditDelegationToken.sol
index 199df36..aad2bf7 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/ICreditDelegationToken.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ICreditDelegationToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IERC20.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IERC20.sol
index 1d470e0..0554ac2 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IERC20.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IERC20.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IERC20Detailed.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IERC20Detailed.sol
index a1a2610..e076998 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IERC20Detailed.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IERC20Detailed.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {IERC20} from "./IERC20.sol";
 
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IInitializableDebtToken.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IInitializableDebtToken.sol
index 2a82625..283c3a9 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IInitializableDebtToken.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IInitializableDebtToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IAaveIncentivesController} from "./IAaveIncentivesController.sol";
@@ -34,7 +34,6 @@ interface IInitializableDebtToken {
    * @notice Initializes the debt token.
    * @param pool The pool contract that is initializing this contract
    * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
    * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's
    * @param debtTokenName The name of the token
    * @param debtTokenSymbol The symbol of the token
@@ -43,7 +42,6 @@ interface IInitializableDebtToken {
   function initialize(
     IPool pool,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 debtTokenDecimals,
     string memory debtTokenName,
     string memory debtTokenSymbol,
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IPool.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IPool.sol
index 90f3cd9..38aad59 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IPool.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IPool.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
@@ -10,27 +10,6 @@ import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
  * @notice Defines the basic interface for an Aave Pool.
  */
 interface IPool {
-  /**
-   * @dev Emitted on mintUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address initiating the supply
-   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens
-   * @param amount The amount of supplied assets
-   * @param referralCode The referral code used
-   */
-  event MintUnbacked(
-    address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode
-  );
-
-  /**
-   * @dev Emitted on backUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param backer The address paying for the backing
-   * @param amount The amount added as backing
-   * @param fee The amount paid in fees
-   */
-  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);
-
   /**
    * @dev Emitted on supply()
    * @param reserve The address of the underlying asset of the reserve
@@ -59,7 +38,7 @@ interface IPool {
    * initiator of the transaction on flashLoan()
    * @param onBehalfOf The address that will be getting the debt
    * @param amount The amount borrowed out
-   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable
+   * @param interestRateMode The rate mode: 2 for Variable, 1 is deprecated (changed on v3.2.0)
    * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray
    * @param referralCode The referral code used
    */
@@ -83,14 +62,6 @@ interface IPool {
    */
   event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount, bool useATokens);
 
-  /**
-   * @dev Emitted on swapBorrowRateMode()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user swapping his rate mode
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  event SwapBorrowRateMode(address indexed reserve, address indexed user, DataTypes.InterestRateMode interestRateMode);
-
   /**
    * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets
    * @param asset The address of the underlying asset of the reserve
@@ -119,20 +90,14 @@ interface IPool {
    */
   event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);
 
-  /**
-   * @dev Emitted on rebalanceStableBorrowRate()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user for which the rebalance has been executed
-   */
-  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);
-
   /**
    * @dev Emitted on flashLoan()
    * @param target The address of the flash loan receiver contract
    * @param initiator The address initiating the flash loan
    * @param asset The address of the asset being flash borrowed
    * @param amount The amount flash borrowed
-   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt
+   * @param interestRateMode The flashloan mode: 0 for regular flashloan,
+   *        1 for Stable (Deprecated on v3.2.0), 2 for Variable
    * @param premium The fee flash borrowed
    * @param referralCode The referral code used
    */
@@ -171,7 +136,7 @@ interface IPool {
    * @dev Emitted when the state of a reserve is updated.
    * @param reserve The address of the underlying asset of the reserve
    * @param liquidityRate The next liquidity rate
-   * @param stableBorrowRate The next stable borrow rate
+   * @param stableBorrowRate The next stable borrow rate @note deprecated on v3.2.0
    * @param variableBorrowRate The next variable borrow rate
    * @param liquidityIndex The next liquidity index
    * @param variableBorrowIndex The next variable borrow index
@@ -185,6 +150,14 @@ interface IPool {
     uint256 variableBorrowIndex
   );
 
+  /**
+   * @dev Emitted when the deficit of a reserve is covered.
+   * @param reserve The address of the underlying asset of the reserve
+   * @param caller The caller that triggered the DeficitCovered event
+   * @param amountCovered The amount of deficit covered
+   */
+  event DeficitCovered(address indexed reserve, address caller, uint256 amountCovered);
+
   /**
    * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
    * @param reserve The address of the reserve
@@ -193,23 +166,26 @@ interface IPool {
   event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
   /**
-   * @notice Mints an `amount` of aTokens to the `onBehalfOf`
-   * @param asset The address of the underlying asset to mint
-   * @param amount The amount to mint
-   * @param onBehalfOf The address that will receive the aTokens
-   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
-   *   0 if the action is executed directly by the user, without any middle-man
+   * @dev Emitted when deficit is realized on a liquidation.
+   * @param user The user address where the bad debt will be burned
+   * @param debtAsset The address of the underlying borrowed asset to be burned
+   * @param amountCreated The amount of deficit created
+   */
+  event DeficitCreated(address indexed user, address indexed debtAsset, uint256 amountCreated);
+
+  /**
+   * @dev Emitted when a position manager is approved by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+  event PositionManagerApproved(address indexed user, address indexed positionManager);
 
   /**
-   * @notice Back the current unbacked underlying with `amount` and pay `fee`.
-   * @param asset The address of the underlying asset to back
-   * @param amount The amount to back
-   * @param fee The amount paid in fees
-   * @return The backed amount
+   * @dev Emitted when a position manager is revoked by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);
+  event PositionManagerRevoked(address indexed user, address indexed positionManager);
 
   /**
    * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
@@ -265,13 +241,12 @@ interface IPool {
 
   /**
    * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower
-   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the
-   * corresponding debt token (StableDebtToken or VariableDebtToken)
+   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the VariableDebtToken
    * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet
-   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`
+   *   and 100 variable debt tokens
    * @param asset The address of the underlying asset to borrow
    * @param amount The amount to be borrowed
-   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
    * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself
@@ -283,11 +258,11 @@ interface IPool {
 
   /**
    * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned
-   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
+   * - E.g. User repays 100 USDC, burning 100 variable debt tokens of the `onBehalfOf` address
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -303,7 +278,7 @@ interface IPool {
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -327,35 +302,17 @@ interface IPool {
   /**
    * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the
    * equivalent debt tokens
-   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens
+   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable debt tokens
    * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken
    * balance is not enough to cover the whole debt
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode DEPRECATED in v3.2.0
    * @return The final amount repaid
    */
   function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);
 
-  /**
-   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa
-   * @param asset The address of the underlying asset borrowed
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;
-
-  /**
-   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.
-   * - Users can be rebalanced if the following conditions are satisfied:
-   *     1. Usage ratio is above 95%
-   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too
-   *        much has been borrowed at a stable rate and suppliers are not earning enough
-   * @param asset The address of the underlying asset borrowed
-   * @param user The address of the user to be rebalanced
-   */
-  function rebalanceStableBorrowRate(address asset, address user) external;
-
   /**
    * @notice Allows suppliers to enable/disable a specific supplied asset as collateral
    * @param asset The address of the underlying asset supplied
@@ -369,7 +326,7 @@ interface IPool {
    *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
-   * @param user The address of the borrower getting liquidated
+   * @param borrower The address of the borrower getting liquidated
    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
    * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
    * to receive the underlying collateral asset directly
@@ -377,7 +334,7 @@ interface IPool {
   function liquidationCall(
     address collateralAsset,
     address debtAsset,
-    address user,
+    address borrower,
     uint256 debtToCover,
     bool receiveAToken
   ) external;
@@ -392,9 +349,9 @@ interface IPool {
    * @param amounts The amounts of the assets being flash-borrowed
    * @param interestRateModes Types of the debt to open if the flash loan is not returned:
    *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver
-   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
+   *   1 -> Deprecated on v3.2.0
    *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
-   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
+   * @param onBehalfOf The address  that will receive the debt in the case of using 2 on `modes`
    * @param params Variadic packed params to pass to the receiver as extra information
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
@@ -452,37 +409,37 @@ interface IPool {
     );
 
   /**
-   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an
-   * interest rate strategy
+   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens
    * @dev Only callable by the PoolConfigurator contract
    * @param asset The address of the underlying asset of the reserve
    * @param aTokenAddress The address of the aToken that will be assigned to the reserve
-   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve
    * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
-   * @param interestRateStrategyAddress The address of the interest rate strategy contract
    */
-  function initReserve(
-    address asset,
-    address aTokenAddress,
-    address stableDebtAddress,
-    address variableDebtAddress,
-    address interestRateStrategyAddress
-  ) external;
+  function initReserve(address asset, address aTokenAddress, address variableDebtAddress) external;
 
   /**
    * @notice Drop a reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev Does not reset eMode flags, which must be considered when reusing the same reserve id for a different reserve.
    * @param asset The address of the underlying asset of the reserve
    */
   function dropReserve(address asset) external;
 
   /**
-   * @notice Updates the address of the interest rate strategy contract
+   * @notice Accumulates interest to all indexes of the reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
    * @param asset The address of the underlying asset of the reserve
-   * @param rateStrategyAddress The address of the interest rate strategy contract
    */
-  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;
+  function syncIndexesState(address asset) external;
+
+  /**
+   * @notice Updates interest rates on the reserve data
+   * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
+   * @param asset The address of the underlying asset of the reserve
+   */
+  function syncRatesState(address asset) external;
 
   /**
    * @notice Sets the configuration bitmap of the reserve as a whole
@@ -532,7 +489,14 @@ interface IPool {
    * @param asset The address of the underlying asset of the reserve
    * @return The state and configuration data of the reserve
    */
-  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);
+  function getReserveData(address asset) external view returns (DataTypes.ReserveDataLegacy memory);
+
+  /**
+   * @notice Returns the virtual underlying balance of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The reserve virtual underlying balance
+   */
+  function getVirtualUnderlyingBalance(address asset) external view returns (uint128);
 
   /**
    * @notice Validates and finalizes an aToken transfer
@@ -560,6 +524,13 @@ interface IPool {
    */
   function getReservesList() external view returns (address[] memory);
 
+  /**
+   * @notice Returns the number of initialized reserves
+   * @dev It includes dropped reserves
+   * @return The count
+   */
+  function getReservesCount() external view returns (uint256);
+
   /**
    * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct
    * @param id The id of the reserve as stored in the DataTypes.ReserveData struct
@@ -574,38 +545,77 @@ interface IPool {
   function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
 
   /**
-   * @notice Updates the protocol fee on the bridging
-   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury
+   * @notice Returns the ReserveInterestRateStrategy connected to all the reserves
+   * @return The address of the ReserveInterestRateStrategy contract
    */
-  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;
+  function RESERVE_INTEREST_RATE_STRATEGY() external view returns (address);
 
   /**
-   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:
-   * - A part is sent to aToken holders as extra, one time accumulated interest
-   * - A part is collected by the protocol treasury
-   * @dev The total premium is calculated on the total borrowed amount
-   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`
+   * @notice Updates flash loan premium. All this premium is collected by the protocol treasury.
+   * @dev The premium is calculated on the total borrowed amount
    * @dev Only callable by the PoolConfigurator contract
-   * @param flashLoanPremiumTotal The total premium, expressed in bps
-   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps
+   * @param flashLoanPremium The flash loan premium, expressed in bps
    */
-  function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;
+  function updateFlashloanPremium(uint128 flashLoanPremium) external;
 
   /**
-   * @notice Configures a new category for the eMode.
+   * @notice Configures a new or alters an existing collateral configuration of an eMode.
    * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.
    * The category 0 is reserved as it's the default for volatile assets
    * @param id The id of the category
    * @param config The configuration of the category
    */
-  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;
+  function configureEModeCategory(uint8 id, DataTypes.EModeCategoryBaseConfiguration memory config) external;
+
+  /**
+   * @notice Replaces the current eMode collateralBitmap.
+   * @param id The id of the category
+   * @param collateralBitmap The collateralBitmap of the category
+   */
+  function configureEModeCategoryCollateralBitmap(uint8 id, uint128 collateralBitmap) external;
+
+  /**
+   * @notice Replaces the current eMode borrowableBitmap.
+   * @param id The id of the category
+   * @param borrowableBitmap The borrowableBitmap of the category
+   */
+  function configureEModeCategoryBorrowableBitmap(uint8 id, uint128 borrowableBitmap) external;
 
   /**
    * @notice Returns the data of an eMode category
+   * @dev DEPRECATED use independent getters instead
    * @param id The id of the category
    * @return The configuration data of the category
    */
-  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);
+  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategoryLegacy memory);
+
+  /**
+   * @notice Returns the label of an eMode category
+   * @param id The id of the category
+   * @return The label of the category
+   */
+  function getEModeCategoryLabel(uint8 id) external view returns (string memory);
+
+  /**
+   * @notice Returns the collateral config of an eMode category
+   * @param id The id of the category
+   * @return The ltv,lt,lb of the category
+   */
+  function getEModeCategoryCollateralConfig(uint8 id) external view returns (DataTypes.CollateralConfig memory);
+
+  /**
+   * @notice Returns the collateralBitmap of an eMode category
+   * @param id The id of the category
+   * @return The collateralBitmap of the category
+   */
+  function getEModeCategoryCollateralBitmap(uint8 id) external view returns (uint128);
+
+  /**
+   * @notice Returns the borrowableBitmap of an eMode category
+   * @param id The id of the category
+   * @return The borrowableBitmap of the category
+   */
+  function getEModeCategoryBorrowableBitmap(uint8 id) external view returns (uint128);
 
   /**
    * @notice Allows a user to use the protocol in eMode
@@ -628,25 +638,34 @@ interface IPool {
   function resetIsolationModeTotalDebt(address asset) external;
 
   /**
-   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate
-   * @return The percentage of available liquidity to borrow, expressed in bps
+   * @notice Sets the liquidation grace period of the given asset
+   * @dev To enable a liquidation grace period, a timestamp in the future should be set,
+   *      To disable a liquidation grace period, any timestamp in the past works, like 0
+   * @param asset The address of the underlying asset to set the liquidationGracePeriod
+   * @param until Timestamp when the liquidation grace period will end
+   *
    */
-  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);
+  function setLiquidationGracePeriod(address asset, uint40 until) external;
 
   /**
-   * @notice Returns the total fee on flash loans
-   * @return The total fee on flashloans
+   * @notice Returns the liquidation grace period of the given asset
+   * @param asset The address of the underlying asset
+   * @return Timestamp when the liquidation grace period will end
+   *
    */
-  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
+  function getLiquidationGracePeriod(address asset) external view returns (uint40);
 
   /**
-   * @notice Returns the part of the bridge fees sent to protocol
-   * @return The bridge fee sent to the protocol treasury
+   * @notice Returns the total fee on flash loans.
+   * @dev From v3.4 all flashloan fees will be send to the treasury.
+   * @return The total fee on flashloans
    */
-  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);
+  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
 
   /**
    * @notice Returns the part of the flashloan fees sent to protocol
+   * @dev From v3.4 all flashloan fees will be send to the treasury and this value
+   *      is always 100_00.
    * @return The flashloan fee sent to the protocol treasury
    */
   function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);
@@ -684,4 +703,101 @@ interface IPool {
    *   0 if the action is executed directly by the user, without any middle-man
    */
   function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+
+  /**
+   * @notice It covers the deficit of a specified reserve by burning the equivalent aToken `amount` for assets
+   * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+   * @param asset The address of the underlying asset to cover the deficit.
+   * @param amount The amount to be covered, in aToken
+   */
+  function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+  /**
+   * @notice Approves or disapproves a position manager. This position manager will be able
+   * to call the `setUserUseReserveAsCollateralOnBehalfOf` and the
+   * `setUserEModeOnBehalfOf` function on behalf of the user.
+   * @param positionManager The address of the position manager
+   * @param approve True if the position manager should be approved, false otherwise
+   */
+  function approvePositionManager(address positionManager, bool approve) external;
+
+  /**
+   * @notice Renounces a position manager role for a given user.
+   * @param user The address of the user
+   */
+  function renouncePositionManagerRole(address user) external;
+
+  /**
+   * @notice Sets the use as collateral flag for the user on the specific reserve on behalf of the user.
+   * @param asset The address of the underlying asset of the reserve
+   * @param useAsCollateral True if the user wants to use the reserve as collateral, false otherwise
+   * @param onBehalfOf The address of the user
+   */
+  function setUserUseReserveAsCollateralOnBehalfOf(address asset, bool useAsCollateral, address onBehalfOf) external;
+
+  /**
+   * @notice Sets the eMode category for the user on the specific reserve on behalf of the user.
+   * @param categoryId The id of the category
+   * @param onBehalfOf The address of the user
+   */
+  function setUserEModeOnBehalfOf(uint8 categoryId, address onBehalfOf) external;
+
+  /*
+   * @notice Returns true if the `positionManager` address is approved to use the position manager role on behalf of the user.
+   * @param user The address of the user
+   * @param positionManager The address of the position manager
+   * @return True if the user is approved to use the position manager, false otherwise
+   */
+  function isApprovedPositionManager(address user, address positionManager) external view returns (bool);
+
+  /**
+   * @notice Returns the current deficit of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The current deficit of the reserve
+   */
+  function getReserveDeficit(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the aToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the aToken
+   */
+  function getReserveAToken(address asset) external view returns (address);
+
+  /**
+   * @notice Returns the variableDebtToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the variableDebtToken
+   */
+  function getReserveVariableDebtToken(address asset) external view returns (address);
+
+  /**
+   * @notice Gets the address of the external FlashLoanLogic
+   */
+  function getFlashLoanLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external BorrowLogic
+   */
+  function getBorrowLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external EModeLogic
+   */
+  function getEModeLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external LiquidationLogic
+   */
+  function getLiquidationLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external PoolLogic
+   */
+  function getPoolLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external SupplyLogic
+   */
+  function getSupplyLogic() external view returns (address);
 }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IPoolAddressesProvider.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IPoolAddressesProvider.sol
index 08ed4a5..a27288b 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IPoolAddressesProvider.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IPoolAddressesProvider.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IScaledBalanceToken.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IScaledBalanceToken.sol
index 6888d93..3e745c2 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IScaledBalanceToken.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IScaledBalanceToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IVariableDebtToken.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IVariableDebtToken.sol
index 9e312dd..d567d1f 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IVariableDebtToken.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IVariableDebtToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IScaledBalanceToken} from "./IScaledBalanceToken.sol";
@@ -17,10 +17,9 @@ interface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {
    * @param onBehalfOf The address receiving the debt tokens
    * @param amount The amount of debt being minted
    * @param index The variable debt index of the reserve
-   * @return True if the previous balance of the user is 0, false otherwise
    * @return The scaled total debt of the reserve
    */
-  function mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool, uint256);
+  function mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (uint256);
 
   /**
    * @notice Burns user variable debt
@@ -29,9 +28,10 @@ interface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {
    * @param from The address from which the debt will be burned
    * @param amount The amount getting burned
    * @param index The variable debt index of the reserve
+   * @return True if the new balance is zero
    * @return The scaled total debt of the reserve
    */
-  function burn(address from, uint256 amount, uint256 index) external returns (uint256);
+  function burn(address from, uint256 amount, uint256 index) external returns (bool, uint256);
 
   /**
    * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IncentivizedERC20.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IncentivizedERC20.sol
index 04ce567..4e18e31 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/IncentivizedERC20.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/IncentivizedERC20.sol
@@ -1,16 +1,17 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {IERC20Detailed} from "../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
-import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
 import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
 import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
 import {IACLManager} from "../../../interfaces/IACLManager.sol";
+import {DelegationMode} from "./DelegationMode.sol";
 
 /**
  * @title IncentivizedERC20
@@ -26,7 +27,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    */
   modifier onlyPoolAdmin() {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
-    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
+    require(aclManager.isPoolAdmin(_msgSender()), Errors.CallerNotPoolAdmin());
     _;
   }
 
@@ -34,18 +35,18 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @dev Only pool can call functions marked by this modifier.
    */
   modifier onlyPool() {
-    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);
+    require(_msgSender() == address(POOL), Errors.CallerMustBePool());
     _;
   }
 
   /**
    * @dev UserState - additionalData is a flexible field.
    * ATokens and VariableDebtTokens use this field store the index of the
-   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use
-   * this field to store the user's stable rate.
+   * user's last supply/withdrawal/borrow/repayment.
    */
   struct UserState {
-    uint128 balance;
+    uint120 balance;
+    DelegationMode delegationMode;
     uint128 additionalData;
   }
   // Map of users address and their state data (userAddress => userStateData)
@@ -59,23 +60,31 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
   string private _name;
   string private _symbol;
   uint8 private _decimals;
-  IAaveIncentivesController internal _incentivesController;
+  // @dev deprecated on v3.4.0, replaced with immutable REWARDS_CONTROLLER
+  IAaveIncentivesController internal __deprecated_incentivesController;
   IPoolAddressesProvider internal immutable _addressesProvider;
   IPool public immutable POOL;
+  /**
+   * @notice Returns the address of the Incentives Controller contract
+   * @return The address of the Incentives Controller
+   */
+  IAaveIncentivesController public immutable REWARDS_CONTROLLER;
 
   /**
    * @dev Constructor.
    * @param pool The reference to the main Pool contract
-   * @param name The name of the token
-   * @param symbol The symbol of the token
-   * @param decimals The number of decimals of the token
+   * @param name_ The name of the token
+   * @param symbol_ The symbol of the token
+   * @param decimals_ The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {
+  constructor(IPool pool, string memory name_, string memory symbol_, uint8 decimals_, address rewardsController) {
     _addressesProvider = pool.ADDRESSES_PROVIDER();
-    _name = name;
-    _symbol = symbol;
-    _decimals = decimals;
+    _name = name_;
+    _symbol = symbol_;
+    _decimals = decimals_;
     POOL = pool;
+    REWARDS_CONTROLLER = IAaveIncentivesController(rewardsController);
   }
 
   /// @inheritdoc IERC20Detailed
@@ -108,20 +117,12 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @return The address of the Incentives Controller
    */
   function getIncentivesController() external view virtual returns (IAaveIncentivesController) {
-    return _incentivesController;
-  }
-
-  /**
-   * @notice Sets a new Incentives Controller
-   * @param controller the new Incentives controller
-   */
-  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {
-    _incentivesController = controller;
+    return REWARDS_CONTROLLER;
   }
 
   /// @inheritdoc IERC20
   function transfer(address recipient, uint256 amount) external virtual override returns (bool) {
-    uint128 castAmount = amount.toUint128();
+    uint120 castAmount = amount.toUint120();
     _transfer(_msgSender(), recipient, castAmount);
     return true;
   }
@@ -139,7 +140,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
 
   /// @inheritdoc IERC20
   function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {
-    uint128 castAmount = amount.toUint128();
+    uint120 castAmount = amount.toUint120();
     _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);
     _transfer(sender, recipient, castAmount);
     return true;
@@ -173,18 +174,17 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @param recipient The destination address
    * @param amount The amount getting transferred
    */
-  function _transfer(address sender, address recipient, uint128 amount) internal virtual {
-    uint128 oldSenderBalance = _userState[sender].balance;
+  function _transfer(address sender, address recipient, uint120 amount) internal virtual {
+    uint120 oldSenderBalance = _userState[sender].balance;
     _userState[sender].balance = oldSenderBalance - amount;
-    uint128 oldRecipientBalance = _userState[recipient].balance;
+    uint120 oldRecipientBalance = _userState[recipient].balance;
     _userState[recipient].balance = oldRecipientBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
+    if (address(REWARDS_CONTROLLER) != address(0)) {
       uint256 currentTotalSupply = _totalSupply;
-      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
+      REWARDS_CONTROLLER.handleAction(sender, currentTotalSupply, oldSenderBalance);
       if (sender != recipient) {
-        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
+        REWARDS_CONTROLLER.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
       }
     }
   }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/MintableIncentivizedERC20.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/MintableIncentivizedERC20.sol
index 21686c4..b69d99e 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/MintableIncentivizedERC20.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/MintableIncentivizedERC20.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
@@ -17,9 +17,10 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    IncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    IncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -29,16 +30,15 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param account The address receiving tokens
    * @param amount The amount of tokens to mint
    */
-  function _mint(address account, uint128 amount) internal virtual {
+  function _mint(address account, uint120 amount) internal virtual {
     uint256 oldTotalSupply = _totalSupply;
     _totalSupply = oldTotalSupply + amount;
 
-    uint128 oldAccountBalance = _userState[account].balance;
+    uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 
@@ -47,17 +47,15 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param account The account whose tokens are burnt
    * @param amount The amount of tokens to burn
    */
-  function _burn(address account, uint128 amount) internal virtual {
+  function _burn(address account, uint120 amount) internal virtual {
     uint256 oldTotalSupply = _totalSupply;
     _totalSupply = oldTotalSupply - amount;
 
-    uint128 oldAccountBalance = _userState[account].balance;
+    uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance - amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/SafeCast.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/SafeCast.sol
index 1542e33..6e26cd8 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/SafeCast.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/SafeCast.sol
@@ -1,9 +1,11 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)
-pragma solidity 0.8.10;
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
+// This file was procedurally generated from scripts/generate/templates/SafeCast.js.
+
+pragma solidity ^0.8.20;
 
 /**
- * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
+ * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
  * checks.
  *
  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
@@ -13,11 +15,79 @@ pragma solidity 0.8.10;
  *
  * Using this library instead of the unchecked operations eliminates an entire
  * class of bugs, so it's recommended to use it always.
- *
- * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
- * all math on `uint256` and `int256` and then downcasting.
  */
 library SafeCast {
+  /**
+   * @dev Value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
+
+  /**
+   * @dev An int value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedIntToUint(int256 value);
+
+  /**
+   * @dev Value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
+
+  /**
+   * @dev An uint value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedUintToInt(uint256 value);
+
+  /**
+   * @dev Returns the downcasted uint248 from uint256, reverting on
+   * overflow (when the input is greater than largest uint248).
+   *
+   * Counterpart to Solidity's `uint248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toUint248(uint256 value) internal pure returns (uint248) {
+    if (value > type(uint248).max) {
+      revert SafeCastOverflowedUintDowncast(248, value);
+    }
+    return uint248(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint240 from uint256, reverting on
+   * overflow (when the input is greater than largest uint240).
+   *
+   * Counterpart to Solidity's `uint240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toUint240(uint256 value) internal pure returns (uint240) {
+    if (value > type(uint240).max) {
+      revert SafeCastOverflowedUintDowncast(240, value);
+    }
+    return uint240(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint232 from uint256, reverting on
+   * overflow (when the input is greater than largest uint232).
+   *
+   * Counterpart to Solidity's `uint232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toUint232(uint256 value) internal pure returns (uint232) {
+    if (value > type(uint232).max) {
+      revert SafeCastOverflowedUintDowncast(232, value);
+    }
+    return uint232(value);
+  }
+
   /**
    * @dev Returns the downcasted uint224 from uint256, reverting on
    * overflow (when the input is greater than largest uint224).
@@ -29,10 +99,199 @@ library SafeCast {
    * - input must fit into 224 bits
    */
   function toUint224(uint256 value) internal pure returns (uint224) {
-    require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
+    if (value > type(uint224).max) {
+      revert SafeCastOverflowedUintDowncast(224, value);
+    }
     return uint224(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint216 from uint256, reverting on
+   * overflow (when the input is greater than largest uint216).
+   *
+   * Counterpart to Solidity's `uint216` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 216 bits
+   */
+  function toUint216(uint256 value) internal pure returns (uint216) {
+    if (value > type(uint216).max) {
+      revert SafeCastOverflowedUintDowncast(216, value);
+    }
+    return uint216(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint208 from uint256, reverting on
+   * overflow (when the input is greater than largest uint208).
+   *
+   * Counterpart to Solidity's `uint208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toUint208(uint256 value) internal pure returns (uint208) {
+    if (value > type(uint208).max) {
+      revert SafeCastOverflowedUintDowncast(208, value);
+    }
+    return uint208(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint200 from uint256, reverting on
+   * overflow (when the input is greater than largest uint200).
+   *
+   * Counterpart to Solidity's `uint200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toUint200(uint256 value) internal pure returns (uint200) {
+    if (value > type(uint200).max) {
+      revert SafeCastOverflowedUintDowncast(200, value);
+    }
+    return uint200(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint192 from uint256, reverting on
+   * overflow (when the input is greater than largest uint192).
+   *
+   * Counterpart to Solidity's `uint192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toUint192(uint256 value) internal pure returns (uint192) {
+    if (value > type(uint192).max) {
+      revert SafeCastOverflowedUintDowncast(192, value);
+    }
+    return uint192(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint184 from uint256, reverting on
+   * overflow (when the input is greater than largest uint184).
+   *
+   * Counterpart to Solidity's `uint184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toUint184(uint256 value) internal pure returns (uint184) {
+    if (value > type(uint184).max) {
+      revert SafeCastOverflowedUintDowncast(184, value);
+    }
+    return uint184(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint176 from uint256, reverting on
+   * overflow (when the input is greater than largest uint176).
+   *
+   * Counterpart to Solidity's `uint176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toUint176(uint256 value) internal pure returns (uint176) {
+    if (value > type(uint176).max) {
+      revert SafeCastOverflowedUintDowncast(176, value);
+    }
+    return uint176(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint168 from uint256, reverting on
+   * overflow (when the input is greater than largest uint168).
+   *
+   * Counterpart to Solidity's `uint168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toUint168(uint256 value) internal pure returns (uint168) {
+    if (value > type(uint168).max) {
+      revert SafeCastOverflowedUintDowncast(168, value);
+    }
+    return uint168(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint160 from uint256, reverting on
+   * overflow (when the input is greater than largest uint160).
+   *
+   * Counterpart to Solidity's `uint160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toUint160(uint256 value) internal pure returns (uint160) {
+    if (value > type(uint160).max) {
+      revert SafeCastOverflowedUintDowncast(160, value);
+    }
+    return uint160(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint152 from uint256, reverting on
+   * overflow (when the input is greater than largest uint152).
+   *
+   * Counterpart to Solidity's `uint152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toUint152(uint256 value) internal pure returns (uint152) {
+    if (value > type(uint152).max) {
+      revert SafeCastOverflowedUintDowncast(152, value);
+    }
+    return uint152(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint144 from uint256, reverting on
+   * overflow (when the input is greater than largest uint144).
+   *
+   * Counterpart to Solidity's `uint144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toUint144(uint256 value) internal pure returns (uint144) {
+    if (value > type(uint144).max) {
+      revert SafeCastOverflowedUintDowncast(144, value);
+    }
+    return uint144(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint136 from uint256, reverting on
+   * overflow (when the input is greater than largest uint136).
+   *
+   * Counterpart to Solidity's `uint136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toUint136(uint256 value) internal pure returns (uint136) {
+    if (value > type(uint136).max) {
+      revert SafeCastOverflowedUintDowncast(136, value);
+    }
+    return uint136(value);
+  }
+
   /**
    * @dev Returns the downcasted uint128 from uint256, reverting on
    * overflow (when the input is greater than largest uint128).
@@ -44,10 +303,63 @@ library SafeCast {
    * - input must fit into 128 bits
    */
   function toUint128(uint256 value) internal pure returns (uint128) {
-    require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
+    if (value > type(uint128).max) {
+      revert SafeCastOverflowedUintDowncast(128, value);
+    }
     return uint128(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint120 from uint256, reverting on
+   * overflow (when the input is greater than largest uint120).
+   *
+   * Counterpart to Solidity's `uint120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toUint120(uint256 value) internal pure returns (uint120) {
+    if (value > type(uint120).max) {
+      revert SafeCastOverflowedUintDowncast(120, value);
+    }
+    return uint120(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint112 from uint256, reverting on
+   * overflow (when the input is greater than largest uint112).
+   *
+   * Counterpart to Solidity's `uint112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toUint112(uint256 value) internal pure returns (uint112) {
+    if (value > type(uint112).max) {
+      revert SafeCastOverflowedUintDowncast(112, value);
+    }
+    return uint112(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint104 from uint256, reverting on
+   * overflow (when the input is greater than largest uint104).
+   *
+   * Counterpart to Solidity's `uint104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toUint104(uint256 value) internal pure returns (uint104) {
+    if (value > type(uint104).max) {
+      revert SafeCastOverflowedUintDowncast(104, value);
+    }
+    return uint104(value);
+  }
+
   /**
    * @dev Returns the downcasted uint96 from uint256, reverting on
    * overflow (when the input is greater than largest uint96).
@@ -59,10 +371,63 @@ library SafeCast {
    * - input must fit into 96 bits
    */
   function toUint96(uint256 value) internal pure returns (uint96) {
-    require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
+    if (value > type(uint96).max) {
+      revert SafeCastOverflowedUintDowncast(96, value);
+    }
     return uint96(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint88 from uint256, reverting on
+   * overflow (when the input is greater than largest uint88).
+   *
+   * Counterpart to Solidity's `uint88` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 88 bits
+   */
+  function toUint88(uint256 value) internal pure returns (uint88) {
+    if (value > type(uint88).max) {
+      revert SafeCastOverflowedUintDowncast(88, value);
+    }
+    return uint88(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint80 from uint256, reverting on
+   * overflow (when the input is greater than largest uint80).
+   *
+   * Counterpart to Solidity's `uint80` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 80 bits
+   */
+  function toUint80(uint256 value) internal pure returns (uint80) {
+    if (value > type(uint80).max) {
+      revert SafeCastOverflowedUintDowncast(80, value);
+    }
+    return uint80(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint72 from uint256, reverting on
+   * overflow (when the input is greater than largest uint72).
+   *
+   * Counterpart to Solidity's `uint72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toUint72(uint256 value) internal pure returns (uint72) {
+    if (value > type(uint72).max) {
+      revert SafeCastOverflowedUintDowncast(72, value);
+    }
+    return uint72(value);
+  }
+
   /**
    * @dev Returns the downcasted uint64 from uint256, reverting on
    * overflow (when the input is greater than largest uint64).
@@ -74,10 +439,63 @@ library SafeCast {
    * - input must fit into 64 bits
    */
   function toUint64(uint256 value) internal pure returns (uint64) {
-    require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
+    if (value > type(uint64).max) {
+      revert SafeCastOverflowedUintDowncast(64, value);
+    }
     return uint64(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint56 from uint256, reverting on
+   * overflow (when the input is greater than largest uint56).
+   *
+   * Counterpart to Solidity's `uint56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
+   */
+  function toUint56(uint256 value) internal pure returns (uint56) {
+    if (value > type(uint56).max) {
+      revert SafeCastOverflowedUintDowncast(56, value);
+    }
+    return uint56(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint48 from uint256, reverting on
+   * overflow (when the input is greater than largest uint48).
+   *
+   * Counterpart to Solidity's `uint48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toUint48(uint256 value) internal pure returns (uint48) {
+    if (value > type(uint48).max) {
+      revert SafeCastOverflowedUintDowncast(48, value);
+    }
+    return uint48(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint40 from uint256, reverting on
+   * overflow (when the input is greater than largest uint40).
+   *
+   * Counterpart to Solidity's `uint40` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 40 bits
+   */
+  function toUint40(uint256 value) internal pure returns (uint40) {
+    if (value > type(uint40).max) {
+      revert SafeCastOverflowedUintDowncast(40, value);
+    }
+    return uint40(value);
+  }
+
   /**
    * @dev Returns the downcasted uint32 from uint256, reverting on
    * overflow (when the input is greater than largest uint32).
@@ -89,10 +507,29 @@ library SafeCast {
    * - input must fit into 32 bits
    */
   function toUint32(uint256 value) internal pure returns (uint32) {
-    require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
+    if (value > type(uint32).max) {
+      revert SafeCastOverflowedUintDowncast(32, value);
+    }
     return uint32(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint24 from uint256, reverting on
+   * overflow (when the input is greater than largest uint24).
+   *
+   * Counterpart to Solidity's `uint24` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 24 bits
+   */
+  function toUint24(uint256 value) internal pure returns (uint24) {
+    if (value > type(uint24).max) {
+      revert SafeCastOverflowedUintDowncast(24, value);
+    }
+    return uint24(value);
+  }
+
   /**
    * @dev Returns the downcasted uint16 from uint256, reverting on
    * overflow (when the input is greater than largest uint16).
@@ -104,7 +541,9 @@ library SafeCast {
    * - input must fit into 16 bits
    */
   function toUint16(uint256 value) internal pure returns (uint16) {
-    require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
+    if (value > type(uint16).max) {
+      revert SafeCastOverflowedUintDowncast(16, value);
+    }
     return uint16(value);
   }
 
@@ -116,10 +555,12 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
+   * - input must fit into 8 bits
    */
   function toUint8(uint256 value) internal pure returns (uint8) {
-    require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
+    if (value > type(uint8).max) {
+      revert SafeCastOverflowedUintDowncast(8, value);
+    }
     return uint8(value);
   }
 
@@ -131,10 +572,282 @@ library SafeCast {
    * - input must be greater than or equal to 0.
    */
   function toUint256(int256 value) internal pure returns (uint256) {
-    require(value >= 0, "SafeCast: value must be positive");
+    if (value < 0) {
+      revert SafeCastOverflowedIntToUint(value);
+    }
     return uint256(value);
   }
 
+  /**
+   * @dev Returns the downcasted int248 from int256, reverting on
+   * overflow (when the input is less than smallest int248 or
+   * greater than largest int248).
+   *
+   * Counterpart to Solidity's `int248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toInt248(int256 value) internal pure returns (int248 downcasted) {
+    downcasted = int248(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(248, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int240 from int256, reverting on
+   * overflow (when the input is less than smallest int240 or
+   * greater than largest int240).
+   *
+   * Counterpart to Solidity's `int240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toInt240(int256 value) internal pure returns (int240 downcasted) {
+    downcasted = int240(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(240, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int232 from int256, reverting on
+   * overflow (when the input is less than smallest int232 or
+   * greater than largest int232).
+   *
+   * Counterpart to Solidity's `int232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toInt232(int256 value) internal pure returns (int232 downcasted) {
+    downcasted = int232(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(232, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int224 from int256, reverting on
+   * overflow (when the input is less than smallest int224 or
+   * greater than largest int224).
+   *
+   * Counterpart to Solidity's `int224` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 224 bits
+   */
+  function toInt224(int256 value) internal pure returns (int224 downcasted) {
+    downcasted = int224(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(224, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int216 from int256, reverting on
+   * overflow (when the input is less than smallest int216 or
+   * greater than largest int216).
+   *
+   * Counterpart to Solidity's `int216` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 216 bits
+   */
+  function toInt216(int256 value) internal pure returns (int216 downcasted) {
+    downcasted = int216(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(216, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int208 from int256, reverting on
+   * overflow (when the input is less than smallest int208 or
+   * greater than largest int208).
+   *
+   * Counterpart to Solidity's `int208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toInt208(int256 value) internal pure returns (int208 downcasted) {
+    downcasted = int208(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(208, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int200 from int256, reverting on
+   * overflow (when the input is less than smallest int200 or
+   * greater than largest int200).
+   *
+   * Counterpart to Solidity's `int200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toInt200(int256 value) internal pure returns (int200 downcasted) {
+    downcasted = int200(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(200, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int192 from int256, reverting on
+   * overflow (when the input is less than smallest int192 or
+   * greater than largest int192).
+   *
+   * Counterpart to Solidity's `int192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toInt192(int256 value) internal pure returns (int192 downcasted) {
+    downcasted = int192(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(192, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int184 from int256, reverting on
+   * overflow (when the input is less than smallest int184 or
+   * greater than largest int184).
+   *
+   * Counterpart to Solidity's `int184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toInt184(int256 value) internal pure returns (int184 downcasted) {
+    downcasted = int184(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(184, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int176 from int256, reverting on
+   * overflow (when the input is less than smallest int176 or
+   * greater than largest int176).
+   *
+   * Counterpart to Solidity's `int176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toInt176(int256 value) internal pure returns (int176 downcasted) {
+    downcasted = int176(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(176, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int168 from int256, reverting on
+   * overflow (when the input is less than smallest int168 or
+   * greater than largest int168).
+   *
+   * Counterpart to Solidity's `int168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toInt168(int256 value) internal pure returns (int168 downcasted) {
+    downcasted = int168(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(168, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int160 from int256, reverting on
+   * overflow (when the input is less than smallest int160 or
+   * greater than largest int160).
+   *
+   * Counterpart to Solidity's `int160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toInt160(int256 value) internal pure returns (int160 downcasted) {
+    downcasted = int160(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(160, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int152 from int256, reverting on
+   * overflow (when the input is less than smallest int152 or
+   * greater than largest int152).
+   *
+   * Counterpart to Solidity's `int152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toInt152(int256 value) internal pure returns (int152 downcasted) {
+    downcasted = int152(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(152, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int144 from int256, reverting on
+   * overflow (when the input is less than smallest int144 or
+   * greater than largest int144).
+   *
+   * Counterpart to Solidity's `int144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toInt144(int256 value) internal pure returns (int144 downcasted) {
+    downcasted = int144(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(144, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int136 from int256, reverting on
+   * overflow (when the input is less than smallest int136 or
+   * greater than largest int136).
+   *
+   * Counterpart to Solidity's `int136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toInt136(int256 value) internal pure returns (int136 downcasted) {
+    downcasted = int136(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(136, value);
+    }
+  }
+
   /**
    * @dev Returns the downcasted int128 from int256, reverting on
    * overflow (when the input is less than smallest int128 or
@@ -145,12 +858,138 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 128 bits
+   */
+  function toInt128(int256 value) internal pure returns (int128 downcasted) {
+    downcasted = int128(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(128, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int120 from int256, reverting on
+   * overflow (when the input is less than smallest int120 or
+   * greater than largest int120).
+   *
+   * Counterpart to Solidity's `int120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toInt120(int256 value) internal pure returns (int120 downcasted) {
+    downcasted = int120(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(120, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int112 from int256, reverting on
+   * overflow (when the input is less than smallest int112 or
+   * greater than largest int112).
+   *
+   * Counterpart to Solidity's `int112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toInt112(int256 value) internal pure returns (int112 downcasted) {
+    downcasted = int112(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(112, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int104 from int256, reverting on
+   * overflow (when the input is less than smallest int104 or
+   * greater than largest int104).
+   *
+   * Counterpart to Solidity's `int104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toInt104(int256 value) internal pure returns (int104 downcasted) {
+    downcasted = int104(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(104, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int96 from int256, reverting on
+   * overflow (when the input is less than smallest int96 or
+   * greater than largest int96).
+   *
+   * Counterpart to Solidity's `int96` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 96 bits
+   */
+  function toInt96(int256 value) internal pure returns (int96 downcasted) {
+    downcasted = int96(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(96, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int88 from int256, reverting on
+   * overflow (when the input is less than smallest int88 or
+   * greater than largest int88).
+   *
+   * Counterpart to Solidity's `int88` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 88 bits
    */
-  function toInt128(int256 value) internal pure returns (int128) {
-    require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
-    return int128(value);
+  function toInt88(int256 value) internal pure returns (int88 downcasted) {
+    downcasted = int88(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(88, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int80 from int256, reverting on
+   * overflow (when the input is less than smallest int80 or
+   * greater than largest int80).
+   *
+   * Counterpart to Solidity's `int80` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 80 bits
+   */
+  function toInt80(int256 value) internal pure returns (int80 downcasted) {
+    downcasted = int80(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(80, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int72 from int256, reverting on
+   * overflow (when the input is less than smallest int72 or
+   * greater than largest int72).
+   *
+   * Counterpart to Solidity's `int72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toInt72(int256 value) internal pure returns (int72 downcasted) {
+    downcasted = int72(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(72, value);
+    }
   }
 
   /**
@@ -163,12 +1002,66 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 64 bits
+   */
+  function toInt64(int256 value) internal pure returns (int64 downcasted) {
+    downcasted = int64(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(64, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int56 from int256, reverting on
+   * overflow (when the input is less than smallest int56 or
+   * greater than largest int56).
+   *
+   * Counterpart to Solidity's `int56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
+   */
+  function toInt56(int256 value) internal pure returns (int56 downcasted) {
+    downcasted = int56(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(56, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int48 from int256, reverting on
+   * overflow (when the input is less than smallest int48 or
+   * greater than largest int48).
+   *
+   * Counterpart to Solidity's `int48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toInt48(int256 value) internal pure returns (int48 downcasted) {
+    downcasted = int48(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(48, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int40 from int256, reverting on
+   * overflow (when the input is less than smallest int40 or
+   * greater than largest int40).
+   *
+   * Counterpart to Solidity's `int40` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 40 bits
    */
-  function toInt64(int256 value) internal pure returns (int64) {
-    require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
-    return int64(value);
+  function toInt40(int256 value) internal pure returns (int40 downcasted) {
+    downcasted = int40(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(40, value);
+    }
   }
 
   /**
@@ -181,12 +1074,30 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 32 bits
+   */
+  function toInt32(int256 value) internal pure returns (int32 downcasted) {
+    downcasted = int32(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(32, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int24 from int256, reverting on
+   * overflow (when the input is less than smallest int24 or
+   * greater than largest int24).
+   *
+   * Counterpart to Solidity's `int24` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 24 bits
    */
-  function toInt32(int256 value) internal pure returns (int32) {
-    require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
-    return int32(value);
+  function toInt24(int256 value) internal pure returns (int24 downcasted) {
+    downcasted = int24(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(24, value);
+    }
   }
 
   /**
@@ -199,12 +1110,12 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 16 bits
-   *
-   * _Available since v3.1._
    */
-  function toInt16(int256 value) internal pure returns (int16) {
-    require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
-    return int16(value);
+  function toInt16(int256 value) internal pure returns (int16 downcasted) {
+    downcasted = int16(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(16, value);
+    }
   }
 
   /**
@@ -216,13 +1127,13 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
-   *
-   * _Available since v3.1._
+   * - input must fit into 8 bits
    */
-  function toInt8(int256 value) internal pure returns (int8) {
-    require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
-    return int8(value);
+  function toInt8(int256 value) internal pure returns (int8 downcasted) {
+    downcasted = int8(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(8, value);
+    }
   }
 
   /**
@@ -234,7 +1145,18 @@ library SafeCast {
    */
   function toInt256(uint256 value) internal pure returns (int256) {
     // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
-    require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
+    if (value > uint256(type(int256).max)) {
+      revert SafeCastOverflowedUintToInt(value);
+    }
     return int256(value);
   }
+
+  /**
+   * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
+   */
+  function toUint(bool b) internal pure returns (uint256 u) {
+    assembly ("memory-safe") {
+      u := iszero(iszero(b))
+    }
+  }
 }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/ScaledBalanceTokenBase.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ScaledBalanceTokenBase.sol
index 1ad91cd..4d22caf 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/ScaledBalanceTokenBase.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/ScaledBalanceTokenBase.sol
@@ -1,7 +1,7 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
-import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
 import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
@@ -23,9 +23,10 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    MintableIncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    MintableIncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -60,14 +61,14 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    */
   function _mintScaled(address caller, address onBehalfOf, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidMintAmount());
 
     uint256 scaledBalance = super.balanceOf(onBehalfOf);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[onBehalfOf].additionalData);
 
     _userState[onBehalfOf].additionalData = index.toUint128();
 
-    _mint(onBehalfOf, amountScaled.toUint128());
+    _mint(onBehalfOf, amountScaled.toUint120());
 
     uint256 amountToMint = amount + balanceIncrease;
     emit Transfer(address(0), onBehalfOf, amountToMint);
@@ -84,17 +85,18 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param target The address that will receive the underlying, if any
    * @param amount The amount getting burned
    * @param index The variable debt index of the reserve
+   * @return `true` if the the new balance of the user is 0
    */
-  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal {
+  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidBurnAmount());
 
     uint256 scaledBalance = super.balanceOf(user);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[user].additionalData);
 
     _userState[user].additionalData = index.toUint128();
 
-    _burn(user, amountScaled.toUint128());
+    _burn(user, amountScaled.toUint120());
 
     if (balanceIncrease > amount) {
       uint256 amountToMint = balanceIncrease - amount;
@@ -105,40 +107,6 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
       emit Transfer(user, address(0), amountToBurn);
       emit Burn(user, target, amountToBurn, balanceIncrease, index);
     }
-  }
-
-  /**
-   * @notice Implements the basic logic to transfer scaled balance tokens between two users
-   * @dev It emits a mint event with the interest accrued per user
-   * @param sender The source address
-   * @param recipient The destination address
-   * @param amount The amount getting transferred
-   * @param index The next liquidity index of the reserve
-   */
-  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal {
-    uint256 senderScaledBalance = super.balanceOf(sender);
-    uint256 senderBalanceIncrease =
-      senderScaledBalance.rayMul(index) - senderScaledBalance.rayMul(_userState[sender].additionalData);
-
-    uint256 recipientScaledBalance = super.balanceOf(recipient);
-    uint256 recipientBalanceIncrease =
-      recipientScaledBalance.rayMul(index) - recipientScaledBalance.rayMul(_userState[recipient].additionalData);
-
-    _userState[sender].additionalData = index.toUint128();
-    _userState[recipient].additionalData = index.toUint128();
-
-    super._transfer(sender, recipient, amount.rayDiv(index).toUint128());
-
-    if (senderBalanceIncrease > 0) {
-      emit Transfer(address(0), sender, senderBalanceIncrease);
-      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);
-    }
-
-    if (sender != recipient && recipientBalanceIncrease > 0) {
-      emit Transfer(address(0), recipient, recipientBalanceIncrease);
-      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);
-    }
-
-    emit Transfer(sender, recipient, amount);
+    return scaledBalance - amountScaled == 0;
   }
 }
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/VariableDebtToken.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VariableDebtToken.sol
index c3c68d4..a8da992 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/VariableDebtToken.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VariableDebtToken.sol
@@ -1,13 +1,11 @@
 // SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+pragma solidity ^0.8.10;
 
 import {IERC20} from "../../dependencies/openzeppelin/contracts/IERC20.sol";
-import {SafeCast} from "../../dependencies/openzeppelin/contracts/SafeCast.sol";
-import {VersionedInitializable} from "../libraries/aave-upgradeability/VersionedInitializable.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {WadRayMath} from "../libraries/math/WadRayMath.sol";
 import {Errors} from "../libraries/helpers/Errors.sol";
 import {IPool} from "../../interfaces/IPool.sol";
-import {IAaveIncentivesController} from "../../interfaces/IAaveIncentivesController.sol";
 import {IInitializableDebtToken} from "../../interfaces/IInitializableDebtToken.sol";
 import {IVariableDebtToken} from "../../interfaces/IVariableDebtToken.sol";
 import {EIP712Base} from "./base/EIP712Base.sol";
@@ -21,19 +19,18 @@ import {ScaledBalanceTokenBase} from "./base/ScaledBalanceTokenBase.sol";
  * at variable rate mode
  * @dev Transfer and approve functionalities are disabled since its a non-transferable token
  */
-contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDebtToken {
+abstract contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDebtToken {
   using WadRayMath for uint256;
   using SafeCast for uint256;
 
-  uint256 public constant DEBT_TOKEN_REVISION = 0x2;
-
   /**
    * @dev Constructor.
    * @param pool The address of the Pool contract
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool)
+  constructor(IPool pool, address rewardsController)
     DebtTokenBase()
-    ScaledBalanceTokenBase(pool, "VARIABLE_DEBT_TOKEN_IMPL", "VARIABLE_DEBT_TOKEN_IMPL", 0)
+    ScaledBalanceTokenBase(pool, "VARIABLE_DEBT_TOKEN_IMPL", "VARIABLE_DEBT_TOKEN_IMPL", 0, rewardsController)
   {
     // Intentionally left blank
   }
@@ -42,37 +39,11 @@ contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDe
   function initialize(
     IPool initializingPool,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 debtTokenDecimals,
     string memory debtTokenName,
     string memory debtTokenSymbol,
     bytes calldata params
-  ) external override initializer {
-    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
-    _setName(debtTokenName);
-    _setSymbol(debtTokenSymbol);
-    _setDecimals(debtTokenDecimals);
-
-    _underlyingAsset = underlyingAsset;
-    _incentivesController = incentivesController;
-
-    _domainSeparator = _calculateDomainSeparator();
-
-    emit Initialized(
-      underlyingAsset,
-      address(POOL),
-      address(incentivesController),
-      debtTokenDecimals,
-      debtTokenName,
-      debtTokenSymbol,
-      params
-    );
-  }
-
-  /// @inheritdoc VersionedInitializable
-  function getRevision() internal pure virtual override returns (uint256) {
-    return DEBT_TOKEN_REVISION;
-  }
+  ) external virtual;
 
   /// @inheritdoc IERC20
   function balanceOf(address user) public view virtual override returns (uint256) {
@@ -91,18 +62,18 @@ contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDe
     virtual
     override
     onlyPool
-    returns (bool, uint256)
+    returns (uint256)
   {
     if (user != onBehalfOf) {
       _decreaseBorrowAllowance(onBehalfOf, user, amount);
     }
-    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());
+    _mintScaled(user, onBehalfOf, amount, index);
+    return scaledTotalSupply();
   }
 
   /// @inheritdoc IVariableDebtToken
-  function burn(address from, uint256 amount, uint256 index) external virtual override onlyPool returns (uint256) {
-    _burnScaled(from, address(0), amount, index);
-    return scaledTotalSupply();
+  function burn(address from, uint256 amount, uint256 index) external virtual override onlyPool returns (bool, uint256) {
+    return (_burnScaled(from, address(0), amount, index), scaledTotalSupply());
   }
 
   /// @inheritdoc IERC20
@@ -120,27 +91,27 @@ contract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDe
    * standard ERC20 functions for transfer and allowance.
    */
   function transfer(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   function allowance(address, address) external view virtual override returns (uint256) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   function approve(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   function transferFrom(address, address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   function increaseAllowance(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   function decreaseAllowance(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
+    revert Errors.OperationNotSupported();
   }
 
   /// @inheritdoc IVariableDebtToken
diff --git a/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VariableDebtTokenInstance.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VariableDebtTokenInstance.sol
new file mode 100644
index 0000000..61822f9
--- /dev/null
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VariableDebtTokenInstance.sol
@@ -0,0 +1,52 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.0;
+
+import {VersionedInitializable} from "../misc/aave-upgradeability/VersionedInitializable.sol";
+import {
+  VariableDebtToken, IPool, IInitializableDebtToken, Errors
+} from "../protocol/tokenization/VariableDebtToken.sol";
+
+/**
+ * @title Aave ERC20 VariableDebtToken Instance
+ * @author BGD Labs
+ * @notice Instance of the variable debt token for the Aave protocol
+ */
+contract VariableDebtTokenInstance is VariableDebtToken {
+  uint256 public constant DEBT_TOKEN_REVISION = 3;
+
+  constructor(IPool pool, address rewardsController) VariableDebtToken(pool, rewardsController) {}
+
+  /// @inheritdoc VersionedInitializable
+  function getRevision() internal pure virtual override returns (uint256) {
+    return DEBT_TOKEN_REVISION;
+  }
+
+  /// @inheritdoc IInitializableDebtToken
+  function initialize(
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 debtTokenDecimals,
+    string memory debtTokenName,
+    string memory debtTokenSymbol,
+    bytes calldata params
+  ) external override initializer {
+    require(initializingPool == POOL, Errors.PoolAddressesDoNotMatch());
+    _setName(debtTokenName);
+    _setSymbol(debtTokenSymbol);
+    _setDecimals(debtTokenDecimals);
+
+    _underlyingAsset = underlyingAsset;
+
+    _domainSeparator = _calculateDomainSeparator();
+
+    emit Initialized(
+      underlyingAsset,
+      address(POOL),
+      address(REWARDS_CONTROLLER),
+      debtTokenDecimals,
+      debtTokenName,
+      debtTokenSymbol,
+      params
+    );
+  }
+}
diff --git a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/VersionedInitializable.sol b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VersionedInitializable.sol
index e67fff0..97b36b7 100644
--- a/tmp/10_0x04a8D477eE202aDCE1682F5902e1160455205b12_flat/VersionedInitializable.sol
+++ b/tmp/10_0x1AdB659cA7eaA45e42dCD257d09b963C5cfBB36f_flat/VersionedInitializable.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 /**
  * @title VersionedInitializable
@@ -14,6 +14,15 @@ pragma solidity 0.8.10;
  * because this is not dealt with automatically as with constructors.
  */
 abstract contract VersionedInitializable {
+  /**
+   * @dev Initializes the implementation contract at the current revision.
+   * In practice this breaks further initialization of the implementation.
+   */
+  constructor() {
+    // break the initialize
+    lastInitializedRevision = getRevision();
+  }
+
   /**
    * @dev Indicates that the contract has been initialized.
    */
