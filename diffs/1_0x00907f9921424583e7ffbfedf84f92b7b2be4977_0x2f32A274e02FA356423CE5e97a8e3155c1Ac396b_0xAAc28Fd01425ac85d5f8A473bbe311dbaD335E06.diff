diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AToken.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AToken.sol
new file mode 100644
index 0000000..f5e5fd0
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AToken.sol
@@ -0,0 +1,238 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.10;
+
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
+
+import {IERC20} from "../../dependencies/openzeppelin/contracts/IERC20.sol";
+import {GPv2SafeERC20} from "../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
+import {VersionedInitializable} from "../../misc/aave-upgradeability/VersionedInitializable.sol";
+import {Errors} from "../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../libraries/math/WadRayMath.sol";
+import {IPool} from "../../interfaces/IPool.sol";
+import {IAToken} from "../../interfaces/IAToken.sol";
+import {IAaveIncentivesController} from "../../interfaces/IAaveIncentivesController.sol";
+import {IInitializableAToken} from "../../interfaces/IInitializableAToken.sol";
+import {ScaledBalanceTokenBase} from "./base/ScaledBalanceTokenBase.sol";
+import {IncentivizedERC20} from "./base/IncentivizedERC20.sol";
+import {EIP712Base} from "./base/EIP712Base.sol";
+
+/**
+ * @title Aave ERC20 AToken
+ * @author Aave
+ * @notice Implementation of the interest bearing token for the Aave protocol
+ */
+abstract contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IAToken {
+  using WadRayMath for uint256;
+  using SafeCast for uint256;
+  using GPv2SafeERC20 for IERC20;
+
+  bytes32 public constant PERMIT_TYPEHASH =
+    keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
+
+  address public immutable TREASURY;
+
+  address internal _deprecated_treasury;
+  address internal _underlyingAsset;
+
+  /**
+   * @dev Constructor.
+   * @param pool The address of the Pool contract
+   * @param rewardsController The address of the rewards controller contract
+   * @param treasury The address of the treasury. This is where accrued interest is sent.
+   */
+  constructor(IPool pool, address rewardsController, address treasury)
+    ScaledBalanceTokenBase(pool, "ATOKEN_IMPL", "ATOKEN_IMPL", 0, rewardsController)
+    EIP712Base()
+  {
+    require(treasury != address(0), Errors.ZeroAddressNotValid());
+    TREASURY = treasury;
+  }
+
+  /// @inheritdoc IInitializableAToken
+  function initialize(
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 aTokenDecimals,
+    string calldata aTokenName,
+    string calldata aTokenSymbol,
+    bytes calldata params
+  ) public virtual;
+
+  /// @inheritdoc IAToken
+  function mint(address caller, address onBehalfOf, uint256 amount, uint256 index)
+    external
+    virtual
+    override
+    onlyPool
+    returns (bool)
+  {
+    return _mintScaled(caller, onBehalfOf, amount, index);
+  }
+
+  /// @inheritdoc IAToken
+  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index)
+    external
+    virtual
+    override
+    onlyPool
+  {
+    _burnScaled(from, receiverOfUnderlying, amount, index);
+    if (receiverOfUnderlying != address(this)) {
+      IERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);
+    }
+  }
+
+  /// @inheritdoc IAToken
+  function mintToTreasury(uint256 amount, uint256 index) external virtual override onlyPool {
+    if (amount == 0) {
+      return;
+    }
+    _mintScaled(address(POOL), TREASURY, amount, index);
+  }
+
+  /// @inheritdoc IAToken
+  function transferOnLiquidation(address from, address to, uint256 amount, uint256 index)
+    external
+    virtual
+    override
+    onlyPool
+  {
+    _transfer(from, to, amount, index);
+  }
+
+  /// @inheritdoc IERC20
+  function balanceOf(address user) public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
+    return super.balanceOf(user).rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));
+  }
+
+  /// @inheritdoc IERC20
+  function totalSupply() public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
+    uint256 currentSupplyScaled = super.totalSupply();
+
+    if (currentSupplyScaled == 0) {
+      return 0;
+    }
+
+    return currentSupplyScaled.rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));
+  }
+
+  /// @inheritdoc IAToken
+  function RESERVE_TREASURY_ADDRESS() external view override returns (address) {
+    return TREASURY;
+  }
+
+  /// @inheritdoc IAToken
+  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
+    return _underlyingAsset;
+  }
+
+  /// @inheritdoc IAToken
+  function transferUnderlyingTo(address target, uint256 amount) external virtual override onlyPool {
+    IERC20(_underlyingAsset).safeTransfer(target, amount);
+  }
+
+  /// @inheritdoc IAToken
+  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
+    external
+    override
+  {
+    require(owner != address(0), Errors.ZeroAddressNotValid());
+    //solium-disable-next-line
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
+    uint256 currentValidNonce = _nonces[owner];
+    bytes32 digest = keccak256(
+      abi.encodePacked(
+        "\x19\x01",
+        DOMAIN_SEPARATOR(),
+        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))
+      )
+    );
+    require(owner == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
+    _nonces[owner] = currentValidNonce + 1;
+    _approve(owner, spender, value);
+  }
+
+  /**
+   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()
+   * @param from The source address
+   * @param to The destination address
+   * @param amount The amount getting transferred
+   */
+  function _transfer(address from, address to, uint120 amount) internal virtual override {
+    address underlyingAsset = _underlyingAsset;
+
+    uint256 index = POOL.getReserveNormalizedIncome(underlyingAsset);
+
+    uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);
+    uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);
+
+    _transfer(from, to, amount, index);
+
+    POOL.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);
+  }
+
+  /**
+   * @notice Implements the basic logic to transfer scaled balance tokens between two users
+   * @dev It emits a mint event with the interest accrued per user
+   * @param sender The source address
+   * @param recipient The destination address
+   * @param amount The amount getting transferred
+   * @param index The next liquidity index of the reserve
+   */
+  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal virtual {
+    uint256 senderScaledBalance = super.balanceOf(sender);
+    uint256 senderBalanceIncrease =
+      senderScaledBalance.rayMul(index) - senderScaledBalance.rayMul(_userState[sender].additionalData);
+
+    uint256 recipientScaledBalance = super.balanceOf(recipient);
+    uint256 recipientBalanceIncrease =
+      recipientScaledBalance.rayMul(index) - recipientScaledBalance.rayMul(_userState[recipient].additionalData);
+
+    _userState[sender].additionalData = index.toUint128();
+    _userState[recipient].additionalData = index.toUint128();
+    uint120 scaledAmount = amount.rayDiv(index).toUint120();
+
+    super._transfer(sender, recipient, scaledAmount);
+
+    if (senderBalanceIncrease > 0) {
+      emit Transfer(address(0), sender, senderBalanceIncrease);
+      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);
+    }
+
+    if (sender != recipient && recipientBalanceIncrease > 0) {
+      emit Transfer(address(0), recipient, recipientBalanceIncrease);
+      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);
+    }
+
+    emit Transfer(sender, recipient, amount);
+    emit BalanceTransfer(sender, recipient, scaledAmount, index);
+  }
+
+  /**
+   * @dev Overrides the base function to fully implement IAToken
+   * @dev see `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation
+   */
+  function DOMAIN_SEPARATOR() public view override(IAToken, EIP712Base) returns (bytes32) {
+    return super.DOMAIN_SEPARATOR();
+  }
+
+  /**
+   * @dev Overrides the base function to fully implement IAToken
+   * @dev see `EIP712Base.nonces()` for more detailed documentation
+   */
+  function nonces(address owner) public view override(IAToken, EIP712Base) returns (uint256) {
+    return super.nonces(owner);
+  }
+
+  /// @inheritdoc EIP712Base
+  function _EIP712BaseId() internal view override returns (string memory) {
+    return name();
+  }
+
+  /// @inheritdoc IAToken
+  function rescueTokens(address token, address to, uint256 amount) external override onlyPoolAdmin {
+    require(token != _underlyingAsset, Errors.UnderlyingCannotBeRescued());
+    IERC20(token).safeTransfer(to, amount);
+  }
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenInstance.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenInstance.sol
new file mode 100644
index 0000000..4f540a8
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenInstance.sol
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.0;
+
+import {IPool} from "../interfaces/IPool.sol";
+import {IInitializableAToken} from "../interfaces/IInitializableAToken.sol";
+
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
+
+import {VersionedInitializable} from "../misc/aave-upgradeability/VersionedInitializable.sol";
+
+import {AToken} from "../protocol/tokenization/AToken.sol";
+
+/**
+ * @title Aave ERC20 AToken Instance
+ * @author BGD Labs
+ * @notice Instance of the interest bearing token for the Aave protocol
+ */
+contract ATokenInstance is AToken {
+  uint256 public constant ATOKEN_REVISION = 3;
+
+  constructor(IPool pool, address rewardsController, address treasury) AToken(pool, rewardsController, treasury) {}
+
+  /// @inheritdoc VersionedInitializable
+  function getRevision() internal pure virtual override returns (uint256) {
+    return ATOKEN_REVISION;
+  }
+
+  /// @inheritdoc IInitializableAToken
+  function initialize(
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 aTokenDecimals,
+    string calldata aTokenName,
+    string calldata aTokenSymbol,
+    bytes calldata params
+  ) public virtual override initializer {
+    require(initializingPool == POOL, Errors.PoolAddressesDoNotMatch());
+    _setName(aTokenName);
+    _setSymbol(aTokenSymbol);
+    _setDecimals(aTokenDecimals);
+
+    _underlyingAsset = underlyingAsset;
+
+    _domainSeparator = _calculateDomainSeparator();
+
+    emit Initialized(
+      underlyingAsset,
+      address(POOL),
+      address(TREASURY),
+      address(REWARDS_CONTROLLER),
+      aTokenDecimals,
+      aTokenName,
+      aTokenSymbol,
+      params
+    );
+  }
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenMainnetInstanceGHO.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenMainnetInstanceGHO.sol
new file mode 100644
index 0000000..7f99566
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ATokenMainnetInstanceGHO.sol
@@ -0,0 +1,72 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.0;
+
+import {IPool} from "aave-v3-origin/contracts/interfaces/IPool.sol";
+import {ATokenInstance, IInitializableAToken, Errors} from "aave-v3-origin/contracts/instances/ATokenInstance.sol";
+
+import {AaveV3EthereumAssets} from "aave-address-book/AaveV3Ethereum.sol";
+
+import {IGhoToken} from "gho-direct-minter/interfaces/IGhoToken.sol";
+
+import {IATokenMainnetInstanceGHO} from "./interfaces/IATokenMainnetInstanceGHO.sol";
+
+contract ATokenMainnetInstanceGHO is ATokenInstance, IATokenMainnetInstanceGHO {
+  // These are additional storage variables that were present in the v3.3 AToken implementation specific to the GHO aToken.
+  // However, such variables do not exist in other AToken implementations (for other assets) in either v3.3 or v3.4.
+  // Therefore, these slots need to be cleaned (zeroed out) in case future AToken versions
+  // require the addition of new storage variables at these specific slots.
+  // If these slots are not cleaned, the GHO AToken contract would retain non-zero values
+  // at these storage locations, potentially conflicting with new variables introduced in future standard AToken upgrades.
+  address private _deprecated_ghoVariableDebtToken;
+  address private _deprecated_ghoTreasury;
+
+  constructor(IPool pool, address rewardsController, address treasury)
+    ATokenInstance(pool, rewardsController, treasury)
+  {}
+
+  /// @inheritdoc IInitializableAToken
+  function initialize(
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 aTokenDecimals,
+    string calldata aTokenName,
+    string calldata aTokenSymbol,
+    bytes calldata params
+  ) public virtual override initializer {
+    // @note This is the standard initialization function,
+    //       similar to `ATokenInstance.initialize`,
+    //       but it includes additional logic to delete the deprecated storage variables specific to the old GHO AToken.
+
+    delete _deprecated_ghoVariableDebtToken;
+    delete _deprecated_ghoTreasury;
+
+    require(initializingPool == POOL, Errors.PoolAddressesDoNotMatch());
+    _setName(aTokenName);
+    _setSymbol(aTokenSymbol);
+    _setDecimals(aTokenDecimals);
+
+    _underlyingAsset = underlyingAsset;
+
+    _domainSeparator = _calculateDomainSeparator();
+
+    emit Initialized(
+      underlyingAsset,
+      address(POOL),
+      address(TREASURY),
+      address(REWARDS_CONTROLLER),
+      aTokenDecimals,
+      aTokenName,
+      aTokenSymbol,
+      params
+    );
+  }
+
+  /// @inheritdoc IATokenMainnetInstanceGHO
+  function resolveFacilitator(uint256 amount) external override onlyPoolAdmin {
+    // @note This action is necessary to remove this AToken contract from the GHO facilitator list.
+    //       To achieve this, a facilitator must have its bucket level reduced to 0.
+    //       The facilitator bucket (both capacity and level) previously associated with this AToken
+    //       will be effectively transferred to a new `GhoDirectMinter` contract (which becomes the new facilitator).
+    IGhoToken(AaveV3EthereumAssets.GHO_UNDERLYING).burn(amount);
+  }
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3.sol
new file mode 100644
index 0000000..6d440d1
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3.sol
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.6.0;
+
+import {DataTypes} from "aave-v3-origin/contracts/protocol/libraries/types/DataTypes.sol";
+import {Errors} from "aave-v3-origin/contracts/protocol/libraries/helpers/Errors.sol";
+import {ConfiguratorInputTypes} from "aave-v3-origin/contracts/protocol/libraries/types/ConfiguratorInputTypes.sol";
+import {IPoolAddressesProvider} from "aave-v3-origin/contracts/interfaces/IPoolAddressesProvider.sol";
+import {IAToken} from "aave-v3-origin/contracts/interfaces/IAToken.sol";
+import {IPool} from "aave-v3-origin/contracts/interfaces/IPool.sol";
+import {IPoolConfigurator} from "aave-v3-origin/contracts/interfaces/IPoolConfigurator.sol";
+import {IPriceOracleGetter} from "aave-v3-origin/contracts/interfaces/IPriceOracleGetter.sol";
+import {IAaveOracle} from "aave-v3-origin/contracts/interfaces/IAaveOracle.sol";
+import {IACLManager as BasicIACLManager} from "aave-v3-origin/contracts/interfaces/IACLManager.sol";
+import {IPoolDataProvider} from "aave-v3-origin/contracts/interfaces/IPoolDataProvider.sol";
+import {IDefaultInterestRateStrategyV2} from "aave-v3-origin/contracts/interfaces/IDefaultInterestRateStrategyV2.sol";
+import {IReserveInterestRateStrategy} from "aave-v3-origin/contracts/interfaces/IReserveInterestRateStrategy.sol";
+import {IPoolDataProvider as IAaveProtocolDataProvider} from "aave-v3-origin/contracts/interfaces/IPoolDataProvider.sol";
+import {AggregatorInterface} from "aave-v3-origin/contracts/dependencies/chainlink/AggregatorInterface.sol";
+import {ICollector} from "aave-v3-origin/contracts/treasury/ICollector.sol";
+
+interface IACLManager is BasicIACLManager {
+  function hasRole(bytes32 role, address account) external view returns (bool);
+
+  function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);
+
+  function renounceRole(bytes32 role, address account) external;
+
+  function getRoleAdmin(bytes32 role) external view returns (bytes32);
+
+  function grantRole(bytes32 role, address account) external;
+
+  function revokeRole(bytes32 role, address account) external;
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3Ethereum.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3Ethereum.sol
new file mode 100644
index 0000000..73cc0ec
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AaveV3Ethereum.sol
@@ -0,0 +1,1099 @@
+// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.6.0;
+
+import {
+  IPoolAddressesProvider,
+  IPool,
+  IPoolConfigurator,
+  IAaveOracle,
+  IPoolDataProvider,
+  IACLManager,
+  ICollector
+} from "./AaveV3.sol";
+
+library AaveV3Ethereum {
+  // https://etherscan.io/address/0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e
+  IPoolAddressesProvider internal constant POOL_ADDRESSES_PROVIDER =
+    IPoolAddressesProvider(0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e);
+
+  // https://etherscan.io/address/0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2
+  IPool internal constant POOL = IPool(0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2);
+
+  // https://etherscan.io/address/0x64b761D848206f447Fe2dd461b0c635Ec39EbB27
+  IPoolConfigurator internal constant POOL_CONFIGURATOR = IPoolConfigurator(0x64b761D848206f447Fe2dd461b0c635Ec39EbB27);
+
+  // https://etherscan.io/address/0x54586bE62E3c3580375aE3723C145253060Ca0C2
+  IAaveOracle internal constant ORACLE = IAaveOracle(0x54586bE62E3c3580375aE3723C145253060Ca0C2);
+
+  // https://etherscan.io/address/0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A
+  address internal constant ACL_ADMIN = 0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A;
+
+  // https://etherscan.io/address/0xc2aaCf6553D20d1e9d78E365AAba8032af9c85b0
+  IACLManager internal constant ACL_MANAGER = IACLManager(0xc2aaCf6553D20d1e9d78E365AAba8032af9c85b0);
+
+  // https://etherscan.io/address/0x497a1994c46d4f6C864904A9f1fac6328Cb7C8a6
+  IPoolDataProvider internal constant AAVE_PROTOCOL_DATA_PROVIDER =
+    IPoolDataProvider(0x497a1994c46d4f6C864904A9f1fac6328Cb7C8a6);
+
+  // https://etherscan.io/address/0x9aEb8aAA1cA38634Aa8C0c8933E7fB4D61091327
+  address internal constant POOL_IMPL = 0x9aEb8aAA1cA38634Aa8C0c8933E7fB4D61091327;
+
+  // https://etherscan.io/address/0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b
+  address internal constant POOL_CONFIGURATOR_IMPL = 0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b;
+
+  // https://etherscan.io/address/0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb
+  address internal constant DEFAULT_INCENTIVES_CONTROLLER = 0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb;
+
+  // https://etherscan.io/address/0x223d844fc4B006D67c0cDbd39371A9F73f69d974
+  address internal constant EMISSION_MANAGER = 0x223d844fc4B006D67c0cDbd39371A9F73f69d974;
+
+  // https://etherscan.io/address/0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c
+  ICollector internal constant COLLECTOR = ICollector(0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c);
+
+  // https://etherscan.io/address/0x7EfFD7b47Bfd17e52fB7559d3f924201b9DbfF3d
+  address internal constant DEFAULT_A_TOKEN_IMPL_REV_1 = 0x7EfFD7b47Bfd17e52fB7559d3f924201b9DbfF3d;
+
+  // https://etherscan.io/address/0xaC725CB59D16C81061BDeA61041a8A5e73DA9EC6
+  address internal constant DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1 = 0xaC725CB59D16C81061BDeA61041a8A5e73DA9EC6;
+
+  // https://etherscan.io/address/0x82dcCF206Ae2Ab46E2099e663F70DeE77caE7778
+  address internal constant CAPS_PLUS_RISK_STEWARD = 0x82dcCF206Ae2Ab46E2099e663F70DeE77caE7778;
+
+  // https://etherscan.io/address/0x46Ab47bA01EF627ce47F2ED61C9482794a6109c4
+  address internal constant RISK_STEWARD = 0x46Ab47bA01EF627ce47F2ED61C9482794a6109c4;
+
+  // https://etherscan.io/address/0x2eE68ACb6A1319de1b49DC139894644E424fefD6
+  address internal constant FREEZING_STEWARD = 0x2eE68ACb6A1319de1b49DC139894644E424fefD6;
+
+  // https://etherscan.io/address/0xd7852E139a7097E119623de0751AE53a61efb442
+  address internal constant DEBT_SWAP_ADAPTER = 0xd7852E139a7097E119623de0751AE53a61efb442;
+
+  // https://etherscan.io/address/0x21714092D90c7265F52fdfDae068EC11a23C6248
+  address internal constant DELEGATION_AWARE_A_TOKEN_IMPL_REV_1 = 0x21714092D90c7265F52fdfDae068EC11a23C6248;
+
+  // https://etherscan.io/address/0xA8e351C7Ab1b75A2134A418701919c462932DF79
+  address internal constant CONFIG_ENGINE = 0xA8e351C7Ab1b75A2134A418701919c462932DF79;
+
+  // https://etherscan.io/address/0xbaA999AC55EAce41CcAE355c77809e68Bb345170
+  address internal constant POOL_ADDRESSES_PROVIDER_REGISTRY = 0xbaA999AC55EAce41CcAE355c77809e68Bb345170;
+
+  // https://etherscan.io/address/0x35bb522b102326ea3F1141661dF4626C87000e3E
+  address internal constant REPAY_WITH_COLLATERAL_ADAPTER = 0x35bb522b102326ea3F1141661dF4626C87000e3E;
+
+  // https://etherscan.io/address/0x411D79b8cC43384FDE66CaBf9b6a17180c842511
+  address internal constant LEGACY_STATIC_A_TOKEN_FACTORY = 0x411D79b8cC43384FDE66CaBf9b6a17180c842511;
+
+  // https://etherscan.io/address/0xADC0A53095A0af87F3aa29FE0715B5c28016364e
+  address internal constant SWAP_COLLATERAL_ADAPTER = 0xADC0A53095A0af87F3aa29FE0715B5c28016364e;
+
+  // https://etherscan.io/address/0x379c1EDD1A41218bdbFf960a9d5AD2818Bf61aE8
+  address internal constant UI_GHO_DATA_PROVIDER = 0x379c1EDD1A41218bdbFf960a9d5AD2818Bf61aE8;
+
+  // https://etherscan.io/address/0xe3dFf4052F0bF6134ACb73bEaE8fe2317d71F047
+  address internal constant UI_INCENTIVE_DATA_PROVIDER = 0xe3dFf4052F0bF6134ACb73bEaE8fe2317d71F047;
+
+  // https://etherscan.io/address/0x3F78BBD206e4D3c504Eb854232EdA7e47E9Fd8FC
+  address internal constant UI_POOL_DATA_PROVIDER = 0x3F78BBD206e4D3c504Eb854232EdA7e47E9Fd8FC;
+
+  // https://etherscan.io/address/0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2
+  address internal constant WALLET_BALANCE_PROVIDER = 0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2;
+
+  // https://etherscan.io/address/0xd01607c3C5eCABa394D8be377a08590149325722
+  address internal constant WETH_GATEWAY = 0xd01607c3C5eCABa394D8be377a08590149325722;
+
+  // https://etherscan.io/address/0x78F8Bd884C3D738B74B420540659c82f392820e0
+  address internal constant WITHDRAW_SWAP_ADAPTER = 0x78F8Bd884C3D738B74B420540659c82f392820e0;
+
+  // https://etherscan.io/address/0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034
+  address internal constant SAVINGS_DAI_TOKEN_WRAPPER = 0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034;
+
+  // https://etherscan.io/address/0xCb0b5cA20b6C5C02A9A3B2cE433650768eD2974F
+  address internal constant STATA_FACTORY = 0xCb0b5cA20b6C5C02A9A3B2cE433650768eD2974F;
+
+  // https://etherscan.io/address/0x31a0Ba3C2242a095dBF58A7C53751eCBd27dBA9b
+  address internal constant DUST_BIN = 0x31a0Ba3C2242a095dBF58A7C53751eCBd27dBA9b;
+
+  // https://etherscan.io/address/0xf00E2de0E78DFf055A92AD4719a179CE275b6Ef7
+  address internal constant CLINIC_STEWARD = 0xf00E2de0E78DFf055A92AD4719a179CE275b6Ef7;
+
+  // https://etherscan.io/address/0x8b493f416F5F7933cC146b1899c069F2361cad60
+  address internal constant SVR_STEWARD = 0x8b493f416F5F7933cC146b1899c069F2361cad60;
+
+  // https://etherscan.io/address/0x22aC12a6937BBBC0a301AF9154d08EaD95673122
+  address internal constant POOL_EXPOSURE_STEWARD = 0x22aC12a6937BBBC0a301AF9154d08EaD95673122;
+
+  // https://etherscan.io/address/0x83ab600cE8a61b43e1757b89C0589928f765c1C4
+  address internal constant EDGE_INJECTOR_PENDLE_EMODE = 0x83ab600cE8a61b43e1757b89C0589928f765c1C4;
+}
+
+library AaveV3EthereumAssets {
+  // https://etherscan.io/address/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
+  address internal constant WETH_UNDERLYING = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
+
+  uint8 internal constant WETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8
+  address internal constant WETH_A_TOKEN = 0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8;
+
+  // https://etherscan.io/address/0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE
+  address internal constant WETH_V_TOKEN = 0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE;
+
+  // https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419
+  address internal constant WETH_ORACLE = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant WETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x252231882FB38481497f3C767469106297c8d93b
+  address internal constant WETH_STATIC_A_TOKEN = 0x252231882FB38481497f3C767469106297c8d93b;
+
+  // https://etherscan.io/address/0x0bfc9d54Fc184518A81162F8fB99c2eACa081202
+  address internal constant WETH_STATA_TOKEN = 0x0bfc9d54Fc184518A81162F8fB99c2eACa081202;
+
+  // https://etherscan.io/address/0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0
+  address internal constant wstETH_UNDERLYING = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;
+
+  uint8 internal constant wstETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x0B925eD163218f6662a35e0f0371Ac234f9E9371
+  address internal constant wstETH_A_TOKEN = 0x0B925eD163218f6662a35e0f0371Ac234f9E9371;
+
+  // https://etherscan.io/address/0xC96113eED8cAB59cD8A66813bCB0cEb29F06D2e4
+  address internal constant wstETH_V_TOKEN = 0xC96113eED8cAB59cD8A66813bCB0cEb29F06D2e4;
+
+  // https://etherscan.io/address/0xB4aB0c94159bc2d8C133946E7241368fc2F2a010
+  address internal constant wstETH_ORACLE = 0xB4aB0c94159bc2d8C133946E7241368fc2F2a010;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant wstETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x322AA5F5Be95644d6c36544B6c5061F072D16DF5
+  address internal constant wstETH_STATIC_A_TOKEN = 0x322AA5F5Be95644d6c36544B6c5061F072D16DF5;
+
+  // https://etherscan.io/address/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599
+  address internal constant WBTC_UNDERLYING = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;
+
+  uint8 internal constant WBTC_DECIMALS = 8;
+
+  // https://etherscan.io/address/0x5Ee5bf7ae06D1Be5997A1A72006FE6C607eC6DE8
+  address internal constant WBTC_A_TOKEN = 0x5Ee5bf7ae06D1Be5997A1A72006FE6C607eC6DE8;
+
+  // https://etherscan.io/address/0x40aAbEf1aa8f0eEc637E0E7d92fbfFB2F26A8b7B
+  address internal constant WBTC_V_TOKEN = 0x40aAbEf1aa8f0eEc637E0E7d92fbfFB2F26A8b7B;
+
+  // https://etherscan.io/address/0xDaa4B74C6bAc4e25188e64ebc68DB5050b690cAc
+  address internal constant WBTC_ORACLE = 0xDaa4B74C6bAc4e25188e64ebc68DB5050b690cAc;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant WBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xB07E357cc262E92eee03D8B81464D596B258eA7a
+  address internal constant WBTC_STATIC_A_TOKEN = 0xB07E357cc262E92eee03D8B81464D596B258eA7a;
+
+  // https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
+  address internal constant USDC_UNDERLYING = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
+
+  uint8 internal constant USDC_DECIMALS = 6;
+
+  // https://etherscan.io/address/0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c
+  address internal constant USDC_A_TOKEN = 0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c;
+
+  // https://etherscan.io/address/0x72E95b8931767C79bA4EeE721354d6E99a61D004
+  address internal constant USDC_V_TOKEN = 0x72E95b8931767C79bA4EeE721354d6E99a61D004;
+
+  // https://etherscan.io/address/0xB6557F02F0a5dA7b9D3C2d979cc19e00e756F6dA
+  address internal constant USDC_ORACLE = 0xB6557F02F0a5dA7b9D3C2d979cc19e00e756F6dA;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant USDC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x73edDFa87C71ADdC275c2b9890f5c3a8480bC9E6
+  address internal constant USDC_STATIC_A_TOKEN = 0x73edDFa87C71ADdC275c2b9890f5c3a8480bC9E6;
+
+  // https://etherscan.io/address/0xD4fa2D31b7968E448877f69A96DE69f5de8cD23E
+  address internal constant USDC_STATA_TOKEN = 0xD4fa2D31b7968E448877f69A96DE69f5de8cD23E;
+
+  // https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F
+  address internal constant DAI_UNDERLYING = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
+
+  uint8 internal constant DAI_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x018008bfb33d285247A21d44E50697654f754e63
+  address internal constant DAI_A_TOKEN = 0x018008bfb33d285247A21d44E50697654f754e63;
+
+  // https://etherscan.io/address/0xcF8d0c70c850859266f5C338b38F9D663181C314
+  address internal constant DAI_V_TOKEN = 0xcF8d0c70c850859266f5C338b38F9D663181C314;
+
+  // https://etherscan.io/address/0x5c66322CA59bB61e867B28195576DbD8dA4b08dE
+  address internal constant DAI_ORACLE = 0x5c66322CA59bB61e867B28195576DbD8dA4b08dE;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant DAI_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xaf270C38fF895EA3f95Ed488CEACe2386F038249
+  address internal constant DAI_STATIC_A_TOKEN = 0xaf270C38fF895EA3f95Ed488CEACe2386F038249;
+
+  // https://etherscan.io/address/0x5caF5a86f39073637Ac7c8A7b5290871de80cb9b
+  address internal constant DAI_STATA_TOKEN = 0x5caF5a86f39073637Ac7c8A7b5290871de80cb9b;
+
+  // https://etherscan.io/address/0x514910771AF9Ca656af840dff83E8264EcF986CA
+  address internal constant LINK_UNDERLYING = 0x514910771AF9Ca656af840dff83E8264EcF986CA;
+
+  uint8 internal constant LINK_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x5E8C8A7243651DB1384C0dDfDbE39761E8e7E51a
+  address internal constant LINK_A_TOKEN = 0x5E8C8A7243651DB1384C0dDfDbE39761E8e7E51a;
+
+  // https://etherscan.io/address/0x4228F8895C7dDA20227F6a5c6751b8Ebf19a6ba8
+  address internal constant LINK_V_TOKEN = 0x4228F8895C7dDA20227F6a5c6751b8Ebf19a6ba8;
+
+  // https://etherscan.io/address/0xC7e9b623ed51F033b32AE7f1282b1AD62C28C183
+  address internal constant LINK_ORACLE = 0xC7e9b623ed51F033b32AE7f1282b1AD62C28C183;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant LINK_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x57bd8C73838d1781b4f6E0d5Cf89eb676488d3df
+  address internal constant LINK_STATIC_A_TOKEN = 0x57bd8C73838d1781b4f6E0d5Cf89eb676488d3df;
+
+  // https://etherscan.io/address/0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9
+  address internal constant AAVE_UNDERLYING = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;
+
+  uint8 internal constant AAVE_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9
+  address internal constant AAVE_A_TOKEN = 0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9;
+
+  // https://etherscan.io/address/0xBae535520Abd9f8C85E58929e0006A2c8B372F74
+  address internal constant AAVE_V_TOKEN = 0xBae535520Abd9f8C85E58929e0006A2c8B372F74;
+
+  // https://etherscan.io/address/0xF02C1e2A3B77c1cacC72f72B44f7d0a4c62e4a85
+  address internal constant AAVE_ORACLE = 0xF02C1e2A3B77c1cacC72f72B44f7d0a4c62e4a85;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant AAVE_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xFEB859A50f92C6D5ad7C9eF7C2c060D164B3280f
+  address internal constant AAVE_STATIC_A_TOKEN = 0xFEB859A50f92C6D5ad7C9eF7C2c060D164B3280f;
+
+  // https://etherscan.io/address/0xBe9895146f7AF43049ca1c1AE358B0541Ea49704
+  address internal constant cbETH_UNDERLYING = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704;
+
+  uint8 internal constant cbETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x977b6fc5dE62598B08C85AC8Cf2b745874E8b78c
+  address internal constant cbETH_A_TOKEN = 0x977b6fc5dE62598B08C85AC8Cf2b745874E8b78c;
+
+  // https://etherscan.io/address/0x0c91bcA95b5FE69164cE583A2ec9429A569798Ed
+  address internal constant cbETH_V_TOKEN = 0x0c91bcA95b5FE69164cE583A2ec9429A569798Ed;
+
+  // https://etherscan.io/address/0x6243d2F41b4ec944F731f647589E28d9745a2674
+  address internal constant cbETH_ORACLE = 0x6243d2F41b4ec944F731f647589E28d9745a2674;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant cbETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xe2a6863C8f043457B497667Ef3c43073e2D69089
+  address internal constant cbETH_STATIC_A_TOKEN = 0xe2a6863C8f043457B497667Ef3c43073e2D69089;
+
+  // https://etherscan.io/address/0xdAC17F958D2ee523a2206206994597C13D831ec7
+  address internal constant USDT_UNDERLYING = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
+
+  uint8 internal constant USDT_DECIMALS = 6;
+
+  // https://etherscan.io/address/0x23878914EFE38d27C4D67Ab83ed1b93A74D4086a
+  address internal constant USDT_A_TOKEN = 0x23878914EFE38d27C4D67Ab83ed1b93A74D4086a;
+
+  // https://etherscan.io/address/0x6df1C1E379bC5a00a7b4C6e67A203333772f45A8
+  address internal constant USDT_V_TOKEN = 0x6df1C1E379bC5a00a7b4C6e67A203333772f45A8;
+
+  // https://etherscan.io/address/0x260326c220E469358846b187eE53328303Efe19C
+  address internal constant USDT_ORACLE = 0x260326c220E469358846b187eE53328303Efe19C;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant USDT_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x862c57d48becB45583AEbA3f489696D22466Ca1b
+  address internal constant USDT_STATIC_A_TOKEN = 0x862c57d48becB45583AEbA3f489696D22466Ca1b;
+
+  // https://etherscan.io/address/0x7Bc3485026Ac48b6cf9BaF0A377477Fff5703Af8
+  address internal constant USDT_STATA_TOKEN = 0x7Bc3485026Ac48b6cf9BaF0A377477Fff5703Af8;
+
+  // https://etherscan.io/address/0xae78736Cd615f374D3085123A210448E74Fc6393
+  address internal constant rETH_UNDERLYING = 0xae78736Cd615f374D3085123A210448E74Fc6393;
+
+  uint8 internal constant rETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xCc9EE9483f662091a1de4795249E24aC0aC2630f
+  address internal constant rETH_A_TOKEN = 0xCc9EE9483f662091a1de4795249E24aC0aC2630f;
+
+  // https://etherscan.io/address/0xae8593DD575FE29A9745056aA91C4b746eee62C8
+  address internal constant rETH_V_TOKEN = 0xae8593DD575FE29A9745056aA91C4b746eee62C8;
+
+  // https://etherscan.io/address/0x5AE8365D0a30D67145f0c55A08760C250559dB64
+  address internal constant rETH_ORACLE = 0x5AE8365D0a30D67145f0c55A08760C250559dB64;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant rETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x867Cf025B5dA438c4e215c60B59bBB3aFe896Fda
+  address internal constant rETH_STATIC_A_TOKEN = 0x867Cf025B5dA438c4e215c60B59bBB3aFe896Fda;
+
+  // https://etherscan.io/address/0x5f98805A4E8be255a32880FDeC7F6728C6568bA0
+  address internal constant LUSD_UNDERLYING = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;
+
+  uint8 internal constant LUSD_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x3Fe6a295459FAe07DF8A0ceCC36F37160FE86AA9
+  address internal constant LUSD_A_TOKEN = 0x3Fe6a295459FAe07DF8A0ceCC36F37160FE86AA9;
+
+  // https://etherscan.io/address/0x33652e48e4B74D18520f11BfE58Edd2ED2cEc5A2
+  address internal constant LUSD_V_TOKEN = 0x33652e48e4B74D18520f11BfE58Edd2ED2cEc5A2;
+
+  // https://etherscan.io/address/0xEbb721daf3DA9f1b3dcEc590cDf648137172d7CB
+  address internal constant LUSD_ORACLE = 0xEbb721daf3DA9f1b3dcEc590cDf648137172d7CB;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant LUSD_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xDBf5E36569798D1E39eE9d7B1c61A7409a74F23A
+  address internal constant LUSD_STATIC_A_TOKEN = 0xDBf5E36569798D1E39eE9d7B1c61A7409a74F23A;
+
+  // https://etherscan.io/address/0xD533a949740bb3306d119CC777fa900bA034cd52
+  address internal constant CRV_UNDERLYING = 0xD533a949740bb3306d119CC777fa900bA034cd52;
+
+  uint8 internal constant CRV_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x7B95Ec873268a6BFC6427e7a28e396Db9D0ebc65
+  address internal constant CRV_A_TOKEN = 0x7B95Ec873268a6BFC6427e7a28e396Db9D0ebc65;
+
+  // https://etherscan.io/address/0x1b7D3F4b3c032a5AE656e30eeA4e8E1Ba376068F
+  address internal constant CRV_V_TOKEN = 0x1b7D3F4b3c032a5AE656e30eeA4e8E1Ba376068F;
+
+  // https://etherscan.io/address/0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f
+  address internal constant CRV_ORACLE = 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant CRV_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x149EE12310D499F701B6A5714eDAd2C832008fd2
+  address internal constant CRV_STATIC_A_TOKEN = 0x149EE12310D499F701B6A5714eDAd2C832008fd2;
+
+  // https://etherscan.io/address/0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2
+  address internal constant MKR_UNDERLYING = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;
+
+  uint8 internal constant MKR_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x8A458A9dc9048e005d22849F470891b840296619
+  address internal constant MKR_A_TOKEN = 0x8A458A9dc9048e005d22849F470891b840296619;
+
+  // https://etherscan.io/address/0x6Efc73E54E41b27d2134fF9f98F15550f30DF9B1
+  address internal constant MKR_V_TOKEN = 0x6Efc73E54E41b27d2134fF9f98F15550f30DF9B1;
+
+  // https://etherscan.io/address/0xec1D1B3b0443256cc3860e24a46F108e699484Aa
+  address internal constant MKR_ORACLE = 0xec1D1B3b0443256cc3860e24a46F108e699484Aa;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant MKR_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F
+  address internal constant SNX_UNDERLYING = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;
+
+  uint8 internal constant SNX_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xC7B4c17861357B8ABB91F25581E7263E08DCB59c
+  address internal constant SNX_A_TOKEN = 0xC7B4c17861357B8ABB91F25581E7263E08DCB59c;
+
+  // https://etherscan.io/address/0x8d0de040e8aAd872eC3c33A3776dE9152D3c34ca
+  address internal constant SNX_V_TOKEN = 0x8d0de040e8aAd872eC3c33A3776dE9152D3c34ca;
+
+  // https://etherscan.io/address/0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699
+  address internal constant SNX_ORACLE = 0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant SNX_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xaECEbdfE454d869A626cAb38226C52a1575D1866
+  address internal constant SNX_STATIC_A_TOKEN = 0xaECEbdfE454d869A626cAb38226C52a1575D1866;
+
+  // https://etherscan.io/address/0xba100000625a3754423978a60c9317c58a424e3D
+  address internal constant BAL_UNDERLYING = 0xba100000625a3754423978a60c9317c58a424e3D;
+
+  uint8 internal constant BAL_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x2516E7B3F76294e03C42AA4c5b5b4DCE9C436fB8
+  address internal constant BAL_A_TOKEN = 0x2516E7B3F76294e03C42AA4c5b5b4DCE9C436fB8;
+
+  // https://etherscan.io/address/0x3D3efceb4Ff0966D34d9545D3A2fa2dcdBf451f2
+  address internal constant BAL_V_TOKEN = 0x3D3efceb4Ff0966D34d9545D3A2fa2dcdBf451f2;
+
+  // https://etherscan.io/address/0xdF2917806E30300537aEB49A7663062F4d1F2b5F
+  address internal constant BAL_ORACLE = 0xdF2917806E30300537aEB49A7663062F4d1F2b5F;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant BAL_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984
+  address internal constant UNI_UNDERLYING = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;
+
+  uint8 internal constant UNI_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xF6D2224916DDFbbab6e6bd0D1B7034f4Ae0CaB18
+  address internal constant UNI_A_TOKEN = 0xF6D2224916DDFbbab6e6bd0D1B7034f4Ae0CaB18;
+
+  // https://etherscan.io/address/0xF64178Ebd2E2719F2B1233bCb5Ef6DB4bCc4d09a
+  address internal constant UNI_V_TOKEN = 0xF64178Ebd2E2719F2B1233bCb5Ef6DB4bCc4d09a;
+
+  // https://etherscan.io/address/0x553303d460EE0afB37EdFf9bE42922D8FF63220e
+  address internal constant UNI_ORACLE = 0x553303d460EE0afB37EdFf9bE42922D8FF63220e;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant UNI_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x78fb5E79D5cb59729D0cd72bEA7879aD2683454D
+  address internal constant UNI_STATIC_A_TOKEN = 0x78fb5E79D5cb59729D0cd72bEA7879aD2683454D;
+
+  // https://etherscan.io/address/0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32
+  address internal constant LDO_UNDERLYING = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32;
+
+  uint8 internal constant LDO_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x9A44fd41566876A39655f74971a3A6eA0a17a454
+  address internal constant LDO_A_TOKEN = 0x9A44fd41566876A39655f74971a3A6eA0a17a454;
+
+  // https://etherscan.io/address/0xc30808705C01289A3D306ca9CAB081Ba9114eC82
+  address internal constant LDO_V_TOKEN = 0xc30808705C01289A3D306ca9CAB081Ba9114eC82;
+
+  // https://etherscan.io/address/0xb01e6C9af83879B8e06a092f0DD94309c0D497E4
+  address internal constant LDO_ORACLE = 0xb01e6C9af83879B8e06a092f0DD94309c0D497E4;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant LDO_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x1eA6E1ba21601258401d0B9DB24eA0a07948458e
+  address internal constant LDO_STATIC_A_TOKEN = 0x1eA6E1ba21601258401d0B9DB24eA0a07948458e;
+
+  // https://etherscan.io/address/0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72
+  address internal constant ENS_UNDERLYING = 0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72;
+
+  uint8 internal constant ENS_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x545bD6c032eFdde65A377A6719DEF2796C8E0f2e
+  address internal constant ENS_A_TOKEN = 0x545bD6c032eFdde65A377A6719DEF2796C8E0f2e;
+
+  // https://etherscan.io/address/0xd180D7fdD4092f07428eFE801E17BC03576b3192
+  address internal constant ENS_V_TOKEN = 0xd180D7fdD4092f07428eFE801E17BC03576b3192;
+
+  // https://etherscan.io/address/0x5C00128d4d1c2F4f652C267d7bcdD7aC99C16E16
+  address internal constant ENS_ORACLE = 0x5C00128d4d1c2F4f652C267d7bcdD7aC99C16E16;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant ENS_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x2767C27Eeaf3566082E74b963B6A0f5c9a46C8a1
+  address internal constant ENS_STATIC_A_TOKEN = 0x2767C27Eeaf3566082E74b963B6A0f5c9a46C8a1;
+
+  // https://etherscan.io/address/0x111111111117dC0aa78b770fA6A738034120C302
+  address internal constant ONE_INCH_UNDERLYING = 0x111111111117dC0aa78b770fA6A738034120C302;
+
+  uint8 internal constant ONE_INCH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x71Aef7b30728b9BB371578f36c5A1f1502a5723e
+  address internal constant ONE_INCH_A_TOKEN = 0x71Aef7b30728b9BB371578f36c5A1f1502a5723e;
+
+  // https://etherscan.io/address/0xA38fCa8c6Bf9BdA52E76EB78f08CaA3BE7c5A970
+  address internal constant ONE_INCH_V_TOKEN = 0xA38fCa8c6Bf9BdA52E76EB78f08CaA3BE7c5A970;
+
+  // https://etherscan.io/address/0xc929ad75B72593967DE83E7F7Cda0493458261D9
+  address internal constant ONE_INCH_ORACLE = 0xc929ad75B72593967DE83E7F7Cda0493458261D9;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant ONE_INCH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xB490fF18e55b8881C9527FE7E358dd363780449F
+  address internal constant ONE_INCH_STATIC_A_TOKEN = 0xB490fF18e55b8881C9527FE7E358dd363780449F;
+
+  // https://etherscan.io/address/0x853d955aCEf822Db058eb8505911ED77F175b99e
+  address internal constant FRAX_UNDERLYING = 0x853d955aCEf822Db058eb8505911ED77F175b99e;
+
+  uint8 internal constant FRAX_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xd4e245848d6E1220DBE62e155d89fa327E43CB06
+  address internal constant FRAX_A_TOKEN = 0xd4e245848d6E1220DBE62e155d89fa327E43CB06;
+
+  // https://etherscan.io/address/0x88B8358F5BC87c2D7E116cCA5b65A9eEb2c5EA3F
+  address internal constant FRAX_V_TOKEN = 0x88B8358F5BC87c2D7E116cCA5b65A9eEb2c5EA3F;
+
+  // https://etherscan.io/address/0xeF50f8DC65402c3019586bc8725fCD0b99B8AAd7
+  address internal constant FRAX_ORACLE = 0xeF50f8DC65402c3019586bc8725fCD0b99B8AAd7;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant FRAX_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xEE66abD4D0f9908A48E08AE354B0f425De3e237E
+  address internal constant FRAX_STATIC_A_TOKEN = 0xEE66abD4D0f9908A48E08AE354B0f425De3e237E;
+
+  // https://etherscan.io/address/0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f
+  address internal constant GHO_UNDERLYING = 0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f;
+
+  uint8 internal constant GHO_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x00907f9921424583e7ffBfEdf84F92B7B2Be4977
+  address internal constant GHO_A_TOKEN = 0x00907f9921424583e7ffBfEdf84F92B7B2Be4977;
+
+  // https://etherscan.io/address/0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B
+  address internal constant GHO_V_TOKEN = 0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B;
+
+  // https://etherscan.io/address/0xD110cac5d8682A3b045D5524a9903E031d70FCCd
+  address internal constant GHO_ORACLE = 0xD110cac5d8682A3b045D5524a9903E031d70FCCd;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant GHO_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x048459E4fb3402e58d8900aF7283Ad574B91d742
+  address internal constant GHO_STATIC_A_TOKEN = 0x048459E4fb3402e58d8900aF7283Ad574B91d742;
+
+  // https://etherscan.io/address/0xD33526068D116cE69F19A9ee46F0bd304F21A51f
+  address internal constant RPL_UNDERLYING = 0xD33526068D116cE69F19A9ee46F0bd304F21A51f;
+
+  uint8 internal constant RPL_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xB76CF92076adBF1D9C39294FA8e7A67579FDe357
+  address internal constant RPL_A_TOKEN = 0xB76CF92076adBF1D9C39294FA8e7A67579FDe357;
+
+  // https://etherscan.io/address/0x8988ECA19D502fd8b9CCd03fA3bD20a6f599bc2A
+  address internal constant RPL_V_TOKEN = 0x8988ECA19D502fd8b9CCd03fA3bD20a6f599bc2A;
+
+  // https://etherscan.io/address/0x4E155eD98aFE9034b7A5962f6C84c86d869daA9d
+  address internal constant RPL_ORACLE = 0x4E155eD98aFE9034b7A5962f6C84c86d869daA9d;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant RPL_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x95EF7cb3494e65dA4926bA330dBf540a13afFD17
+  address internal constant RPL_STATIC_A_TOKEN = 0x95EF7cb3494e65dA4926bA330dBf540a13afFD17;
+
+  // https://etherscan.io/address/0x91ad1f5443cF356010D2171D6D26B11C309c4b16
+  address internal constant RPL_STATA_TOKEN = 0x91ad1f5443cF356010D2171D6D26B11C309c4b16;
+
+  // https://etherscan.io/address/0x83F20F44975D03b1b09e64809B757c47f942BEeA
+  address internal constant sDAI_UNDERLYING = 0x83F20F44975D03b1b09e64809B757c47f942BEeA;
+
+  uint8 internal constant sDAI_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c
+  address internal constant sDAI_A_TOKEN = 0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c;
+
+  // https://etherscan.io/address/0x8Db9D35e117d8b93C6Ca9b644b25BaD5d9908141
+  address internal constant sDAI_V_TOKEN = 0x8Db9D35e117d8b93C6Ca9b644b25BaD5d9908141;
+
+  // https://etherscan.io/address/0xf83B85205241c3BCCA0a09D32FaE65c16e0CF236
+  address internal constant sDAI_ORACLE = 0xf83B85205241c3BCCA0a09D32FaE65c16e0CF236;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant sDAI_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xFa7E3571786CE9489bBC58d9Cb8ecE8aAe6B56F3
+  address internal constant sDAI_STATIC_A_TOKEN = 0xFa7E3571786CE9489bBC58d9Cb8ecE8aAe6B56F3;
+
+  // https://etherscan.io/address/0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6
+  address internal constant STG_UNDERLYING = 0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6;
+
+  uint8 internal constant STG_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x1bA9843bD4327c6c77011406dE5fA8749F7E3479
+  address internal constant STG_A_TOKEN = 0x1bA9843bD4327c6c77011406dE5fA8749F7E3479;
+
+  // https://etherscan.io/address/0x655568bDd6168325EC7e58Bf39b21A856F906Dc2
+  address internal constant STG_V_TOKEN = 0x655568bDd6168325EC7e58Bf39b21A856F906Dc2;
+
+  // https://etherscan.io/address/0x7A9f34a0Aa917D438e9b6E630067062B7F8f6f3d
+  address internal constant STG_ORACLE = 0x7A9f34a0Aa917D438e9b6E630067062B7F8f6f3d;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant STG_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202
+  address internal constant KNC_UNDERLYING = 0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202;
+
+  uint8 internal constant KNC_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x5b502e3796385E1e9755d7043B9C945C3aCCeC9C
+  address internal constant KNC_A_TOKEN = 0x5b502e3796385E1e9755d7043B9C945C3aCCeC9C;
+
+  // https://etherscan.io/address/0x253127Ffc04981cEA8932F406710661c2f2c3fD2
+  address internal constant KNC_V_TOKEN = 0x253127Ffc04981cEA8932F406710661c2f2c3fD2;
+
+  // https://etherscan.io/address/0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc
+  address internal constant KNC_ORACLE = 0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant KNC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0
+  address internal constant FXS_UNDERLYING = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;
+
+  uint8 internal constant FXS_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x82F9c5ad306BBa1AD0De49bB5FA6F01bf61085ef
+  address internal constant FXS_A_TOKEN = 0x82F9c5ad306BBa1AD0De49bB5FA6F01bf61085ef;
+
+  // https://etherscan.io/address/0x68e9f0aD4e6f8F5DB70F6923d4d6d5b225B83b16
+  address internal constant FXS_V_TOKEN = 0x68e9f0aD4e6f8F5DB70F6923d4d6d5b225B83b16;
+
+  // https://etherscan.io/address/0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f
+  address internal constant FXS_ORACLE = 0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant FXS_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E
+  address internal constant crvUSD_UNDERLYING = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;
+
+  uint8 internal constant crvUSD_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xb82fa9f31612989525992FCfBB09AB22Eff5c85A
+  address internal constant crvUSD_A_TOKEN = 0xb82fa9f31612989525992FCfBB09AB22Eff5c85A;
+
+  // https://etherscan.io/address/0x028f7886F3e937f8479efaD64f31B3fE1119857a
+  address internal constant crvUSD_V_TOKEN = 0x028f7886F3e937f8479efaD64f31B3fE1119857a;
+
+  // https://etherscan.io/address/0x9Dc30dc58c72f5B669aEa01d02A2e4da194eE893
+  address internal constant crvUSD_ORACLE = 0x9Dc30dc58c72f5B669aEa01d02A2e4da194eE893;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant crvUSD_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x848107491E029AFDe0AC543779c7790382f15929
+  address internal constant crvUSD_STATIC_A_TOKEN = 0x848107491E029AFDe0AC543779c7790382f15929;
+
+  // https://etherscan.io/address/0x6c3ea9036406852006290770BEdFcAbA0e23A0e8
+  address internal constant PYUSD_UNDERLYING = 0x6c3ea9036406852006290770BEdFcAbA0e23A0e8;
+
+  uint8 internal constant PYUSD_DECIMALS = 6;
+
+  // https://etherscan.io/address/0x0C0d01AbF3e6aDfcA0989eBbA9d6e85dD58EaB1E
+  address internal constant PYUSD_A_TOKEN = 0x0C0d01AbF3e6aDfcA0989eBbA9d6e85dD58EaB1E;
+
+  // https://etherscan.io/address/0x57B67e4DE077085Fd0AF2174e9c14871BE664546
+  address internal constant PYUSD_V_TOKEN = 0x57B67e4DE077085Fd0AF2174e9c14871BE664546;
+
+  // https://etherscan.io/address/0x36964C0579D02E0a5AaAb89E24Cf8d7CDF3549EE
+  address internal constant PYUSD_ORACLE = 0x36964C0579D02E0a5AaAb89E24Cf8d7CDF3549EE;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant PYUSD_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x00F2a835758B33f3aC53516Ebd69f3dc77B0D152
+  address internal constant PYUSD_STATIC_A_TOKEN = 0x00F2a835758B33f3aC53516Ebd69f3dc77B0D152;
+
+  // https://etherscan.io/address/0xb51EDdDD8c47856D81C8681EA71404Cec93E92c6
+  address internal constant PYUSD_STATA_TOKEN = 0xb51EDdDD8c47856D81C8681EA71404Cec93E92c6;
+
+  // https://etherscan.io/address/0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee
+  address internal constant weETH_UNDERLYING = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;
+
+  uint8 internal constant weETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xBdfa7b7893081B35Fb54027489e2Bc7A38275129
+  address internal constant weETH_A_TOKEN = 0xBdfa7b7893081B35Fb54027489e2Bc7A38275129;
+
+  // https://etherscan.io/address/0x77ad9BF13a52517AD698D65913e8D381300c8Bf3
+  address internal constant weETH_V_TOKEN = 0x77ad9BF13a52517AD698D65913e8D381300c8Bf3;
+
+  // https://etherscan.io/address/0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3
+  address internal constant weETH_ORACLE = 0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant weETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x867b0CDC4B39a19945E616c29639b0390b39db3B
+  address internal constant weETH_STATIC_A_TOKEN = 0x867b0CDC4B39a19945E616c29639b0390b39db3B;
+
+  // https://etherscan.io/address/0xf1C9acDc66974dFB6dEcB12aA385b9cD01190E38
+  address internal constant osETH_UNDERLYING = 0xf1C9acDc66974dFB6dEcB12aA385b9cD01190E38;
+
+  uint8 internal constant osETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x927709711794F3De5DdBF1D176bEE2D55Ba13c21
+  address internal constant osETH_A_TOKEN = 0x927709711794F3De5DdBF1D176bEE2D55Ba13c21;
+
+  // https://etherscan.io/address/0x8838eefF2af391863E1Bb8b1dF563F86743a8470
+  address internal constant osETH_V_TOKEN = 0x8838eefF2af391863E1Bb8b1dF563F86743a8470;
+
+  // https://etherscan.io/address/0x0A2AF898cEc35197e6944D9E0F525C2626393442
+  address internal constant osETH_ORACLE = 0x0A2AF898cEc35197e6944D9E0F525C2626393442;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant osETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xE5248968166206d14ab57345971E32facD839aDA
+  address internal constant osETH_STATIC_A_TOKEN = 0xE5248968166206d14ab57345971E32facD839aDA;
+
+  // https://etherscan.io/address/0x4c9EDD5852cd905f086C759E8383e09bff1E68B3
+  address internal constant USDe_UNDERLYING = 0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;
+
+  uint8 internal constant USDe_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x4F5923Fc5FD4a93352581b38B7cD26943012DECF
+  address internal constant USDe_A_TOKEN = 0x4F5923Fc5FD4a93352581b38B7cD26943012DECF;
+
+  // https://etherscan.io/address/0x015396E1F286289aE23a762088E863b3ec465145
+  address internal constant USDe_V_TOKEN = 0x015396E1F286289aE23a762088E863b3ec465145;
+
+  // https://etherscan.io/address/0xC26D4a1c46d884cfF6dE9800B6aE7A8Cf48B4Ff8
+  address internal constant USDe_ORACLE = 0xC26D4a1c46d884cfF6dE9800B6aE7A8Cf48B4Ff8;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant USDe_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x46e5d6A33C8Bd8eD38F3c95991C78C9B2FF3bC99
+  address internal constant USDe_STATIC_A_TOKEN = 0x46e5d6A33C8Bd8eD38F3c95991C78C9B2FF3bC99;
+
+  // https://etherscan.io/address/0x5F9D59db355b4A60501544637b00e94082cA575b
+  address internal constant USDe_STATA_TOKEN = 0x5F9D59db355b4A60501544637b00e94082cA575b;
+
+  // https://etherscan.io/address/0xA35b1B31Ce002FBF2058D22F30f95D405200A15b
+  address internal constant ETHx_UNDERLYING = 0xA35b1B31Ce002FBF2058D22F30f95D405200A15b;
+
+  uint8 internal constant ETHx_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x1c0E06a0b1A4c160c17545FF2A951bfcA57C0002
+  address internal constant ETHx_A_TOKEN = 0x1c0E06a0b1A4c160c17545FF2A951bfcA57C0002;
+
+  // https://etherscan.io/address/0x08a8Dc81AeA67F84745623aC6c72CDA3967aab8b
+  address internal constant ETHx_V_TOKEN = 0x08a8Dc81AeA67F84745623aC6c72CDA3967aab8b;
+
+  // https://etherscan.io/address/0xD6270dAabFe4862306190298C2B48fed9e15C847
+  address internal constant ETHx_ORACLE = 0xD6270dAabFe4862306190298C2B48fed9e15C847;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant ETHx_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x7CC6694CF75C18D488d16FB4bf3c71A3B31cc7FB
+  address internal constant ETHx_STATIC_A_TOKEN = 0x7CC6694CF75C18D488d16FB4bf3c71A3B31cc7FB;
+
+  // https://etherscan.io/address/0x9D39A5DE30e57443BfF2A8307A4256c8797A3497
+  address internal constant sUSDe_UNDERLYING = 0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;
+
+  uint8 internal constant sUSDe_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x4579a27aF00A62C0EB156349f31B345c08386419
+  address internal constant sUSDe_A_TOKEN = 0x4579a27aF00A62C0EB156349f31B345c08386419;
+
+  // https://etherscan.io/address/0xeFFDE9BFA8EC77c14C364055a200746d6e12BeD6
+  address internal constant sUSDe_V_TOKEN = 0xeFFDE9BFA8EC77c14C364055a200746d6e12BeD6;
+
+  // https://etherscan.io/address/0x42bc86f2f08419280a99d8fbEa4672e7c30a86ec
+  address internal constant sUSDe_ORACLE = 0x42bc86f2f08419280a99d8fbEa4672e7c30a86ec;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant sUSDe_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x54D612b000697bd8B0094889D7d6A92bA0Bf2DEa
+  address internal constant sUSDe_STATIC_A_TOKEN = 0x54D612b000697bd8B0094889D7d6A92bA0Bf2DEa;
+
+  // https://etherscan.io/address/0x18084fbA666a33d37592fA2633fD49a74DD93a88
+  address internal constant tBTC_UNDERLYING = 0x18084fbA666a33d37592fA2633fD49a74DD93a88;
+
+  uint8 internal constant tBTC_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x10Ac93971cdb1F5c778144084242374473c350Da
+  address internal constant tBTC_A_TOKEN = 0x10Ac93971cdb1F5c778144084242374473c350Da;
+
+  // https://etherscan.io/address/0xAC50890a80A2731eb1eA2e9B4F29569CeB06D960
+  address internal constant tBTC_V_TOKEN = 0xAC50890a80A2731eb1eA2e9B4F29569CeB06D960;
+
+  // https://etherscan.io/address/0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A
+  address internal constant tBTC_ORACLE = 0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant tBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf
+  address internal constant cbBTC_UNDERLYING = 0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf;
+
+  uint8 internal constant cbBTC_DECIMALS = 8;
+
+  // https://etherscan.io/address/0x5c647cE0Ae10658ec44FA4E11A51c96e94efd1Dd
+  address internal constant cbBTC_A_TOKEN = 0x5c647cE0Ae10658ec44FA4E11A51c96e94efd1Dd;
+
+  // https://etherscan.io/address/0xeB284A70557EFe3591b9e6D9D720040E02c54a4d
+  address internal constant cbBTC_V_TOKEN = 0xeB284A70557EFe3591b9e6D9D720040E02c54a4d;
+
+  // https://etherscan.io/address/0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A
+  address internal constant cbBTC_ORACLE = 0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant cbBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xdC035D45d973E3EC169d2276DDab16f1e407384F
+  address internal constant USDS_UNDERLYING = 0xdC035D45d973E3EC169d2276DDab16f1e407384F;
+
+  uint8 internal constant USDS_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x32a6268f9Ba3642Dda7892aDd74f1D34469A4259
+  address internal constant USDS_A_TOKEN = 0x32a6268f9Ba3642Dda7892aDd74f1D34469A4259;
+
+  // https://etherscan.io/address/0x490E0E6255bF65b43E2e02F7acB783c5e04572Ff
+  address internal constant USDS_V_TOKEN = 0x490E0E6255bF65b43E2e02F7acB783c5e04572Ff;
+
+  // https://etherscan.io/address/0x94C7FD62fd0506e71d8142E9D36687fC72A86B02
+  address internal constant USDS_ORACLE = 0x94C7FD62fd0506e71d8142E9D36687fC72A86B02;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant USDS_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xb80B3215EA8183a064073f9892eb64236160a4dF
+  address internal constant USDS_STATA_TOKEN = 0xb80B3215EA8183a064073f9892eb64236160a4dF;
+
+  // https://etherscan.io/address/0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7
+  address internal constant rsETH_UNDERLYING = 0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;
+
+  uint8 internal constant rsETH_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x2D62109243b87C4bA3EE7bA1D91B0dD0A074d7b1
+  address internal constant rsETH_A_TOKEN = 0x2D62109243b87C4bA3EE7bA1D91B0dD0A074d7b1;
+
+  // https://etherscan.io/address/0x6De3E52A1B7294A34e271a508082b1Ff4a37E30e
+  address internal constant rsETH_V_TOKEN = 0x6De3E52A1B7294A34e271a508082b1Ff4a37E30e;
+
+  // https://etherscan.io/address/0x47F52B2e43D0386cF161e001835b03Ad49889e3b
+  address internal constant rsETH_ORACLE = 0x47F52B2e43D0386cF161e001835b03Ad49889e3b;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant rsETH_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x8236a87084f8B84306f72007F36F2618A5634494
+  address internal constant LBTC_UNDERLYING = 0x8236a87084f8B84306f72007F36F2618A5634494;
+
+  uint8 internal constant LBTC_DECIMALS = 8;
+
+  // https://etherscan.io/address/0x65906988ADEe75306021C417a1A3458040239602
+  address internal constant LBTC_A_TOKEN = 0x65906988ADEe75306021C417a1A3458040239602;
+
+  // https://etherscan.io/address/0x68aeB290C7727D899B47c56d1c96AEAC475cD0dD
+  address internal constant LBTC_V_TOKEN = 0x68aeB290C7727D899B47c56d1c96AEAC475cD0dD;
+
+  // https://etherscan.io/address/0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A
+  address internal constant LBTC_ORACLE = 0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant LBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x657e8C867D8B37dCC18fA4Caead9C45EB088C642
+  address internal constant eBTC_UNDERLYING = 0x657e8C867D8B37dCC18fA4Caead9C45EB088C642;
+
+  uint8 internal constant eBTC_DECIMALS = 8;
+
+  // https://etherscan.io/address/0x5fefd7069a7D91d01f269DADE14526CCF3487810
+  address internal constant eBTC_A_TOKEN = 0x5fefd7069a7D91d01f269DADE14526CCF3487810;
+
+  // https://etherscan.io/address/0x47eD0509e64615c0d5C6d39AF1B38D02Bc9fE58f
+  address internal constant eBTC_V_TOKEN = 0x47eD0509e64615c0d5C6d39AF1B38D02Bc9fE58f;
+
+  // https://etherscan.io/address/0x577C217cB5b1691A500D48aA7F69346409cFd668
+  address internal constant eBTC_ORACLE = 0x577C217cB5b1691A500D48aA7F69346409cFd668;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant eBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x8292Bb45bf1Ee4d140127049757C2E0fF06317eD
+  address internal constant RLUSD_UNDERLYING = 0x8292Bb45bf1Ee4d140127049757C2E0fF06317eD;
+
+  uint8 internal constant RLUSD_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xFa82580c16A31D0c1bC632A36F82e83EfEF3Eec0
+  address internal constant RLUSD_A_TOKEN = 0xFa82580c16A31D0c1bC632A36F82e83EfEF3Eec0;
+
+  // https://etherscan.io/address/0xBdFe7aD7976d5d7E0965ea83a81Ca1bCfF7e84a9
+  address internal constant RLUSD_V_TOKEN = 0xBdFe7aD7976d5d7E0965ea83a81Ca1bCfF7e84a9;
+
+  // https://etherscan.io/address/0xf0eaC18E908B34770FDEe46d069c846bDa866759
+  address internal constant RLUSD_ORACLE = 0xf0eaC18E908B34770FDEe46d069c846bDa866759;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant RLUSD_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x6A1792a91C08e9f0bFe7a990871B786643237f0F
+  address internal constant RLUSD_STATA_TOKEN = 0x6A1792a91C08e9f0bFe7a990871B786643237f0F;
+
+  // https://etherscan.io/address/0x50D2C7992b802Eef16c04FeADAB310f31866a545
+  address internal constant PT_eUSDE_29MAY2025_UNDERLYING = 0x50D2C7992b802Eef16c04FeADAB310f31866a545;
+
+  uint8 internal constant PT_eUSDE_29MAY2025_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x4B0821e768Ed9039a70eD1E80E15E76a5bE5Df5F
+  address internal constant PT_eUSDE_29MAY2025_A_TOKEN = 0x4B0821e768Ed9039a70eD1E80E15E76a5bE5Df5F;
+
+  // https://etherscan.io/address/0x3c20fbFD32243Dd9899301C84bCe17413EeE0A0C
+  address internal constant PT_eUSDE_29MAY2025_V_TOKEN = 0x3c20fbFD32243Dd9899301C84bCe17413EeE0A0C;
+
+  // https://etherscan.io/address/0x5292AB3292D076271f853Ed8e05e61cc02F0A2C6
+  address internal constant PT_eUSDE_29MAY2025_ORACLE = 0x5292AB3292D076271f853Ed8e05e61cc02F0A2C6;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant PT_eUSDE_29MAY2025_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x3b3fB9C57858EF816833dC91565EFcd85D96f634
+  address internal constant PT_sUSDE_31JUL2025_UNDERLYING = 0x3b3fB9C57858EF816833dC91565EFcd85D96f634;
+
+  uint8 internal constant PT_sUSDE_31JUL2025_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xDE6eF6CB4aBd3A473ffC2942eEf5D84536F8E864
+  address internal constant PT_sUSDE_31JUL2025_A_TOKEN = 0xDE6eF6CB4aBd3A473ffC2942eEf5D84536F8E864;
+
+  // https://etherscan.io/address/0x8C6FeaF5d58BA1A6541F9c4aF685f62bFCBaC3b1
+  address internal constant PT_sUSDE_31JUL2025_V_TOKEN = 0x8C6FeaF5d58BA1A6541F9c4aF685f62bFCBaC3b1;
+
+  // https://etherscan.io/address/0x759B9B72700A129CD7AD8e53F9c99cb48Fd57105
+  address internal constant PT_sUSDE_31JUL2025_ORACLE = 0x759B9B72700A129CD7AD8e53F9c99cb48Fd57105;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant PT_sUSDE_31JUL2025_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xC139190F447e929f090Edeb554D95AbB8b18aC1C
+  address internal constant USDtb_UNDERLYING = 0xC139190F447e929f090Edeb554D95AbB8b18aC1C;
+
+  uint8 internal constant USDtb_DECIMALS = 18;
+
+  // https://etherscan.io/address/0xEc4ef66D4fCeEba34aBB4dE69dB391Bc5476ccc8
+  address internal constant USDtb_A_TOKEN = 0xEc4ef66D4fCeEba34aBB4dE69dB391Bc5476ccc8;
+
+  // https://etherscan.io/address/0xeA85a065F87FE28Aa8Fbf0D6C7deC472b106252C
+  address internal constant USDtb_V_TOKEN = 0xeA85a065F87FE28Aa8Fbf0D6C7deC472b106252C;
+
+  // https://etherscan.io/address/0x2FA6A78E3d617c1013a22938411602dc9Da98dBa
+  address internal constant USDtb_ORACLE = 0x2FA6A78E3d617c1013a22938411602dc9Da98dBa;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant USDtb_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x917459337CaAC939D41d7493B3999f571D20D667
+  address internal constant PT_USDe_31JUL2025_UNDERLYING = 0x917459337CaAC939D41d7493B3999f571D20D667;
+
+  uint8 internal constant PT_USDe_31JUL2025_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x312ffC57778CEfa11989733e6E08143E7E229c1c
+  address internal constant PT_USDe_31JUL2025_A_TOKEN = 0x312ffC57778CEfa11989733e6E08143E7E229c1c;
+
+  // https://etherscan.io/address/0xd90DA2Df915B87fE1621A7F2201FbF4ff2cCA031
+  address internal constant PT_USDe_31JUL2025_V_TOKEN = 0xd90DA2Df915B87fE1621A7F2201FbF4ff2cCA031;
+
+  // https://etherscan.io/address/0x6b99e86B48Fee533B7Bee602e7959f024051Eca0
+  address internal constant PT_USDe_31JUL2025_ORACLE = 0x6b99e86B48Fee533B7Bee602e7959f024051Eca0;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant PT_USDe_31JUL2025_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x14Bdc3A3AE09f5518b923b69489CBcAfB238e617
+  address internal constant PT_eUSDE_14AUG2025_UNDERLYING = 0x14Bdc3A3AE09f5518b923b69489CBcAfB238e617;
+
+  uint8 internal constant PT_eUSDE_14AUG2025_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x2eDff5AF94334fBd7C38ae318edf1c40e072b73B
+  address internal constant PT_eUSDE_14AUG2025_A_TOKEN = 0x2eDff5AF94334fBd7C38ae318edf1c40e072b73B;
+
+  // https://etherscan.io/address/0x22517fE16DEd08e52E7EA3423A2EA4995b1f1731
+  address internal constant PT_eUSDE_14AUG2025_V_TOKEN = 0x22517fE16DEd08e52E7EA3423A2EA4995b1f1731;
+
+  // https://etherscan.io/address/0x03f9bA9A897241985c1f12bCe97fAC1B0bd4a7A7
+  address internal constant PT_eUSDE_14AUG2025_ORACLE = 0x03f9bA9A897241985c1f12bCe97fAC1B0bd4a7A7;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant PT_eUSDE_14AUG2025_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0x90D2af7d622ca3141efA4d8f1F24d86E5974Cc8F
+  address internal constant eUSDe_UNDERLYING = 0x90D2af7d622ca3141efA4d8f1F24d86E5974Cc8F;
+
+  uint8 internal constant eUSDe_DECIMALS = 18;
+
+  // https://etherscan.io/address/0x5F9190496e0DFC831C3bd307978de4a245E2F5cD
+  address internal constant eUSDe_A_TOKEN = 0x5F9190496e0DFC831C3bd307978de4a245E2F5cD;
+
+  // https://etherscan.io/address/0x48351fCc9536dA440AE9471220F6dC921b0eB703
+  address internal constant eUSDe_V_TOKEN = 0x48351fCc9536dA440AE9471220F6dC921b0eB703;
+
+  // https://etherscan.io/address/0xc7Ad695ac0ae38Ae308640897E51468977A862a2
+  address internal constant eUSDe_ORACLE = 0xc7Ad695ac0ae38Ae308640897E51468977A862a2;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant eUSDe_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+
+  // https://etherscan.io/address/0xC96dE26018A54D51c097160568752c4E3BD6C364
+  address internal constant FBTC_UNDERLYING = 0xC96dE26018A54D51c097160568752c4E3BD6C364;
+
+  uint8 internal constant FBTC_DECIMALS = 8;
+
+  // https://etherscan.io/address/0xcCA43ceF272c30415866914351fdfc3E881bb7c2
+  address internal constant FBTC_A_TOKEN = 0xcCA43ceF272c30415866914351fdfc3E881bb7c2;
+
+  // https://etherscan.io/address/0x4A35FD7F93324Cc48bc12190D3F37493437b1Eff
+  address internal constant FBTC_V_TOKEN = 0x4A35FD7F93324Cc48bc12190D3F37493437b1Eff;
+
+  // https://etherscan.io/address/0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A
+  address internal constant FBTC_ORACLE = 0xb41E773f507F7a7EA890b1afB7d2b660c30C8B0A;
+
+  // https://etherscan.io/address/0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB
+  address internal constant FBTC_INTEREST_RATE_STRATEGY = 0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB;
+}
+
+library AaveV3EthereumEModes {
+  uint8 internal constant NONE = 0;
+
+  uint8 internal constant ETH_CORRELATED = 1;
+
+  uint8 internal constant SUSDE_STABLECOINS = 2;
+
+  uint8 internal constant RSETH_LST_MAIN = 3;
+
+  uint8 internal constant LBTC_WBTC = 4;
+
+  uint8 internal constant LBTC_CBBTC = 5;
+
+  uint8 internal constant LBTC_TBTC = 6;
+
+  uint8 internal constant EBTC_WBTC = 7;
+
+  uint8 internal constant PT_SUSDE_STABLECOINS_JUL_2025 = 8;
+
+  uint8 internal constant PT_EUSDE_STABLECOINS_MAY_2025 = 9;
+
+  uint8 internal constant PT_USDE_STABLECOINS_JULY_2025 = 10;
+
+  uint8 internal constant USDE_STABLECOIN = 11;
+
+  uint8 internal constant PT_USDE_USDE_JULY_2025 = 12;
+
+  uint8 internal constant PT_EUSDE_STABLECOINS_AUGUST_2025 = 13;
+
+  uint8 internal constant PT_EUSDE_USDE_AUGUST_2025 = 14;
+
+  uint8 internal constant EUSDE_STABLECOIN = 15;
+
+  uint8 internal constant FBTC_WBTC = 16;
+}
+
+library AaveV3EthereumExternalLibraries {
+  // https://etherscan.io/address/0x34039100cc9584Ae5D741d322e16d0d18CEE8770
+  address internal constant FLASHLOAN_LOGIC = 0x34039100cc9584Ae5D741d322e16d0d18CEE8770;
+
+  // https://etherscan.io/address/0x62325c94E1c49dcDb5937726aB5D8A4c37bCAd36
+  address internal constant BORROW_LOGIC = 0x62325c94E1c49dcDb5937726aB5D8A4c37bCAd36;
+
+  // https://etherscan.io/address/0x621Ef86D8A5C693a06295BC288B95C12D4CE4994
+  address internal constant BRIDGE_LOGIC = 0x621Ef86D8A5C693a06295BC288B95C12D4CE4994;
+
+  // https://etherscan.io/address/0xC31d2362fAeD85dF79d0bec99693D0EB0Abd3f74
+  address internal constant E_MODE_LOGIC = 0xC31d2362fAeD85dF79d0bec99693D0EB0Abd3f74;
+
+  // https://etherscan.io/address/0x4731bF01583F991278692E8727d0700a00A1fBBf
+  address internal constant LIQUIDATION_LOGIC = 0x4731bF01583F991278692E8727d0700a00A1fBBf;
+
+  // https://etherscan.io/address/0xf8C97539934ee66a67C26010e8e027D77E821B0C
+  address internal constant POOL_LOGIC = 0xf8C97539934ee66a67C26010e8e027D77E821B0C;
+
+  // https://etherscan.io/address/0x185477906B46D9b8DE0DEB73A1bBfb87b5b51BC3
+  address internal constant SUPPLY_LOGIC = 0x185477906B46D9b8DE0DEB73A1bBfb87b5b51BC3;
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AggregatorInterface.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AggregatorInterface.sol
new file mode 100644
index 0000000..42a6527
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/AggregatorInterface.sol
@@ -0,0 +1,33 @@
+// SPDX-License-Identifier: MIT
+// Chainlink Contracts v0.8
+pragma solidity ^0.8.0;
+
+interface AggregatorInterface {
+  function decimals() external view returns (uint8);
+
+  function description() external view returns (string memory);
+
+  function getRoundData(uint80 _roundId)
+    external
+    view
+    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
+
+  function latestRoundData()
+    external
+    view
+    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
+
+  function latestAnswer() external view returns (int256);
+
+  function latestTimestamp() external view returns (uint256);
+
+  function latestRound() external view returns (uint256);
+
+  function getAnswer(uint256 roundId) external view returns (int256);
+
+  function getTimestamp(uint256 roundId) external view returns (uint256);
+
+  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);
+
+  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ConfiguratorInputTypes.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ConfiguratorInputTypes.sol
new file mode 100644
index 0000000..58c8696
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ConfiguratorInputTypes.sol
@@ -0,0 +1,32 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+library ConfiguratorInputTypes {
+  struct InitReserveInput {
+    address aTokenImpl;
+    address variableDebtTokenImpl;
+    address underlyingAsset;
+    string aTokenName;
+    string aTokenSymbol;
+    string variableDebtTokenName;
+    string variableDebtTokenSymbol;
+    bytes params;
+    bytes interestRateData;
+  }
+
+  struct UpdateATokenInput {
+    address asset;
+    string name;
+    string symbol;
+    address implementation;
+    bytes params;
+  }
+
+  struct UpdateDebtTokenInput {
+    address asset;
+    string name;
+    string symbol;
+    address implementation;
+    bytes params;
+  }
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/Context.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/Context.sol
index 445ee64..93f354b 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/Context.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/Context.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.10;
+pragma solidity ^0.8.10;
 
 /*
  * @dev Provides information about the current execution context, including the
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/DataTypes.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/DataTypes.sol
index 93b7e31..3debcd4 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/DataTypes.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/DataTypes.sol
@@ -1,8 +1,12 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 library DataTypes {
-  struct ReserveData {
+  /**
+   * This exists specifically to maintain the `getReserveData()` interface, since the new, internal
+   * `ReserveData` struct includes the reserve's `virtualUnderlyingBalance`.
+   */
+  struct ReserveDataLegacy {
     //stores the reserve configuration
     ReserveConfigurationMap configuration;
     //the liquidity index. Expressed in ray
@@ -13,7 +17,7 @@ library DataTypes {
     uint128 variableBorrowIndex;
     //the current variable borrow rate. Expressed in ray
     uint128 currentVariableBorrowRate;
-    //the current stable borrow rate. Expressed in ray
+    // DEPRECATED on v3.2.0
     uint128 currentStableBorrowRate;
     //timestamp of last update
     uint40 lastUpdateTimestamp;
@@ -21,20 +25,59 @@ library DataTypes {
     uint16 id;
     //aToken address
     address aTokenAddress;
-    //stableDebtToken address
+    // DEPRECATED on v3.2.0
     address stableDebtTokenAddress;
     //variableDebtToken address
     address variableDebtTokenAddress;
-    //address of the interest rate strategy
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
     address interestRateStrategyAddress;
     //the current treasury balance, scaled
     uint128 accruedToTreasury;
-    //the outstanding unbacked aTokens minted through the bridging feature
+    // DEPRECATED on v3.4.0
     uint128 unbacked;
     //the outstanding debt borrowed against this asset in isolation mode
     uint128 isolationModeTotalDebt;
   }
 
+  struct ReserveData {
+    //stores the reserve configuration
+    ReserveConfigurationMap configuration;
+    //the liquidity index. Expressed in ray
+    uint128 liquidityIndex;
+    //the current supply rate. Expressed in ray
+    uint128 currentLiquidityRate;
+    //variable borrow index. Expressed in ray
+    uint128 variableBorrowIndex;
+    //the current variable borrow rate. Expressed in ray
+    uint128 currentVariableBorrowRate;
+    /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+    // the current accumulate deficit in underlying tokens
+    uint128 deficit;
+    //timestamp of last update
+    uint40 lastUpdateTimestamp;
+    //the id of the reserve. Represents the position in the list of the active reserves
+    uint16 id;
+    //timestamp until when liquidations are not allowed on the reserve, if set to past liquidations will be allowed
+    uint40 liquidationGracePeriodUntil;
+    //aToken address
+    address aTokenAddress;
+    // DEPRECATED on v3.2.0
+    address __deprecatedStableDebtTokenAddress;
+    //variableDebtToken address
+    address variableDebtTokenAddress;
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
+    address __deprecatedInterestRateStrategyAddress;
+    //the current treasury balance, scaled
+    uint128 accruedToTreasury;
+    // In aave 3.3.0 this storage slot contained the `unbacked`
+    uint128 virtualUnderlyingBalance;
+    //the outstanding debt borrowed against this asset in isolation mode
+    uint128 isolationModeTotalDebt;
+    //the amount of underlying accounted for by the protocol
+    // DEPRECATED on v3.4.0. Moved into the same slot as accruedToTreasury for optimized storage access.
+    uint128 __deprecatedVirtualUnderlyingBalance;
+  }
+
   struct ReserveConfigurationMap {
     //bit 0-15: LTV
     //bit 16-31: Liq. threshold
@@ -43,18 +86,20 @@ library DataTypes {
     //bit 56: reserve is active
     //bit 57: reserve is frozen
     //bit 58: borrowing is enabled
-    //bit 59: stable rate borrowing enabled
+    //bit 59: DEPRECATED: stable rate borrowing enabled
     //bit 60: asset is paused
     //bit 61: borrowing in isolation mode is enabled
-    //bit 62-63: reserved
+    //bit 62: siloed borrowing enabled
+    //bit 63: flashloaning enabled
     //bit 64-79: reserve factor
-    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
-    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
-    //bit 152-167 liquidation protocol fee
-    //bit 168-175 eMode category
-    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
-    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-    //bit 252-255 unused
+    //bit 80-115: borrow cap in whole tokens, borrowCap == 0 => no cap
+    //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
+    //bit 152-167: liquidation protocol fee
+    //bit 168-175: DEPRECATED: eMode category
+    //bit 176-211: DEPRECATED: unbacked mint cap
+    //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
+    //bit 252: DEPRECATED: virtual accounting is enabled for the reserve
+    //bit 253-255 unused
     uint256 data;
   }
 
@@ -67,30 +112,49 @@ library DataTypes {
     uint256 data;
   }
 
-  struct EModeCategory {
+  // DEPRECATED: kept for backwards compatibility, might be removed in a future version
+  struct EModeCategoryLegacy {
     // each eMode category has a custom ltv and liquidation threshold
     uint16 ltv;
     uint16 liquidationThreshold;
     uint16 liquidationBonus;
-    // each eMode category may or may not have a custom oracle to override the individual assets price oracles
+    // DEPRECATED
     address priceSource;
     string label;
   }
 
+  struct CollateralConfig {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+  }
+
+  struct EModeCategoryBaseConfiguration {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    string label;
+  }
+
+  struct EModeCategory {
+    // each eMode category has a custom ltv and liquidation threshold
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    uint128 collateralBitmap;
+    string label;
+    uint128 borrowableBitmap;
+  }
+
   enum InterestRateMode {
     NONE,
-    STABLE,
+    __DEPRECATED,
     VARIABLE
   }
 
   struct ReserveCache {
     uint256 currScaledVariableDebt;
     uint256 nextScaledVariableDebt;
-    uint256 currPrincipalStableDebt;
-    uint256 currAvgStableBorrowRate;
-    uint256 currTotalStableDebt;
-    uint256 nextAvgStableBorrowRate;
-    uint256 nextTotalStableDebt;
     uint256 currLiquidityIndex;
     uint256 nextLiquidityIndex;
     uint256 currVariableBorrowIndex;
@@ -100,26 +164,27 @@ library DataTypes {
     uint256 reserveFactor;
     ReserveConfigurationMap reserveConfiguration;
     address aTokenAddress;
-    address stableDebtTokenAddress;
     address variableDebtTokenAddress;
     uint40 reserveLastUpdateTimestamp;
-    uint40 stableDebtLastUpdateTimestamp;
   }
 
   struct ExecuteLiquidationCallParams {
-    uint256 reservesCount;
+    address liquidator;
     uint256 debtToCover;
     address collateralAsset;
     address debtAsset;
-    address user;
+    address borrower;
     bool receiveAToken;
     address priceOracle;
-    uint8 userEModeCategory;
+    uint8 borrowerEModeCategory;
     address priceOracleSentinel;
+    address interestRateStrategyAddress;
   }
 
   struct ExecuteSupplyParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address onBehalfOf;
     uint16 referralCode;
@@ -129,12 +194,11 @@ library DataTypes {
     address asset;
     address user;
     address onBehalfOf;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     uint16 referralCode;
     bool releaseUnderlying;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
@@ -142,6 +206,8 @@ library DataTypes {
 
   struct ExecuteRepayParams {
     address asset;
+    address user;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     address onBehalfOf;
@@ -149,18 +215,20 @@ library DataTypes {
   }
 
   struct ExecuteWithdrawParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address to;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
   }
 
-  struct ExecuteSetUserEModeParams {
-    uint256 reservesCount;
-    address oracle;
-    uint8 categoryId;
+  struct ExecuteEliminateDeficitParams {
+    address user;
+    address asset;
+    address interestRateStrategyAddress;
+    uint256 amount;
   }
 
   struct FinalizeTransferParams {
@@ -170,50 +238,50 @@ library DataTypes {
     uint256 amount;
     uint256 balanceFromBefore;
     uint256 balanceToBefore;
-    uint256 reservesCount;
     address oracle;
     uint8 fromEModeCategory;
   }
 
   struct FlashloanParams {
+    address user;
     address receiverAddress;
     address[] assets;
     uint256[] amounts;
     uint256[] interestRateModes;
+    address interestRateStrategyAddress;
     address onBehalfOf;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
+    uint256 flashLoanPremium;
     address addressesProvider;
+    address pool;
     uint8 userEModeCategory;
     bool isAuthorizedFlashBorrower;
   }
 
   struct FlashloanSimpleParams {
+    address user;
     address receiverAddress;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
+    uint256 flashLoanPremium;
   }
 
   struct FlashLoanRepaymentParams {
+    address user;
     uint256 amount;
     uint256 totalPremium;
-    uint256 flashLoanPremiumToProtocol;
     address asset;
+    address interestRateStrategyAddress;
     address receiverAddress;
     uint16 referralCode;
   }
 
   struct CalculateUserAccountDataParams {
     UserConfigurationMap userConfig;
-    uint256 reservesCount;
     address user;
     address oracle;
     uint8 userEModeCategory;
@@ -226,14 +294,9 @@ library DataTypes {
     address userAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
-    uint256 maxStableLoanPercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
-    bool isolationModeActive;
-    address isolationModeCollateralAddress;
-    uint256 isolationModeDebtCeiling;
   }
 
   struct ValidateLiquidationCallParams {
@@ -241,26 +304,26 @@ library DataTypes {
     uint256 totalDebt;
     uint256 healthFactor;
     address priceOracleSentinel;
+    address borrower;
+    address liquidator;
   }
 
   struct CalculateInterestRatesParams {
     uint256 unbacked;
     uint256 liquidityAdded;
     uint256 liquidityTaken;
-    uint256 totalStableDebt;
-    uint256 totalVariableDebt;
-    uint256 averageStableBorrowRate;
+    uint256 totalDebt;
     uint256 reserveFactor;
     address reserve;
-    address aToken;
+    // @notice DEPRECATED in 3.4, but kept for backwards compatibility
+    bool usingVirtualBalance;
+    uint256 virtualUnderlyingBalance;
   }
 
   struct InitReserveParams {
     address asset;
     address aTokenAddress;
-    address stableDebtAddress;
     address variableDebtAddress;
-    address interestRateStrategyAddress;
     uint16 reservesCount;
     uint16 maxNumberReserves;
   }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/DebtTokenBase.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/DebtTokenBase.sol
deleted file mode 100644
index 9881349..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/DebtTokenBase.sol
+++ /dev/null
@@ -1,92 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
-
-import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
-import {Errors} from "../../libraries/helpers/Errors.sol";
-import {VersionedInitializable} from "../../libraries/aave-upgradeability/VersionedInitializable.sol";
-import {ICreditDelegationToken} from "../../../interfaces/ICreditDelegationToken.sol";
-import {EIP712Base} from "./EIP712Base.sol";
-
-/**
- * @title DebtTokenBase
- * @author Aave
- * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken
- */
-abstract contract DebtTokenBase is VersionedInitializable, EIP712Base, Context, ICreditDelegationToken {
-  // Map of borrow allowances (delegator => delegatee => borrowAllowanceAmount)
-  mapping(address => mapping(address => uint256)) internal _borrowAllowances;
-
-  // Credit Delegation Typehash
-  bytes32 public constant DELEGATION_WITH_SIG_TYPEHASH =
-    keccak256("DelegationWithSig(address delegatee,uint256 value,uint256 nonce,uint256 deadline)");
-
-  address internal _underlyingAsset;
-
-  /**
-   * @dev Constructor.
-   */
-  constructor() EIP712Base() {
-    // Intentionally left blank
-  }
-
-  /// @inheritdoc ICreditDelegationToken
-  function approveDelegation(address delegatee, uint256 amount) external override {
-    _approveDelegation(_msgSender(), delegatee, amount);
-  }
-
-  /// @inheritdoc ICreditDelegationToken
-  function delegationWithSig(
-    address delegator,
-    address delegatee,
-    uint256 value,
-    uint256 deadline,
-    uint8 v,
-    bytes32 r,
-    bytes32 s
-  ) external {
-    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
-    //solium-disable-next-line
-    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
-    uint256 currentValidNonce = _nonces[delegator];
-    bytes32 digest = keccak256(
-      abi.encodePacked(
-        "\x19\x01",
-        DOMAIN_SEPARATOR(),
-        keccak256(abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline))
-      )
-    );
-    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);
-    _nonces[delegator] = currentValidNonce + 1;
-    _approveDelegation(delegator, delegatee, value);
-  }
-
-  /// @inheritdoc ICreditDelegationToken
-  function borrowAllowance(address fromUser, address toUser) external view override returns (uint256) {
-    return _borrowAllowances[fromUser][toUser];
-  }
-
-  /**
-   * @notice Updates the borrow allowance of a user on the specific debt token.
-   * @param delegator The address delegating the borrowing power
-   * @param delegatee The address receiving the delegated borrowing power
-   * @param amount The allowance amount being delegated.
-   */
-  function _approveDelegation(address delegator, address delegatee, uint256 amount) internal {
-    _borrowAllowances[delegator][delegatee] = amount;
-    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, amount);
-  }
-
-  /**
-   * @notice Decreases the borrow allowance of a user on the specific debt token.
-   * @param delegator The address delegating the borrowing power
-   * @param delegatee The address receiving the delegated borrowing power
-   * @param amount The amount to subtract from the current allowance
-   */
-  function _decreaseBorrowAllowance(address delegator, address delegatee, uint256 amount) internal {
-    uint256 newAllowance = _borrowAllowances[delegator][delegatee] - amount;
-
-    _borrowAllowances[delegator][delegatee] = newAllowance;
-
-    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, newAllowance);
-  }
-}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/DelegationMode.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/DelegationMode.sol
new file mode 100644
index 0000000..8d59013
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/DelegationMode.sol
@@ -0,0 +1,9 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+enum DelegationMode {
+  NO_DELEGATION,
+  VOTING_DELEGATED,
+  PROPOSITION_DELEGATED,
+  FULL_POWER_DELEGATED
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ECDSA.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ECDSA.sol
new file mode 100644
index 0000000..ab51116
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ECDSA.sol
@@ -0,0 +1,180 @@
+// SPDX-License-Identifier: MIT
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)
+
+pragma solidity ^0.8.20;
+
+/**
+ * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
+ *
+ * These functions can be used to verify that a message was signed by the holder
+ * of the private keys of a given address.
+ */
+library ECDSA {
+  enum RecoverError {
+    NoError,
+    InvalidSignature,
+    InvalidSignatureLength,
+    InvalidSignatureS
+  }
+
+  /**
+   * @dev The signature derives the `address(0)`.
+   */
+  error ECDSAInvalidSignature();
+
+  /**
+   * @dev The signature has an invalid length.
+   */
+  error ECDSAInvalidSignatureLength(uint256 length);
+
+  /**
+   * @dev The signature has an S value that is in the upper half order.
+   */
+  error ECDSAInvalidSignatureS(bytes32 s);
+
+  /**
+   * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
+   * return address(0) without also returning an error description. Errors are documented using an enum (error type)
+   * and a bytes32 providing additional information about the error.
+   *
+   * If no error is returned, then the address can be used for verification purposes.
+   *
+   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
+   * this function rejects them by requiring the `s` value to be in the lower
+   * half order, and the `v` value to be either 27 or 28.
+   *
+   * IMPORTANT: `hash` _must_ be the result of a hash operation for the
+   * verification to be secure: it is possible to craft signatures that
+   * recover to arbitrary addresses for non-hashed data. A safe way to ensure
+   * this is by receiving a hash of the original message (which may otherwise
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
+   *
+   * Documentation for signature generation:
+   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
+   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
+   */
+  function tryRecover(bytes32 hash, bytes memory signature)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    if (signature.length == 65) {
+      bytes32 r;
+      bytes32 s;
+      uint8 v;
+      // ecrecover takes the signature parameters, and the only way to get them
+      // currently is to use assembly.
+      assembly ("memory-safe") {
+        r := mload(add(signature, 0x20))
+        s := mload(add(signature, 0x40))
+        v := byte(0, mload(add(signature, 0x60)))
+      }
+      return tryRecover(hash, v, r, s);
+    } else {
+      return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
+    }
+  }
+
+  /**
+   * @dev Returns the address that signed a hashed message (`hash`) with
+   * `signature`. This address can then be used for verification purposes.
+   *
+   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
+   * this function rejects them by requiring the `s` value to be in the lower
+   * half order, and the `v` value to be either 27 or 28.
+   *
+   * IMPORTANT: `hash` _must_ be the result of a hash operation for the
+   * verification to be secure: it is possible to craft signatures that
+   * recover to arbitrary addresses for non-hashed data. A safe way to ensure
+   * this is by receiving a hash of the original message (which may otherwise
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
+   */
+  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
+   *
+   * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]
+   */
+  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    unchecked {
+      bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
+      // We do not check for an overflow here since the shift operation results in 0 or 1.
+      uint8 v = uint8((uint256(vs) >> 255) + 27);
+      return tryRecover(hash, v, r, s);
+    }
+  }
+
+  /**
+   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
+   */
+  function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
+   * `r` and `s` signature fields separately.
+   */
+  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
+    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
+    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
+    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
+    // signatures from current libraries generate a unique signature with an s-value in the lower half order.
+    //
+    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
+    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
+    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
+    // these malleable signatures as well.
+    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
+      return (address(0), RecoverError.InvalidSignatureS, s);
+    }
+
+    // If the signature is valid (and not malleable), return the signer address
+    address signer = ecrecover(hash, v, r, s);
+    if (signer == address(0)) {
+      return (address(0), RecoverError.InvalidSignature, bytes32(0));
+    }
+
+    return (signer, RecoverError.NoError, bytes32(0));
+  }
+
+  /**
+   * @dev Overload of {ECDSA-recover} that receives the `v`,
+   * `r` and `s` signature fields separately.
+   */
+  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
+    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
+    _throwError(error, errorArg);
+    return recovered;
+  }
+
+  /**
+   * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
+   */
+  function _throwError(RecoverError error, bytes32 errorArg) private pure {
+    if (error == RecoverError.NoError) {
+      return; // no error: do nothing
+    } else if (error == RecoverError.InvalidSignature) {
+      revert ECDSAInvalidSignature();
+    } else if (error == RecoverError.InvalidSignatureLength) {
+      revert ECDSAInvalidSignatureLength(uint256(errorArg));
+    } else if (error == RecoverError.InvalidSignatureS) {
+      revert ECDSAInvalidSignatureS(errorArg);
+    }
+  }
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/EIP712Base.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/EIP712Base.sol
index eacc1c9..be5c539 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/EIP712Base.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/EIP712Base.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 /**
  * @title EIP712Base
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/Errors.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/Errors.sol
index 5ff0a6f..6c493d8 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/Errors.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/Errors.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
@@ -7,94 +7,93 @@ pragma solidity ^0.8.0;
  * @notice Defines the error messages emitted by the different contracts of the Aave protocol
  */
 library Errors {
-  string public constant CALLER_NOT_POOL_ADMIN = "1"; // 'The caller of the function is not a pool admin'
-  string public constant CALLER_NOT_EMERGENCY_ADMIN = "2"; // 'The caller of the function is not an emergency admin'
-  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = "3"; // 'The caller of the function is not a pool or emergency admin'
-  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = "4"; // 'The caller of the function is not a risk or pool admin'
-  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = "5"; // 'The caller of the function is not an asset listing or pool admin'
-  string public constant CALLER_NOT_BRIDGE = "6"; // 'The caller of the function is not a bridge'
-  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = "7"; // 'Pool addresses provider is not registered'
-  string public constant INVALID_ADDRESSES_PROVIDER_ID = "8"; // 'Invalid id for the pool addresses provider'
-  string public constant NOT_CONTRACT = "9"; // 'Address is not a contract'
-  string public constant CALLER_NOT_POOL_CONFIGURATOR = "10"; // 'The caller of the function is not the pool configurator'
-  string public constant CALLER_NOT_ATOKEN = "11"; // 'The caller of the function is not an AToken'
-  string public constant INVALID_ADDRESSES_PROVIDER = "12"; // 'The address of the pool addresses provider is invalid'
-  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = "13"; // 'Invalid return value of the flashloan executor function'
-  string public constant RESERVE_ALREADY_ADDED = "14"; // 'Reserve has already been added to reserve list'
-  string public constant NO_MORE_RESERVES_ALLOWED = "15"; // 'Maximum amount of reserves in the pool reached'
-  string public constant EMODE_CATEGORY_RESERVED = "16"; // 'Zero eMode category is reserved for volatile heterogeneous assets'
-  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = "17"; // 'Invalid eMode category assignment to asset'
-  string public constant RESERVE_LIQUIDITY_NOT_ZERO = "18"; // 'The liquidity of the reserve needs to be 0'
-  string public constant FLASHLOAN_PREMIUM_INVALID = "19"; // 'Invalid flashloan premium'
-  string public constant INVALID_RESERVE_PARAMS = "20"; // 'Invalid risk parameters for the reserve'
-  string public constant INVALID_EMODE_CATEGORY_PARAMS = "21"; // 'Invalid risk parameters for the eMode category'
-  string public constant BRIDGE_PROTOCOL_FEE_INVALID = "22"; // 'Invalid bridge protocol fee'
-  string public constant CALLER_MUST_BE_POOL = "23"; // 'The caller of this function must be a pool'
-  string public constant INVALID_MINT_AMOUNT = "24"; // 'Invalid amount to mint'
-  string public constant INVALID_BURN_AMOUNT = "25"; // 'Invalid amount to burn'
-  string public constant INVALID_AMOUNT = "26"; // 'Amount must be greater than 0'
-  string public constant RESERVE_INACTIVE = "27"; // 'Action requires an active reserve'
-  string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
-  string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
-  string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-  string public constant STABLE_BORROWING_NOT_ENABLED = "31"; // 'Stable borrowing is not enabled'
-  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
-  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
-  string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
-  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = "35"; // 'Health factor is lesser than the liquidation threshold'
-  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
-  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = "38"; // 'The requested amount is greater than the max loan size in stable rate mode'
-  string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
-  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-  string public constant NO_OUTSTANDING_STABLE_DEBT = "41"; // 'User does not have outstanding stable rate debt on this reserve'
-  string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
-  string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
-  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
-  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = "45"; // 'Health factor is not below the threshold'
-  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = "46"; // 'The collateral chosen cannot be liquidated'
-  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = "47"; // 'User did not borrow the specified currency'
-  string public constant INCONSISTENT_FLASHLOAN_PARAMS = "49"; // 'Inconsistent flashloan parameters'
-  string public constant BORROW_CAP_EXCEEDED = "50"; // 'Borrow cap is exceeded'
-  string public constant SUPPLY_CAP_EXCEEDED = "51"; // 'Supply cap is exceeded'
-  string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
-  string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
-  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-  string public constant STABLE_DEBT_NOT_ZERO = "55"; // 'Stable debt supply is not zero'
-  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
-  string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
-  string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
-  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = "59"; // 'Price oracle sentinel validation failed'
-  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = "60"; // 'Asset is not borrowable in isolation mode'
-  string public constant RESERVE_ALREADY_INITIALIZED = "61"; // 'Reserve has already been initialized'
-  string public constant USER_IN_ISOLATION_MODE = "62"; // 'User is in isolation mode'
-  string public constant INVALID_LTV = "63"; // 'Invalid ltv parameter for the reserve'
-  string public constant INVALID_LIQ_THRESHOLD = "64"; // 'Invalid liquidity threshold parameter for the reserve'
-  string public constant INVALID_LIQ_BONUS = "65"; // 'Invalid liquidity bonus parameter for the reserve'
-  string public constant INVALID_DECIMALS = "66"; // 'Invalid decimals parameter of the underlying asset of the reserve'
-  string public constant INVALID_RESERVE_FACTOR = "67"; // 'Invalid reserve factor parameter for the reserve'
-  string public constant INVALID_BORROW_CAP = "68"; // 'Invalid borrow cap for the reserve'
-  string public constant INVALID_SUPPLY_CAP = "69"; // 'Invalid supply cap for the reserve'
-  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = "70"; // 'Invalid liquidation protocol fee for the reserve'
-  string public constant INVALID_EMODE_CATEGORY = "71"; // 'Invalid eMode category for the reserve'
-  string public constant INVALID_UNBACKED_MINT_CAP = "72"; // 'Invalid unbacked mint cap for the reserve'
-  string public constant INVALID_DEBT_CEILING = "73"; // 'Invalid debt ceiling for the reserve
-  string public constant INVALID_RESERVE_INDEX = "74"; // 'Invalid reserve index'
-  string public constant ACL_ADMIN_CANNOT_BE_ZERO = "75"; // 'ACL admin cannot be set to the zero address'
-  string public constant INCONSISTENT_PARAMS_LENGTH = "76"; // 'Array parameters that should be equal length are not'
-  string public constant ZERO_ADDRESS_NOT_VALID = "77"; // 'Zero address not valid'
-  string public constant INVALID_EXPIRATION = "78"; // 'Invalid expiration'
-  string public constant INVALID_SIGNATURE = "79"; // 'Invalid signature'
-  string public constant OPERATION_NOT_SUPPORTED = "80"; // 'Operation not supported'
-  string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
-  string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
-  string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = "84"; // 'Invalid optimal stable to total debt ratio'
-  string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
-  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
-  string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-  string public constant STABLE_BORROWING_ENABLED = "88"; // 'Stable borrowing is enabled'
-  string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
-  string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
-  string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
+  error CallerNotPoolAdmin(); // 'The caller of the function is not a pool admin'
+  error CallerNotPoolOrEmergencyAdmin(); // 'The caller of the function is not a pool or emergency admin'
+  error CallerNotRiskOrPoolAdmin(); // 'The caller of the function is not a risk or pool admin'
+  error CallerNotAssetListingOrPoolAdmin(); // 'The caller of the function is not an asset listing or pool admin'
+  error AddressesProviderNotRegistered(); // 'Pool addresses provider is not registered'
+  error InvalidAddressesProviderId(); // 'Invalid id for the pool addresses provider'
+  error NotContract(); // 'Address is not a contract'
+  error CallerNotPoolConfigurator(); // 'The caller of the function is not the pool configurator'
+  error CallerNotAToken(); // 'The caller of the function is not an AToken'
+  error InvalidAddressesProvider(); // 'The address of the pool addresses provider is invalid'
+  error InvalidFlashloanExecutorReturn(); // 'Invalid return value of the flashloan executor function'
+  error ReserveAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error NoMoreReservesAllowed(); // 'Maximum amount of reserves in the pool reached'
+  error EModeCategoryReserved(); // 'Zero eMode category is reserved for volatile heterogeneous assets'
+  error ReserveLiquidityNotZero(); // 'The liquidity of the reserve needs to be 0'
+  error FlashloanPremiumInvalid(); // 'Invalid flashloan premium'
+  error InvalidReserveParams(); // 'Invalid risk parameters for the reserve'
+  error InvalidEmodeCategoryParams(); // 'Invalid risk parameters for the eMode category'
+  error CallerMustBePool(); // 'The caller of this function must be a pool'
+  error InvalidMintAmount(); // 'Invalid amount to mint'
+  error InvalidBurnAmount(); // 'Invalid amount to burn'
+  error InvalidAmount(); // 'Amount must be greater than 0'
+  error ReserveInactive(); // 'Action requires an active reserve'
+  error ReserveFrozen(); // 'Action cannot be performed because the reserve is frozen'
+  error ReservePaused(); // 'Action cannot be performed because the reserve is paused'
+  error BorrowingNotEnabled(); // 'Borrowing is not enabled'
+  error NotEnoughAvailableUserBalance(); // 'User cannot withdraw more than the available balance'
+  error InvalidInterestRateModeSelected(); // 'Invalid interest rate mode selected'
+  error CollateralBalanceIsZero(); // 'The collateral balance is 0'
+  error HealthFactorLowerThanLiquidationThreshold(); // 'Health factor is below the liquidation threshold'
+  error CollateralCannotCoverNewBorrow(); // 'There is not enough collateral to cover a new borrow'
+  error NoDebtOfSelectedType(); // 'For repayment of a specific type of debt, the user needs to have debt that type'
+  error NoExplicitAmountToRepayOnBehalf(); // 'To repay on behalf of a user an explicit amount to repay is needed'
+  error UnderlyingBalanceZero(); // 'The underlying balance needs to be greater than 0'
+  error HealthFactorNotBelowThreshold(); // 'Health factor is not below the threshold'
+  error CollateralCannotBeLiquidated(); // 'The collateral chosen cannot be liquidated'
+  error SpecifiedCurrencyNotBorrowedByUser(); // 'User did not borrow the specified currency'
+  error InconsistentFlashloanParams(); // 'Inconsistent flashloan parameters'
+  error BorrowCapExceeded(); // 'Borrow cap is exceeded'
+  error SupplyCapExceeded(); // 'Supply cap is exceeded'
+  error DebtCeilingExceeded(); // 'Debt ceiling is exceeded'
+  error UnderlyingClaimableRightsNotZero(); // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
+  error VariableDebtSupplyNotZero(); // 'Variable debt supply is not zero'
+  error LtvValidationFailed(); // 'Ltv validation failed'
+  error InconsistentEModeCategory(); // 'Inconsistent eMode category'
+  error PriceOracleSentinelCheckFailed(); // 'Price oracle sentinel validation failed'
+  error AssetNotBorrowableInIsolation(); // 'Asset is not borrowable in isolation mode'
+  error ReserveAlreadyInitialized(); // 'Reserve has already been initialized'
+  error UserInIsolationModeOrLtvZero(); // 'User is in isolation mode or ltv is zero'
+  error InvalidLtv(); // 'Invalid ltv parameter for the reserve'
+  error InvalidLiquidationThreshold(); // 'Invalid liquidity threshold parameter for the reserve'
+  error InvalidLiquidationBonus(); // 'Invalid liquidity bonus parameter for the reserve'
+  error InvalidDecimals(); // 'Invalid decimals parameter of the underlying asset of the reserve'
+  error InvalidReserveFactor(); // 'Invalid reserve factor parameter for the reserve'
+  error InvalidBorrowCap(); // 'Invalid borrow cap for the reserve'
+  error InvalidSupplyCap(); // 'Invalid supply cap for the reserve'
+  error InvalidLiquidationProtocolFee(); // 'Invalid liquidation protocol fee for the reserve'
+  error InvalidDebtCeiling(); // 'Invalid debt ceiling for the reserve'
+  error InvalidReserveIndex(); // 'Invalid reserve index'
+  error AclAdminCannotBeZero(); // 'ACL admin cannot be set to the zero address'
+  error InconsistentParamsLength(); // 'Array parameters that should be equal length are not'
+  error ZeroAddressNotValid(); // 'Zero address not valid'
+  error InvalidExpiration(); // 'Invalid expiration'
+  error InvalidSignature(); // 'Invalid signature'
+  error OperationNotSupported(); // 'Operation not supported'
+  error DebtCeilingNotZero(); // 'Debt ceiling is not zero'
+  error AssetNotListed(); // 'Asset is not listed'
+  error InvalidOptimalUsageRatio(); // 'Invalid optimal usage ratio'
+  error UnderlyingCannotBeRescued(); // 'The underlying asset cannot be rescued'
+  error AddressesProviderAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error PoolAddressesDoNotMatch(); // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
+  error SiloedBorrowingViolation(); // 'User is trying to borrow multiple assets including a siloed one'
+  error ReserveDebtNotZero(); // the total debt of the reserve needs to be 0
+  error FlashloanDisabled(); // FlashLoaning for this asset is disabled
+  error InvalidMaxRate(); // The expect maximum borrow rate is invalid
+  error WithdrawToAToken(); // Withdrawing to the aToken is not allowed
+  error SupplyToAToken(); // Supplying to the aToken is not allowed
+  error Slope2MustBeGteSlope1(); // Variable interest rate slope 2 can not be lower than slope 1
+  error CallerNotRiskOrPoolOrEmergencyAdmin(); // 'The caller of the function is not a risk, pool or emergency admin'
+  error LiquidationGraceSentinelCheckFailed(); // 'Liquidation grace sentinel validation failed'
+  error InvalidGracePeriod(); // Grace period above a valid range
+  error InvalidFreezeState(); // Reserve is already in the passed freeze state
+  error NotBorrowableInEMode(); // Asset not borrowable in eMode
+  error CallerNotUmbrella(); // The caller of the function is not the umbrella contract
+  error ReserveNotInDeficit(); // The reserve is not in deficit
+  error MustNotLeaveDust(); // Below a certain threshold liquidators need to take the full position
+  error UserCannotHaveDebt(); // Thrown when a user tries to interact with a method that requires a position without debt
+  error SelfLiquidation(); // Thrown when a user tries to liquidate themselves
+  error CallerNotPositionManager(); // Thrown when the caller has not been enabled as a position manager of the on-behalf-of user
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GPv2SafeERC20.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/GPv2SafeERC20.sol
index d8f6104..ff964fb 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GPv2SafeERC20.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/GPv2SafeERC20.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: LGPL-3.0-or-later
-pragma solidity 0.8.10;
+pragma solidity ^0.8.10;
 
 import {IERC20} from "../../openzeppelin/contracts/IERC20.sol";
 
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoAToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoAToken.sol
deleted file mode 100644
index 3753726..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoAToken.sol
+++ /dev/null
@@ -1,242 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.10;
-
-import {IERC20} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {GPv2SafeERC20} from "@aave/core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol";
-import {VersionedInitializable} from
-  "@aave/core-v3/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol";
-import {Errors} from "@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "@aave/core-v3/contracts/interfaces/IPool.sol";
-import {IAToken} from "@aave/core-v3/contracts/interfaces/IAToken.sol";
-import {IAaveIncentivesController} from "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol";
-import {IInitializableAToken} from "@aave/core-v3/contracts/interfaces/IInitializableAToken.sol";
-import {ScaledBalanceTokenBase} from "@aave/core-v3/contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol";
-import {IncentivizedERC20} from "@aave/core-v3/contracts/protocol/tokenization/base/IncentivizedERC20.sol";
-import {EIP712Base} from "@aave/core-v3/contracts/protocol/tokenization/base/EIP712Base.sol";
-
-// Gho Imports
-import {IGhoToken} from "../../../gho/interfaces/IGhoToken.sol";
-import {IGhoFacilitator} from "../../../gho/interfaces/IGhoFacilitator.sol";
-import {IGhoAToken} from "./interfaces/IGhoAToken.sol";
-import {GhoVariableDebtToken} from "./GhoVariableDebtToken.sol";
-
-/**
- * @title GhoAToken
- * @author Aave
- * @notice Implementation of the interest bearing token for the Aave protocol
- */
-contract GhoAToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IGhoAToken {
-  using WadRayMath for uint256;
-  using GPv2SafeERC20 for IERC20;
-
-  bytes32 public constant PERMIT_TYPEHASH =
-    keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
-
-  uint256 public constant ATOKEN_REVISION = 0x1;
-
-  address internal _treasury;
-  address internal _underlyingAsset;
-
-  // Gho Storage
-  GhoVariableDebtToken internal _ghoVariableDebtToken;
-  address internal _ghoTreasury;
-
-  /// @inheritdoc VersionedInitializable
-  function getRevision() internal pure virtual override returns (uint256) {
-    return ATOKEN_REVISION;
-  }
-
-  /**
-   * @dev Constructor.
-   * @param pool The address of the Pool contract
-   */
-  constructor(IPool pool) ScaledBalanceTokenBase(pool, "GHO_ATOKEN_IMPL", "GHO_ATOKEN_IMPL", 0) EIP712Base() {
-    // Intentionally left blank
-  }
-
-  /// @inheritdoc IInitializableAToken
-  function initialize(
-    IPool initializingPool,
-    address treasury,
-    address underlyingAsset,
-    IAaveIncentivesController incentivesController,
-    uint8 aTokenDecimals,
-    string calldata aTokenName,
-    string calldata aTokenSymbol,
-    bytes calldata params
-  ) external override initializer {
-    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
-    _setName(aTokenName);
-    _setSymbol(aTokenSymbol);
-    _setDecimals(aTokenDecimals);
-
-    _treasury = treasury;
-    _underlyingAsset = underlyingAsset;
-    _incentivesController = incentivesController;
-
-    _domainSeparator = _calculateDomainSeparator();
-
-    emit Initialized(
-      underlyingAsset,
-      address(POOL),
-      treasury,
-      address(incentivesController),
-      aTokenDecimals,
-      aTokenName,
-      aTokenSymbol,
-      params
-    );
-  }
-
-  /// @inheritdoc IAToken
-  function mint(address caller, address onBehalfOf, uint256 amount, uint256 index)
-    external
-    virtual
-    override
-    onlyPool
-    returns (bool)
-  {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /// @inheritdoc IAToken
-  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index)
-    external
-    virtual
-    override
-    onlyPool
-  {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /// @inheritdoc IAToken
-  function mintToTreasury(uint256 amount, uint256 index) external virtual override onlyPool {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /// @inheritdoc IAToken
-  function transferOnLiquidation(address from, address to, uint256 value) external virtual override onlyPool {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /// @inheritdoc IERC20
-  function balanceOf(address user) public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
-    return 0;
-  }
-
-  /// @inheritdoc IERC20
-  function totalSupply() public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {
-    return 0;
-  }
-
-  /// @inheritdoc IAToken
-  function RESERVE_TREASURY_ADDRESS() external view override returns (address) {
-    return _treasury;
-  }
-
-  /// @inheritdoc IAToken
-  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
-    return _underlyingAsset;
-  }
-
-  /**
-   * @notice Transfers the underlying asset to `target`.
-   * @dev It performs a mint of GHO on behalf of the `target`
-   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()
-   * @param target The recipient of the underlying
-   * @param amount The amount getting transferred
-   */
-  function transferUnderlyingTo(address target, uint256 amount) external virtual override onlyPool {
-    IGhoToken(_underlyingAsset).mint(target, amount);
-  }
-
-  /// @inheritdoc IAToken
-  function handleRepayment(address user, address onBehalfOf, uint256 amount) external virtual override onlyPool {
-    uint256 balanceFromInterest = _ghoVariableDebtToken.getBalanceFromInterest(onBehalfOf);
-    if (amount <= balanceFromInterest) {
-      _ghoVariableDebtToken.decreaseBalanceFromInterest(onBehalfOf, amount);
-    } else {
-      _ghoVariableDebtToken.decreaseBalanceFromInterest(onBehalfOf, balanceFromInterest);
-      IGhoToken(_underlyingAsset).burn(amount - balanceFromInterest);
-    }
-  }
-
-  /// @inheritdoc IGhoFacilitator
-  function distributeFeesToTreasury() external virtual override {
-    uint256 balance = IERC20(_underlyingAsset).balanceOf(address(this));
-    IERC20(_underlyingAsset).transfer(_ghoTreasury, balance);
-    emit FeesDistributedToTreasury(_ghoTreasury, _underlyingAsset, balance);
-  }
-
-  /// @inheritdoc IAToken
-  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
-    external
-    override
-  {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /**
-   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()
-   * @param from The source address
-   * @param to The destination address
-   * @param amount The amount getting transferred
-   */
-  function _transfer(address from, address to, uint128 amount) internal override {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /**
-   * @dev Overrides the base function to fully implement IAToken
-   * @dev see `EIP712Base.DOMAIN_SEPARATOR()` for more detailed documentation
-   */
-  function DOMAIN_SEPARATOR() public view override(IAToken, EIP712Base) returns (bytes32) {
-    return super.DOMAIN_SEPARATOR();
-  }
-
-  /**
-   * @dev Overrides the base function to fully implement IAToken
-   * @dev see `EIP712Base.nonces()` for more detailed documentation
-   */
-  function nonces(address owner) public view override(IAToken, EIP712Base) returns (uint256) {
-    return super.nonces(owner);
-  }
-
-  /// @inheritdoc EIP712Base
-  function _EIP712BaseId() internal view override returns (string memory) {
-    return name();
-  }
-
-  /// @inheritdoc IAToken
-  function rescueTokens(address token, address to, uint256 amount) external override onlyPoolAdmin {
-    require(token != _underlyingAsset, Errors.UNDERLYING_CANNOT_BE_RESCUED);
-    IERC20(token).safeTransfer(to, amount);
-  }
-
-  /// @inheritdoc IGhoAToken
-  function setVariableDebtToken(address ghoVariableDebtToken) external override onlyPoolAdmin {
-    require(address(_ghoVariableDebtToken) == address(0), "VARIABLE_DEBT_TOKEN_ALREADY_SET");
-    require(ghoVariableDebtToken != address(0), "ZERO_ADDRESS_NOT_VALID");
-    _ghoVariableDebtToken = GhoVariableDebtToken(ghoVariableDebtToken);
-    emit VariableDebtTokenSet(ghoVariableDebtToken);
-  }
-
-  /// @inheritdoc IGhoAToken
-  function getVariableDebtToken() external view override returns (address) {
-    return address(_ghoVariableDebtToken);
-  }
-
-  /// @inheritdoc IGhoFacilitator
-  function updateGhoTreasury(address newGhoTreasury) external override onlyPoolAdmin {
-    require(newGhoTreasury != address(0), "ZERO_ADDRESS_NOT_VALID");
-    address oldGhoTreasury = _ghoTreasury;
-    _ghoTreasury = newGhoTreasury;
-    emit GhoTreasuryUpdated(oldGhoTreasury, newGhoTreasury);
-  }
-
-  /// @inheritdoc IGhoFacilitator
-  function getGhoTreasury() external view override returns (address) {
-    return _ghoTreasury;
-  }
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoVariableDebtToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoVariableDebtToken.sol
deleted file mode 100644
index 5ab5452..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/GhoVariableDebtToken.sol
+++ /dev/null
@@ -1,463 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.10;
-
-import {IERC20} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {SafeCast} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {VersionedInitializable} from
-  "@aave/core-v3/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol";
-import {WadRayMath} from "@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol";
-import {PercentageMath} from "@aave/core-v3/contracts/protocol/libraries/math/PercentageMath.sol";
-import {Errors} from "@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol";
-import {IPool} from "@aave/core-v3/contracts/interfaces/IPool.sol";
-import {IAaveIncentivesController} from "@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol";
-import {IInitializableDebtToken} from "@aave/core-v3/contracts/interfaces/IInitializableDebtToken.sol";
-import {IVariableDebtToken} from "@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol";
-import {EIP712Base} from "@aave/core-v3/contracts/protocol/tokenization/base/EIP712Base.sol";
-import {DebtTokenBase} from "@aave/core-v3/contracts/protocol/tokenization/base/DebtTokenBase.sol";
-
-// Gho Imports
-import {IGhoDiscountRateStrategy} from "../interestStrategy/interfaces/IGhoDiscountRateStrategy.sol";
-import {IGhoVariableDebtToken} from "./interfaces/IGhoVariableDebtToken.sol";
-import {ScaledBalanceTokenBase} from "./base/ScaledBalanceTokenBase.sol";
-
-/**
- * @title GhoVariableDebtToken
- * @author Aave
- * @notice Implements a variable debt token to track the borrowing positions of users
- * at variable rate mode for GHO
- * @dev Transfer and approve functionalities are disabled since its a non-transferable token
- */
-contract GhoVariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IGhoVariableDebtToken {
-  using WadRayMath for uint256;
-  using SafeCast for uint256;
-  using PercentageMath for uint256;
-
-  uint256 public constant DEBT_TOKEN_REVISION = 0x1;
-
-  // Corresponding AToken to this DebtToken
-  address internal _ghoAToken;
-
-  // Token that grants discounts off the debt interest
-  IERC20 internal _discountToken;
-
-  // Strategy of the discount rate to apply on debt interests
-  IGhoDiscountRateStrategy internal _discountRateStrategy;
-
-  struct GhoUserState {
-    // Accumulated debt interest of the user
-    uint128 accumulatedDebtInterest;
-    // Discount percent of the user (expressed in bps)
-    uint16 discountPercent;
-  }
-
-  // Map of users' address and their gho state data (userAddress => ghoUserState)
-  mapping(address => GhoUserState) internal _ghoUserState;
-
-  /**
-   * @dev Only discount token can call functions marked by this modifier.
-   */
-  modifier onlyDiscountToken() {
-    require(address(_discountToken) == msg.sender, "CALLER_NOT_DISCOUNT_TOKEN");
-    _;
-  }
-
-  /**
-   * @dev Only AToken can call functions marked by this modifier.
-   */
-  modifier onlyAToken() {
-    require(_ghoAToken == msg.sender, "CALLER_NOT_A_TOKEN");
-    _;
-  }
-
-  /**
-   * @dev Constructor.
-   * @param pool The address of the Pool contract
-   */
-  constructor(IPool pool)
-    DebtTokenBase()
-    ScaledBalanceTokenBase(pool, "GHO_VARIABLE_DEBT_TOKEN_IMPL", "GHO_VARIABLE_DEBT_TOKEN_IMPL", 0)
-  {
-    // Intentionally left blank
-  }
-
-  /// @inheritdoc IInitializableDebtToken
-  function initialize(
-    IPool initializingPool,
-    address underlyingAsset,
-    IAaveIncentivesController incentivesController,
-    uint8 debtTokenDecimals,
-    string memory debtTokenName,
-    string memory debtTokenSymbol,
-    bytes calldata params
-  ) external override initializer {
-    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);
-    _setName(debtTokenName);
-    _setSymbol(debtTokenSymbol);
-    _setDecimals(debtTokenDecimals);
-
-    _underlyingAsset = underlyingAsset;
-    _incentivesController = incentivesController;
-
-    _domainSeparator = _calculateDomainSeparator();
-
-    emit Initialized(
-      underlyingAsset,
-      address(POOL),
-      address(incentivesController),
-      debtTokenDecimals,
-      debtTokenName,
-      debtTokenSymbol,
-      params
-    );
-  }
-
-  /// @inheritdoc VersionedInitializable
-  function getRevision() internal pure virtual override returns (uint256) {
-    return DEBT_TOKEN_REVISION;
-  }
-
-  /// @inheritdoc IERC20
-  function balanceOf(address user) public view virtual override returns (uint256) {
-    uint256 scaledBalance = super.balanceOf(user);
-
-    if (scaledBalance == 0) {
-      return 0;
-    }
-
-    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);
-    uint256 previousIndex = _userState[user].additionalData;
-    uint256 balance = scaledBalance.rayMul(index);
-    if (index == previousIndex) {
-      return balance;
-    }
-
-    uint256 discountPercent = _ghoUserState[user].discountPercent;
-    if (discountPercent != 0) {
-      uint256 balanceIncrease = balance - scaledBalance.rayMul(previousIndex);
-      balance -= balanceIncrease.percentMul(discountPercent);
-    }
-
-    return balance;
-  }
-
-  /// @inheritdoc IVariableDebtToken
-  function mint(address user, address onBehalfOf, uint256 amount, uint256 index)
-    external
-    virtual
-    override
-    onlyPool
-    returns (bool, uint256)
-  {
-    if (user != onBehalfOf) {
-      _decreaseBorrowAllowance(onBehalfOf, user, amount);
-    }
-    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());
-  }
-
-  /// @inheritdoc IVariableDebtToken
-  function burn(address from, uint256 amount, uint256 index) external virtual override onlyPool returns (uint256) {
-    _burnScaled(from, address(0), amount, index);
-    return scaledTotalSupply();
-  }
-
-  /**
-   * @notice Returns the amount of tokens in existence.
-   * @dev It does not account for active discounts of the users. The discount is deducted from the user's debt at
-   * repayment / liquidation time, so this function does always return a greater or equal value than the actual total
-   * supply.
-   * @return The amount of tokens in existence (without accounting for active discounts on debt)
-   */
-  function totalSupply() public view virtual override returns (uint256) {
-    return super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));
-  }
-
-  /// @inheritdoc EIP712Base
-  function _EIP712BaseId() internal view override returns (string memory) {
-    return name();
-  }
-
-  /**
-   * @dev Being non transferrable, the debt token does not implement any of the
-   * standard ERC20 functions for transfer and allowance.
-   */
-  function transfer(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  function allowance(address, address) external view virtual override returns (uint256) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  function approve(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  function transferFrom(address, address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  function increaseAllowance(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  function decreaseAllowance(address, uint256) external virtual override returns (bool) {
-    revert(Errors.OPERATION_NOT_SUPPORTED);
-  }
-
-  /// @inheritdoc IVariableDebtToken
-  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {
-    return _underlyingAsset;
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function setAToken(address ghoAToken) external override onlyPoolAdmin {
-    require(_ghoAToken == address(0), "ATOKEN_ALREADY_SET");
-    require(ghoAToken != address(0), "ZERO_ADDRESS_NOT_VALID");
-    _ghoAToken = ghoAToken;
-    emit ATokenSet(ghoAToken);
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function getAToken() external view override returns (address) {
-    return _ghoAToken;
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function updateDiscountRateStrategy(address newDiscountRateStrategy) external override onlyPoolAdmin {
-    require(newDiscountRateStrategy != address(0), "ZERO_ADDRESS_NOT_VALID");
-    address oldDiscountRateStrategy = address(_discountRateStrategy);
-    _discountRateStrategy = IGhoDiscountRateStrategy(newDiscountRateStrategy);
-    emit DiscountRateStrategyUpdated(oldDiscountRateStrategy, newDiscountRateStrategy);
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function getDiscountRateStrategy() external view override returns (address) {
-    return address(_discountRateStrategy);
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function updateDiscountToken(address newDiscountToken) external override onlyPoolAdmin {
-    require(newDiscountToken != address(0), "ZERO_ADDRESS_NOT_VALID");
-    address oldDiscountToken = address(_discountToken);
-    _discountToken = IERC20(newDiscountToken);
-    emit DiscountTokenUpdated(oldDiscountToken, newDiscountToken);
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function getDiscountToken() external view override returns (address) {
-    return address(_discountToken);
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function updateDiscountDistribution(
-    address sender,
-    address recipient,
-    uint256 senderDiscountTokenBalance,
-    uint256 recipientDiscountTokenBalance,
-    uint256 amount
-  ) external override onlyDiscountToken {
-    uint256 senderPreviousScaledBalance = super.balanceOf(sender);
-    uint256 recipientPreviousScaledBalance = super.balanceOf(recipient);
-
-    // Skipping computation in case users do not have a position
-    if (senderPreviousScaledBalance == 0 && recipientPreviousScaledBalance == 0) {
-      return;
-    }
-
-    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);
-
-    uint256 balanceIncrease;
-    uint256 discountScaled;
-
-    if (senderPreviousScaledBalance > 0) {
-      (balanceIncrease, discountScaled) =
-        _accrueDebtOnAction(sender, senderPreviousScaledBalance, _ghoUserState[sender].discountPercent, index);
-
-      _burn(sender, discountScaled.toUint128());
-
-      _refreshDiscountPercent(
-        sender,
-        super.balanceOf(sender).rayMul(index),
-        senderDiscountTokenBalance - amount,
-        _ghoUserState[sender].discountPercent
-      );
-
-      emit Transfer(address(0), sender, balanceIncrease);
-      emit Mint(address(0), sender, balanceIncrease, balanceIncrease, index);
-    }
-
-    if (recipientPreviousScaledBalance > 0) {
-      (balanceIncrease, discountScaled) =
-        _accrueDebtOnAction(recipient, recipientPreviousScaledBalance, _ghoUserState[recipient].discountPercent, index);
-
-      _burn(recipient, discountScaled.toUint128());
-
-      _refreshDiscountPercent(
-        recipient,
-        super.balanceOf(recipient).rayMul(index),
-        recipientDiscountTokenBalance + amount,
-        _ghoUserState[recipient].discountPercent
-      );
-
-      emit Transfer(address(0), recipient, balanceIncrease);
-      emit Mint(address(0), recipient, balanceIncrease, balanceIncrease, index);
-    }
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function getDiscountPercent(address user) external view override returns (uint256) {
-    return _ghoUserState[user].discountPercent;
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function getBalanceFromInterest(address user) external view override returns (uint256) {
-    return _ghoUserState[user].accumulatedDebtInterest;
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function decreaseBalanceFromInterest(address user, uint256 amount) external override onlyAToken {
-    _ghoUserState[user].accumulatedDebtInterest = (_ghoUserState[user].accumulatedDebtInterest - amount).toUint128();
-  }
-
-  /// @inheritdoc IGhoVariableDebtToken
-  function rebalanceUserDiscountPercent(address user) external override {
-    uint256 index = POOL.getReserveNormalizedVariableDebt(_underlyingAsset);
-    uint256 previousScaledBalance = super.balanceOf(user);
-    uint256 discountPercent = _ghoUserState[user].discountPercent;
-
-    (uint256 balanceIncrease, uint256 discountScaled) =
-      _accrueDebtOnAction(user, previousScaledBalance, discountPercent, index);
-
-    _burn(user, discountScaled.toUint128());
-
-    _refreshDiscountPercent(user, super.balanceOf(user).rayMul(index), _discountToken.balanceOf(user), discountPercent);
-
-    emit Transfer(address(0), user, balanceIncrease);
-    emit Mint(address(0), user, balanceIncrease, balanceIncrease, index);
-  }
-
-  /**
-   * @notice Implements the basic logic to mint a scaled balance token.
-   * @param caller The address performing the mint
-   * @param onBehalfOf The address of the user that will receive the scaled tokens
-   * @param amount The amount of tokens getting minted
-   * @param index The next liquidity index of the reserve
-   * @return `true` if the the previous balance of the user was 0
-   */
-  function _mintScaled(address caller, address onBehalfOf, uint256 amount, uint256 index)
-    internal
-    override
-    returns (bool)
-  {
-    uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
-
-    uint256 previousScaledBalance = super.balanceOf(onBehalfOf);
-    uint256 discountPercent = _ghoUserState[onBehalfOf].discountPercent;
-    (uint256 balanceIncrease, uint256 discountScaled) =
-      _accrueDebtOnAction(onBehalfOf, previousScaledBalance, discountPercent, index);
-
-    // confirm the amount being borrowed is greater than the discount
-    if (amountScaled > discountScaled) {
-      _mint(onBehalfOf, (amountScaled - discountScaled).toUint128());
-    } else {
-      _burn(onBehalfOf, (discountScaled - amountScaled).toUint128());
-    }
-
-    _refreshDiscountPercent(
-      onBehalfOf, super.balanceOf(onBehalfOf).rayMul(index), _discountToken.balanceOf(onBehalfOf), discountPercent
-    );
-
-    uint256 amountToMint = amount + balanceIncrease;
-    emit Transfer(address(0), onBehalfOf, amountToMint);
-    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);
-
-    return previousScaledBalance == 0;
-  }
-
-  /**
-   * @notice Implements the basic logic to burn a scaled balance token.
-   * @dev In some instances, a burn transaction will emit a mint event
-   * if the amount to burn is less than the interest that the user accrued
-   * @param user The user which debt is burnt
-   * @param target The address that will receive the underlying, if any
-   * @param amount The amount getting burned
-   * @param index The variable debt index of the reserve
-   */
-  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal override {
-    uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
-
-    uint256 previousScaledBalance = super.balanceOf(user);
-    uint256 discountPercent = _ghoUserState[user].discountPercent;
-    (uint256 balanceIncrease, uint256 discountScaled) =
-      _accrueDebtOnAction(user, previousScaledBalance, discountPercent, index);
-
-    _burn(user, (amountScaled + discountScaled).toUint128());
-
-    _refreshDiscountPercent(user, super.balanceOf(user).rayMul(index), _discountToken.balanceOf(user), discountPercent);
-
-    if (balanceIncrease > amount) {
-      uint256 amountToMint = balanceIncrease - amount;
-      emit Transfer(address(0), user, amountToMint);
-      emit Mint(user, user, amountToMint, balanceIncrease, index);
-    } else {
-      uint256 amountToBurn = amount - balanceIncrease;
-      emit Transfer(user, address(0), amountToBurn);
-      emit Burn(user, target, amountToBurn, balanceIncrease, index);
-    }
-  }
-
-  /**
-   * @dev Accumulates debt of the user since last action.
-   * @dev It skips applying discount in case there is no balance increase or discount percent is zero.
-   * @param user The address of the user
-   * @param previousScaledBalance The previous scaled balance of the user
-   * @param discountPercent The discount percent
-   * @param index The variable debt index of the reserve
-   * @return The increase in scaled balance since the last action of `user`
-   * @return The discounted amount in scaled balance off the balance increase
-   */
-  function _accrueDebtOnAction(address user, uint256 previousScaledBalance, uint256 discountPercent, uint256 index)
-    internal
-    returns (uint256, uint256)
-  {
-    uint256 balanceIncrease =
-      previousScaledBalance.rayMul(index) - previousScaledBalance.rayMul(_userState[user].additionalData);
-
-    uint256 discountScaled = 0;
-    if (balanceIncrease != 0 && discountPercent != 0) {
-      uint256 discount = balanceIncrease.percentMul(discountPercent);
-      discountScaled = discount.rayDiv(index);
-      balanceIncrease = balanceIncrease - discount;
-    }
-
-    _userState[user].additionalData = index.toUint128();
-
-    _ghoUserState[user].accumulatedDebtInterest =
-      (balanceIncrease + _ghoUserState[user].accumulatedDebtInterest).toUint128();
-
-    return (balanceIncrease, discountScaled);
-  }
-
-  /**
-   * @dev Updates the discount percent of the user according to current discount rate strategy
-   * @param user The address of the user
-   * @param balance The debt balance of the user
-   * @param discountTokenBalance The discount token balance of the user
-   * @param previousDiscountPercent The previous discount percent of the user
-   */
-  function _refreshDiscountPercent(
-    address user,
-    uint256 balance,
-    uint256 discountTokenBalance,
-    uint256 previousDiscountPercent
-  ) internal {
-    uint256 newDiscountPercent = _discountRateStrategy.calculateDiscountRate(balance, discountTokenBalance);
-
-    if (previousDiscountPercent != newDiscountPercent) {
-      _ghoUserState[user].discountPercent = newDiscountPercent.toUint16();
-      emit DiscountPercentUpdated(user, previousDiscountPercent, newDiscountPercent);
-    }
-  }
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IACLManager.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IACLManager.sol
index 3cd09eb..6fa1a5e 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IACLManager.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IACLManager.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAToken.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAToken.sol
index 6c61282..e42351f 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAToken.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IERC20} from "../dependencies/openzeppelin/contracts/IERC20.sol";
@@ -53,8 +53,9 @@ interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {
    * @param from The address getting liquidated, current owner of the aTokens
    * @param to The recipient
    * @param value The amount of tokens getting transferred
+   * @param index The next liquidity index of the reserve
    */
-  function transferOnLiquidation(address from, address to, uint256 value) external;
+  function transferOnLiquidation(address from, address to, uint256 value, uint256 index) external;
 
   /**
    * @notice Transfers the underlying asset to `target`.
@@ -64,17 +65,6 @@ interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {
    */
   function transferUnderlyingTo(address target, uint256 amount) external;
 
-  /**
-   * @notice Handles the underlying received by the aToken after the transfer has been completed.
-   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the
-   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying
-   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.
-   * @param user The user executing the repayment
-   * @param onBehalfOf The address of the user who will get his debt reduced/removed
-   * @param amount The amount getting repaid
-   */
-  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;
-
   /**
    * @notice Allow passing a signed message to approve spending
    * @dev implements the permit function as for
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IATokenMainnetInstanceGHO.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IATokenMainnetInstanceGHO.sol
new file mode 100644
index 0000000..3837c2b
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IATokenMainnetInstanceGHO.sol
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.0;
+
+interface IATokenMainnetInstanceGHO {
+  /**
+   * @notice Resolves the facilitator by burning the specified amount of underlying GHO tokens.
+   * @dev This function can be called only once because `UpgradePayload` will remove
+   *      this contract as a facilitator from the GHO token.
+   * @param amount The amount of underlying GHO tokens to burn.
+   */
+  function resolveFacilitator(uint256 amount) external;
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAaveIncentivesController.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAaveIncentivesController.sol
index c06c605..7cc8421 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAaveIncentivesController.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAaveIncentivesController.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAaveOracle.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAaveOracle.sol
new file mode 100644
index 0000000..f7d85b7
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAaveOracle.sol
@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {IPriceOracleGetter} from "./IPriceOracleGetter.sol";
+import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
+
+/**
+ * @title IAaveOracle
+ * @author Aave
+ * @notice Defines the basic interface for the Aave Oracle
+ */
+interface IAaveOracle is IPriceOracleGetter {
+  /**
+   * @dev Emitted after the base currency is set
+   * @param baseCurrency The base currency of used for price quotes
+   * @param baseCurrencyUnit The unit of the base currency
+   */
+  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);
+
+  /**
+   * @dev Emitted after the price source of an asset is updated
+   * @param asset The address of the asset
+   * @param source The price source of the asset
+   */
+  event AssetSourceUpdated(address indexed asset, address indexed source);
+
+  /**
+   * @dev Emitted after the address of fallback oracle is updated
+   * @param fallbackOracle The address of the fallback oracle
+   */
+  event FallbackOracleUpdated(address indexed fallbackOracle);
+
+  /**
+   * @notice Returns the PoolAddressesProvider
+   * @return The address of the PoolAddressesProvider contract
+   */
+  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
+
+  /**
+   * @notice Sets or replaces price sources of assets
+   * @param assets The addresses of the assets
+   * @param sources The addresses of the price sources
+   */
+  function setAssetSources(address[] calldata assets, address[] calldata sources) external;
+
+  /**
+   * @notice Sets the fallback oracle
+   * @param fallbackOracle The address of the fallback oracle
+   */
+  function setFallbackOracle(address fallbackOracle) external;
+
+  /**
+   * @notice Returns a list of prices from a list of assets addresses
+   * @param assets The list of assets addresses
+   * @return The prices of the given assets
+   */
+  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);
+
+  /**
+   * @notice Returns the address of the source for an asset address
+   * @param asset The address of the asset
+   * @return The address of the source
+   */
+  function getSourceOfAsset(address asset) external view returns (address);
+
+  /**
+   * @notice Returns the address of the fallback oracle
+   * @return The address of the fallback oracle
+   */
+  function getFallbackOracle() external view returns (address);
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAccessControl.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAccessControl.sol
index 95c6b75..f70d8cc 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IAccessControl.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IAccessControl.sol
@@ -1,27 +1,37 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)
 
-pragma solidity ^0.8.0;
+pragma solidity ^0.8.20;
 
 /**
- * @dev External interface of AccessControl declared to support ERC165 detection.
+ * @dev External interface of AccessControl declared to support ERC-165 detection.
  */
 interface IAccessControl {
+  /**
+   * @dev The `account` is missing a role.
+   */
+  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
+
+  /**
+   * @dev The caller of a function is not the expected one.
+   *
+   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
+   */
+  error AccessControlBadConfirmation();
+
   /**
    * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
    *
    * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
    * {RoleAdminChanged} not being emitted signaling this.
-   *
-   * _Available since v3.1._
    */
   event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
 
   /**
    * @dev Emitted when `account` is granted `role`.
    *
-   * `sender` is the account that originated the contract call, an admin role
-   * bearer except when using {AccessControl-_setupRole}.
+   * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).
+   * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.
    */
   event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
 
@@ -82,7 +92,7 @@ interface IAccessControl {
    *
    * Requirements:
    *
-   * - the caller must be `account`.
+   * - the caller must be `callerConfirmation`.
    */
-  function renounceRole(bytes32 role, address account) external;
+  function renounceRole(bytes32 role, address callerConfirmation) external;
 }
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ICollector.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ICollector.sol
new file mode 100644
index 0000000..ae858b3
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ICollector.sol
@@ -0,0 +1,219 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {IERC20} from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
+
+interface ICollector {
+  struct Stream {
+    uint256 deposit;
+    uint256 ratePerSecond;
+    uint256 remainingBalance;
+    uint256 startTime;
+    uint256 stopTime;
+    address recipient;
+    address sender;
+    address tokenAddress;
+    bool isEntity;
+  }
+
+  /**
+   * @dev Withdraw amount exceeds available balance
+   */
+  error BalanceExceeded();
+
+  /**
+   * @dev Deposit smaller than time delta
+   */
+  error DepositSmallerTimeDelta();
+
+  /**
+   * @dev Deposit not multiple of time delta
+   */
+  error DepositNotMultipleTimeDelta();
+
+  /**
+   * @dev Recipient cannot be the contract itself or msg.sender
+   */
+  error InvalidRecipient();
+
+  /**
+   * @dev Start time cannot be before block.timestamp
+   */
+  error InvalidStartTime();
+
+  /**
+   * @dev Stop time must be greater than startTime
+   */
+  error InvalidStopTime();
+
+  /**
+   * @dev Provided address cannot be the zero-address
+   */
+  error InvalidZeroAddress();
+
+  /**
+   * @dev Amount cannot be zero
+   */
+  error InvalidZeroAmount();
+
+  /**
+   * @dev Only caller with FUNDS_ADMIN role can call
+   */
+  error OnlyFundsAdmin();
+
+  /**
+   * @dev Only caller with FUNDS_ADMIN role or stream recipient can call
+   */
+  error OnlyFundsAdminOrRecipient();
+
+  /**
+   * @dev The provided ID does not belong to an existing stream
+   */
+  error StreamDoesNotExist();
+
+  /**
+   * @notice Emitted when the new stream is created
+   * @param streamId The identifier of the stream.
+   * @param sender The address of the collector.
+   * @param recipient The address towards which the money is streamed.
+   * @param deposit The amount of money to be streamed.
+   * @param tokenAddress The ERC20 token to use as streaming currency.
+   * @param startTime The unix timestamp for when the stream starts.
+   * @param stopTime The unix timestamp for when the stream stops.
+   *
+   */
+  event CreateStream(
+    uint256 indexed streamId,
+    address indexed sender,
+    address indexed recipient,
+    uint256 deposit,
+    address tokenAddress,
+    uint256 startTime,
+    uint256 stopTime
+  );
+
+  /**
+   * @notice Emmitted when withdraw happens from the contract to the recipient's account.
+   * @param streamId The id of the stream to withdraw tokens from.
+   * @param recipient The address towards which the money is streamed.
+   * @param amount The amount of tokens to withdraw.
+   */
+  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);
+
+  /**
+   * @notice Emmitted when the stream is canceled.
+   * @param streamId The id of the stream to withdraw tokens from.
+   * @param sender The address of the collector.
+   * @param recipient The address towards which the money is streamed.
+   * @param senderBalance The sender's balance at the moment of cancelling.
+   * @param recipientBalance The recipient's balance at the moment of cancelling.
+   */
+  event CancelStream(
+    uint256 indexed streamId,
+    address indexed sender,
+    address indexed recipient,
+    uint256 senderBalance,
+    uint256 recipientBalance
+  );
+
+  /**
+   * @notice FUNDS_ADMIN role granted by ACL Manager
+   *
+   */
+  function FUNDS_ADMIN_ROLE() external view returns (bytes32);
+
+  /**
+   * @notice Returns the mock ETH reference address
+   * @return address The address
+   *
+   */
+  function ETH_MOCK_ADDRESS() external pure returns (address);
+
+  /**
+   * @notice Checks if address is funds admin
+   * @return bool If the address has the funds admin role
+   *
+   */
+  function isFundsAdmin(address admin) external view returns (bool);
+
+  /**
+   * @notice Returns the available funds for the given stream id and address.
+   * @param streamId The id of the stream for which to query the balance.
+   * @param who The address for which to query the balance.
+   * @notice Returns the total funds allocated to `who` as uint256.
+   *
+   */
+  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);
+
+  /**
+   * @dev Function for the funds admin to give ERC20 allowance to other parties
+   * @param token The address of the token to give allowance from
+   * @param recipient Allowance's recipient
+   * @param amount Allowance to approve
+   *
+   */
+  function approve(IERC20 token, address recipient, uint256 amount) external;
+
+  /**
+   * @notice Function for the funds admin to transfer ERC20 tokens to other parties
+   * @param token The address of the token to transfer
+   * @param recipient Transfer's recipient
+   * @param amount Amount to transfer
+   *
+   */
+  function transfer(IERC20 token, address recipient, uint256 amount) external;
+
+  /**
+   * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.
+   * @param recipient The address towards which the money is streamed.
+   * @param deposit The amount of money to be streamed.
+   * @param tokenAddress The ERC20 token to use as streaming currency.
+   * @param startTime The unix timestamp for when the stream starts.
+   * @param stopTime The unix timestamp for when the stream stops.
+   * @return streamId the uint256 id of the newly created stream.
+   */
+  function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)
+    external
+    returns (uint256 streamId);
+
+  /**
+   * @notice Returns the stream with all its properties.
+   * @dev Throws if the id does not point to a valid stream.
+   * @param streamId The id of the stream to query.
+   * @notice Returns the stream object.
+   */
+  function getStream(uint256 streamId)
+    external
+    view
+    returns (
+      address sender,
+      address recipient,
+      uint256 deposit,
+      address tokenAddress,
+      uint256 startTime,
+      uint256 stopTime,
+      uint256 remainingBalance,
+      uint256 ratePerSecond
+    );
+
+  /**
+   * @notice Withdraws from the contract to the recipient's account.
+   * @param streamId The id of the stream to withdraw tokens from.
+   * @param amount The amount of tokens to withdraw.
+   * @return bool Returns true if successful.
+   */
+  function withdrawFromStream(uint256 streamId, uint256 amount) external returns (bool);
+
+  /**
+   * @notice Cancels the stream and transfers the tokens back on a pro rata basis.
+   * @param streamId The id of the stream to cancel.
+   * @return bool Returns true if successful.
+   */
+  function cancelStream(uint256 streamId) external returns (bool);
+
+  /**
+   * @notice Returns the next available stream id
+   * @return nextStreamId Returns the stream id.
+   */
+  function getNextStreamId() external view returns (uint256);
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/ICreditDelegationToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/ICreditDelegationToken.sol
deleted file mode 100644
index 199df36..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/ICreditDelegationToken.sol
+++ /dev/null
@@ -1,57 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-/**
- * @title ICreditDelegationToken
- * @author Aave
- * @notice Defines the basic interface for a token supporting credit delegation.
- */
-interface ICreditDelegationToken {
-  /**
-   * @dev Emitted on `approveDelegation` and `borrowAllowance
-   * @param fromUser The address of the delegator
-   * @param toUser The address of the delegatee
-   * @param asset The address of the delegated asset
-   * @param amount The amount being delegated
-   */
-  event BorrowAllowanceDelegated(
-    address indexed fromUser, address indexed toUser, address indexed asset, uint256 amount
-  );
-
-  /**
-   * @notice Delegates borrowing power to a user on the specific debt token.
-   * Delegation will still respect the liquidation constraints (even if delegated, a
-   * delegatee cannot force a delegator HF to go below 1)
-   * @param delegatee The address receiving the delegated borrowing power
-   * @param amount The maximum amount being delegated.
-   */
-  function approveDelegation(address delegatee, uint256 amount) external;
-
-  /**
-   * @notice Returns the borrow allowance of the user
-   * @param fromUser The user to giving allowance
-   * @param toUser The user to give allowance to
-   * @return The current allowance of `toUser`
-   */
-  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);
-
-  /**
-   * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature
-   * @param delegator The delegator of the credit
-   * @param delegatee The delegatee that can use the credit
-   * @param value The amount to be delegated
-   * @param deadline The deadline timestamp, type(uint256).max for max deadline
-   * @param v The V signature param
-   * @param s The S signature param
-   * @param r The R signature param
-   */
-  function delegationWithSig(
-    address delegator,
-    address delegatee,
-    uint256 value,
-    uint256 deadline,
-    uint8 v,
-    bytes32 r,
-    bytes32 s
-  ) external;
-}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IDefaultInterestRateStrategyV2.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IDefaultInterestRateStrategyV2.sol
new file mode 100644
index 0000000..c7f0796
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IDefaultInterestRateStrategyV2.sol
@@ -0,0 +1,161 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {IReserveInterestRateStrategy} from "./IReserveInterestRateStrategy.sol";
+import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
+
+/**
+ * @title IDefaultInterestRateStrategyV2
+ * @author BGD Labs
+ * @notice Interface of the default interest rate strategy used by the Aave protocol
+ */
+interface IDefaultInterestRateStrategyV2 is IReserveInterestRateStrategy {
+  /**
+   * @notice Holds the interest rate data for a given reserve
+   *
+   * @dev Since values are in bps, they are multiplied by 1e23 in order to become rays with 27 decimals. This
+   * in turn means that the maximum supported interest rate is 4294967295 (2**32-1) bps or 42949672.95%.
+   *
+   * @param optimalUsageRatio The optimal usage ratio, in bps
+   * @param baseVariableBorrowRate The base variable borrow rate, in bps
+   * @param variableRateSlope1 The slope of the variable interest curve, before hitting the optimal ratio, in bps
+   * @param variableRateSlope2 The slope of the variable interest curve, after hitting the optimal ratio, in bps
+   */
+  struct InterestRateData {
+    uint16 optimalUsageRatio;
+    uint32 baseVariableBorrowRate;
+    uint32 variableRateSlope1;
+    uint32 variableRateSlope2;
+  }
+
+  /**
+   * @notice The interest rate data, where all values are in ray (fixed-point 27 decimal numbers) for a given reserve,
+   * used in in-memory calculations.
+   *
+   * @param optimalUsageRatio The optimal usage ratio
+   * @param baseVariableBorrowRate The base variable borrow rate
+   * @param variableRateSlope1 The slope of the variable interest curve, before hitting the optimal ratio
+   * @param variableRateSlope2 The slope of the variable interest curve, after hitting the optimal ratio
+   */
+  struct InterestRateDataRay {
+    uint256 optimalUsageRatio;
+    uint256 baseVariableBorrowRate;
+    uint256 variableRateSlope1;
+    uint256 variableRateSlope2;
+  }
+
+  /**
+   * @notice emitted when new interest rate data is set in a reserve
+   *
+   * @param reserve address of the reserve that has new interest rate data set
+   * @param optimalUsageRatio The optimal usage ratio, in bps
+   * @param baseVariableBorrowRate The base variable borrow rate, in bps
+   * @param variableRateSlope1 The slope of the variable interest curve, before hitting the optimal ratio, in bps
+   * @param variableRateSlope2 The slope of the variable interest curve, after hitting the optimal ratio, in bps
+   */
+  event RateDataUpdate(
+    address indexed reserve,
+    uint256 optimalUsageRatio,
+    uint256 baseVariableBorrowRate,
+    uint256 variableRateSlope1,
+    uint256 variableRateSlope2
+  );
+
+  /**
+   * @notice Returns the address of the PoolAddressesProvider
+   * @return The address of the PoolAddressesProvider contract
+   */
+  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
+
+  /**
+   * @notice Returns the maximum value achievable for variable borrow rate, in bps
+   * @return The maximum rate
+   */
+  function MAX_BORROW_RATE() external view returns (uint256);
+
+  /**
+   * @notice Returns the minimum optimal point, in bps
+   * @return The optimal point
+   */
+  function MIN_OPTIMAL_POINT() external view returns (uint256);
+
+  /**
+   * @notice Returns the maximum optimal point, in bps
+   * @return The optimal point
+   */
+  function MAX_OPTIMAL_POINT() external view returns (uint256);
+
+  /**
+   * notice Returns the full InterestRateData object for the given reserve, in ray
+   *
+   * @param reserve The reserve to get the data of
+   *
+   * @return The InterestRateDataRay object for the given reserve
+   */
+  function getInterestRateData(address reserve) external view returns (InterestRateDataRay memory);
+
+  /**
+   * notice Returns the full InterestRateDataRay object for the given reserve, in bps
+   *
+   * @param reserve The reserve to get the data of
+   *
+   * @return The InterestRateData object for the given reserve
+   */
+  function getInterestRateDataBps(address reserve) external view returns (InterestRateData memory);
+
+  /**
+   * @notice Returns the optimal usage rate for the given reserve in ray
+   *
+   * @param reserve The reserve to get the optimal usage rate of
+   *
+   * @return The optimal usage rate is the level of borrow / collateral at which the borrow rate
+   */
+  function getOptimalUsageRatio(address reserve) external view returns (uint256);
+
+  /**
+   * @notice Returns the variable rate slope below optimal usage ratio in ray
+   * @dev It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO
+   *
+   * @param reserve The reserve to get the variable rate slope 1 of
+   *
+   * @return The variable rate slope
+   */
+  function getVariableRateSlope1(address reserve) external view returns (uint256);
+
+  /**
+   * @notice Returns the variable rate slope above optimal usage ratio in ray
+   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO
+   *
+   * @param reserve The reserve to get the variable rate slope 2 of
+   *
+   * @return The variable rate slope
+   */
+  function getVariableRateSlope2(address reserve) external view returns (uint256);
+
+  /**
+   * @notice Returns the base variable borrow rate, in ray
+   *
+   * @param reserve The reserve to get the base variable borrow rate of
+   *
+   * @return The base variable borrow rate
+   */
+  function getBaseVariableBorrowRate(address reserve) external view returns (uint256);
+
+  /**
+   * @notice Returns the maximum variable borrow rate, in ray
+   *
+   * @param reserve The reserve to get the maximum variable borrow rate of
+   *
+   * @return The maximum variable borrow rate
+   */
+  function getMaxVariableBorrowRate(address reserve) external view returns (uint256);
+
+  /**
+   * @notice Sets interest rate data for an Aave rate strategy
+   * @param reserve The reserve to update
+   * @param rateData The reserve interest rate data to apply to the given reserve
+   *   Being specific to this custom implementation, with custom struct type,
+   *   overloading the function on the generic interface
+   */
+  function setInterestRateParams(address reserve, InterestRateData calldata rateData) external;
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IERC20.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IERC20.sol
index 536ba0b..1eaa4ac 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IERC20.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IERC20.sol
@@ -1,10 +1,10 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)
 
-pragma solidity ^0.8.0;
+pragma solidity ^0.8.20;
 
 /**
- * @dev Interface of the ERC20 standard as defined in the EIP.
+ * @dev Interface of the ERC-20 standard as defined in the ERC.
  */
 interface IERC20 {
   /**
@@ -22,23 +22,23 @@ interface IERC20 {
   event Approval(address indexed owner, address indexed spender, uint256 value);
 
   /**
-   * @dev Returns the amount of tokens in existence.
+   * @dev Returns the value of tokens in existence.
    */
   function totalSupply() external view returns (uint256);
 
   /**
-   * @dev Returns the amount of tokens owned by `account`.
+   * @dev Returns the value of tokens owned by `account`.
    */
   function balanceOf(address account) external view returns (uint256);
 
   /**
-   * @dev Moves `amount` tokens from the caller's account to `to`.
+   * @dev Moves a `value` amount of tokens from the caller's account to `to`.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
    * Emits a {Transfer} event.
    */
-  function transfer(address to, uint256 amount) external returns (bool);
+  function transfer(address to, uint256 value) external returns (bool);
 
   /**
    * @dev Returns the remaining number of tokens that `spender` will be
@@ -50,7 +50,8 @@ interface IERC20 {
   function allowance(address owner, address spender) external view returns (uint256);
 
   /**
-   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
+   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
+   * caller's tokens.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
@@ -63,16 +64,16 @@ interface IERC20 {
    *
    * Emits an {Approval} event.
    */
-  function approve(address spender, uint256 amount) external returns (bool);
+  function approve(address spender, uint256 value) external returns (bool);
 
   /**
-   * @dev Moves `amount` tokens from `from` to `to` using the
-   * allowance mechanism. `amount` is then deducted from the caller's
+   * @dev Moves a `value` amount of tokens from `from` to `to` using the
+   * allowance mechanism. `value` is then deducted from the caller's
    * allowance.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
    * Emits a {Transfer} event.
    */
-  function transferFrom(address from, address to, uint256 amount) external returns (bool);
+  function transferFrom(address from, address to, uint256 value) external returns (bool);
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IERC20Detailed.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IERC20Detailed.sol
index a1a2610..e076998 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IERC20Detailed.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IERC20Detailed.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {IERC20} from "./IERC20.sol";
 
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoAToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoAToken.sol
deleted file mode 100644
index 4de85af..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoAToken.sol
+++ /dev/null
@@ -1,30 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {IAToken} from "@aave/core-v3/contracts/interfaces/IAToken.sol";
-import {IGhoFacilitator} from "../../../../gho/interfaces/IGhoFacilitator.sol";
-
-/**
- * @title IGhoAToken
- * @author Aave
- * @notice Defines the basic interface of the GhoAToken
- */
-interface IGhoAToken is IAToken, IGhoFacilitator {
-  /**
-   * @dev Emitted when variable debt contract is set
-   * @param variableDebtToken The address of the GhoVariableDebtToken contract
-   */
-  event VariableDebtTokenSet(address indexed variableDebtToken);
-
-  /**
-   * @notice Sets a reference to the GHO variable debt token
-   * @param ghoVariableDebtToken The address of the GhoVariableDebtToken contract
-   */
-  function setVariableDebtToken(address ghoVariableDebtToken) external;
-
-  /**
-   * @notice Returns the address of the GHO variable debt token
-   * @return The address of the GhoVariableDebtToken contract
-   */
-  function getVariableDebtToken() external view returns (address);
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoDiscountRateStrategy.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoDiscountRateStrategy.sol
deleted file mode 100644
index 46fd4ab..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoDiscountRateStrategy.sol
+++ /dev/null
@@ -1,17 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-/**
- * @title IGhoDiscountRateStrategy
- * @author Aave
- * @notice Defines the basic interface of the GhoDiscountRateStrategy
- */
-interface IGhoDiscountRateStrategy {
-  /**
-   * @notice Calculates the discount rate depending on the debt and discount token balances
-   * @param debtBalance The debt balance of the user
-   * @param discountTokenBalance The discount token balance of the user
-   * @return The discount rate, as a percentage - the maximum can be 10000 = 100.00%
-   */
-  function calculateDiscountRate(uint256 debtBalance, uint256 discountTokenBalance) external view returns (uint256);
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoFacilitator.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoFacilitator.sol
deleted file mode 100644
index 3d7bb0d..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoFacilitator.sol
+++ /dev/null
@@ -1,42 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-/**
- * @title IGhoFacilitator
- * @author Aave
- * @notice Defines the behavior of a Gho Facilitator
- */
-interface IGhoFacilitator {
-  /**
-   * @dev Emitted when fees are distributed to the GhoTreasury
-   * @param ghoTreasury The address of the ghoTreasury
-   * @param asset The address of the asset transferred to the ghoTreasury
-   * @param amount The amount of the asset transferred to the ghoTreasury
-   */
-  event FeesDistributedToTreasury(address indexed ghoTreasury, address indexed asset, uint256 amount);
-
-  /**
-   * @dev Emitted when Gho Treasury address is updated
-   * @param oldGhoTreasury The address of the old GhoTreasury contract
-   * @param newGhoTreasury The address of the new GhoTreasury contract
-   */
-  event GhoTreasuryUpdated(address indexed oldGhoTreasury, address indexed newGhoTreasury);
-
-  /**
-   * @notice Distribute fees to the GhoTreasury
-   */
-  function distributeFeesToTreasury() external;
-
-  /**
-   * @notice Updates the address of the Gho Treasury
-   * @dev WARNING: The GhoTreasury is where revenue fees are sent to. Update carefully
-   * @param newGhoTreasury The address of the GhoTreasury
-   */
-  function updateGhoTreasury(address newGhoTreasury) external;
-
-  /**
-   * @notice Returns the address of the Gho Treasury
-   * @return The address of the GhoTreasury contract
-   */
-  function getGhoTreasury() external view returns (address);
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoToken.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IGhoToken.sol
index 3d2548f..7a9c13d 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoToken.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IGhoToken.sol
@@ -1,13 +1,9 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
-import {IAccessControl} from "@openzeppelin/contracts/access/IAccessControl.sol";
+import {IERC20} from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
+import {IAccessControl} from "openzeppelin-contracts/contracts/access/IAccessControl.sol";
 
-/**
- * @title IGhoToken
- * @author Aave
- */
 interface IGhoToken is IERC20, IAccessControl {
   struct Facilitator {
     uint128 bucketCapacity;
@@ -15,36 +11,6 @@ interface IGhoToken is IERC20, IAccessControl {
     string label;
   }
 
-  /**
-   * @dev Emitted when a new facilitator is added
-   * @param facilitatorAddress The address of the new facilitator
-   * @param label A hashed human readable identifier for the facilitator
-   * @param bucketCapacity The initial capacity of the facilitator's bucket
-   */
-  event FacilitatorAdded(address indexed facilitatorAddress, bytes32 indexed label, uint256 bucketCapacity);
-
-  /**
-   * @dev Emitted when a facilitator is removed
-   * @param facilitatorAddress The address of the removed facilitator
-   */
-  event FacilitatorRemoved(address indexed facilitatorAddress);
-
-  /**
-   * @dev Emitted when the bucket capacity of a facilitator is updated
-   * @param facilitatorAddress The address of the facilitator whose bucket capacity is being changed
-   * @param oldCapacity The old capacity of the bucket
-   * @param newCapacity The new capacity of the bucket
-   */
-  event FacilitatorBucketCapacityUpdated(address indexed facilitatorAddress, uint256 oldCapacity, uint256 newCapacity);
-
-  /**
-   * @dev Emitted when the bucket level changed
-   * @param facilitatorAddress The address of the facilitator whose bucket level is being changed
-   * @param oldLevel The old level of the bucket
-   * @param newLevel The new level of the bucket
-   */
-  event FacilitatorBucketLevelUpdated(address indexed facilitatorAddress, uint256 oldLevel, uint256 newLevel);
-
   /**
    * @notice Returns the identifier of the Facilitator Manager Role
    * @return The bytes32 id hash of the FacilitatorManager role
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoVariableDebtToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoVariableDebtToken.sol
deleted file mode 100644
index dfce5ff..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IGhoVariableDebtToken.sol
+++ /dev/null
@@ -1,118 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-import {IVariableDebtToken} from "@aave/core-v3/contracts/interfaces/IVariableDebtToken.sol";
-
-/**
- * @title IGhoVariableDebtToken
- * @author Aave
- * @notice Defines the basic interface of the VariableDebtToken
- */
-interface IGhoVariableDebtToken is IVariableDebtToken {
-  /**
-   * @dev Emitted when the address of the GHO AToken is set
-   * @param aToken The address of the GhoAToken contract
-   */
-  event ATokenSet(address indexed aToken);
-
-  /**
-   * @dev Emitted when the GhoDiscountRateStrategy is updated
-   * @param oldDiscountRateStrategy The address of the old GhoDiscountRateStrategy
-   * @param newDiscountRateStrategy The address of the new GhoDiscountRateStrategy
-   */
-  event DiscountRateStrategyUpdated(address indexed oldDiscountRateStrategy, address indexed newDiscountRateStrategy);
-
-  /**
-   * @dev Emitted when the Discount Token is updated
-   * @param oldDiscountToken The address of the old discount token
-   * @param newDiscountToken The address of the new discount token
-   */
-  event DiscountTokenUpdated(address indexed oldDiscountToken, address indexed newDiscountToken);
-
-  /**
-   * @dev Emitted when a user's discount is updated
-   * @param user The address of the user
-   * @param oldDiscountPercent The old discount percent of the user
-   * @param newDiscountPercent The new discount percent of the user
-   */
-  event DiscountPercentUpdated(address indexed user, uint256 oldDiscountPercent, uint256 indexed newDiscountPercent);
-
-  /**
-   * @notice Sets a reference to the GHO AToken
-   * @param ghoAToken The address of the GhoAToken contract
-   */
-  function setAToken(address ghoAToken) external;
-
-  /**
-   * @notice Returns the address of the GHO AToken
-   * @return The address of the GhoAToken contract
-   */
-  function getAToken() external view returns (address);
-
-  /**
-   * @notice Updates the Discount Rate Strategy
-   * @param newDiscountRateStrategy The address of DiscountRateStrategy contract
-   */
-  function updateDiscountRateStrategy(address newDiscountRateStrategy) external;
-
-  /**
-   * @notice Returns the address of the Discount Rate Strategy
-   * @return The address of DiscountRateStrategy contract
-   */
-  function getDiscountRateStrategy() external view returns (address);
-
-  /**
-   * @notice Updates the Discount Token
-   * @param newDiscountToken The address of the DiscountToken contract
-   */
-  function updateDiscountToken(address newDiscountToken) external;
-
-  /**
-   * @notice Returns the address of the Discount Token
-   * @return address The address of DiscountToken
-   */
-  function getDiscountToken() external view returns (address);
-
-  /**
-   * @notice Updates the discount percents of the users when a discount token transfer occurs
-   * @param sender The address of sender
-   * @param recipient The address of recipient
-   * @param senderDiscountTokenBalance The sender discount token balance
-   * @param recipientDiscountTokenBalance The recipient discount token balance
-   * @param amount The amount of discount token being transferred
-   */
-  function updateDiscountDistribution(
-    address sender,
-    address recipient,
-    uint256 senderDiscountTokenBalance,
-    uint256 recipientDiscountTokenBalance,
-    uint256 amount
-  ) external;
-
-  /**
-   * @notice Returns the discount percent being applied to the debt interest of the user
-   * @param user The address of the user
-   * @return The discount percent (expressed in bps)
-   */
-  function getDiscountPercent(address user) external view returns (uint256);
-
-  /*
-   * @dev Returns the amount of interests accumulated by the user
-   * @param user The address of the user
-   * @return The amount of interests accumulated by the user
-   */
-  function getBalanceFromInterest(address user) external view returns (uint256);
-
-  /**
-   * @dev Decrease the amount of interests accumulated by the user
-   * @param user The address of the user
-   * @param amount The value to be decrease
-   */
-  function decreaseBalanceFromInterest(address user, uint256 amount) external;
-
-  /**
-   * @notice Rebalances the discount percent of a user
-   * @param user The address of the user
-   */
-  function rebalanceUserDiscountPercent(address user) external;
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IInitializableAToken.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IInitializableAToken.sol
index 03fe830..6773248 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IInitializableAToken.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IInitializableAToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IAaveIncentivesController} from "./IAaveIncentivesController.sol";
@@ -35,9 +35,7 @@ interface IInitializableAToken {
   /**
    * @notice Initializes the aToken
    * @param pool The pool contract that is initializing this contract
-   * @param treasury The address of the Aave treasury, receiving the fees on this aToken
    * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
    * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's
    * @param aTokenName The name of the aToken
    * @param aTokenSymbol The symbol of the aToken
@@ -45,9 +43,7 @@ interface IInitializableAToken {
    */
   function initialize(
     IPool pool,
-    address treasury,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 aTokenDecimals,
     string calldata aTokenName,
     string calldata aTokenSymbol,
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IInitializableDebtToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IInitializableDebtToken.sol
deleted file mode 100644
index 2a82625..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IInitializableDebtToken.sol
+++ /dev/null
@@ -1,52 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {IAaveIncentivesController} from "./IAaveIncentivesController.sol";
-import {IPool} from "./IPool.sol";
-
-/**
- * @title IInitializableDebtToken
- * @author Aave
- * @notice Interface for the initialize function common between debt tokens
- */
-interface IInitializableDebtToken {
-  /**
-   * @dev Emitted when a debt token is initialized
-   * @param underlyingAsset The address of the underlying asset
-   * @param pool The address of the associated pool
-   * @param incentivesController The address of the incentives controller for this aToken
-   * @param debtTokenDecimals The decimals of the debt token
-   * @param debtTokenName The name of the debt token
-   * @param debtTokenSymbol The symbol of the debt token
-   * @param params A set of encoded parameters for additional initialization
-   */
-  event Initialized(
-    address indexed underlyingAsset,
-    address indexed pool,
-    address incentivesController,
-    uint8 debtTokenDecimals,
-    string debtTokenName,
-    string debtTokenSymbol,
-    bytes params
-  );
-
-  /**
-   * @notice Initializes the debt token.
-   * @param pool The pool contract that is initializing this contract
-   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
-   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's
-   * @param debtTokenName The name of the token
-   * @param debtTokenSymbol The symbol of the token
-   * @param params A set of encoded parameters for additional initialization
-   */
-  function initialize(
-    IPool pool,
-    address underlyingAsset,
-    IAaveIncentivesController incentivesController,
-    uint8 debtTokenDecimals,
-    string memory debtTokenName,
-    string memory debtTokenSymbol,
-    bytes calldata params
-  ) external;
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IPool.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPool.sol
index 90f3cd9..38aad59 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IPool.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPool.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
@@ -10,27 +10,6 @@ import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
  * @notice Defines the basic interface for an Aave Pool.
  */
 interface IPool {
-  /**
-   * @dev Emitted on mintUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address initiating the supply
-   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens
-   * @param amount The amount of supplied assets
-   * @param referralCode The referral code used
-   */
-  event MintUnbacked(
-    address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode
-  );
-
-  /**
-   * @dev Emitted on backUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param backer The address paying for the backing
-   * @param amount The amount added as backing
-   * @param fee The amount paid in fees
-   */
-  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);
-
   /**
    * @dev Emitted on supply()
    * @param reserve The address of the underlying asset of the reserve
@@ -59,7 +38,7 @@ interface IPool {
    * initiator of the transaction on flashLoan()
    * @param onBehalfOf The address that will be getting the debt
    * @param amount The amount borrowed out
-   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable
+   * @param interestRateMode The rate mode: 2 for Variable, 1 is deprecated (changed on v3.2.0)
    * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray
    * @param referralCode The referral code used
    */
@@ -83,14 +62,6 @@ interface IPool {
    */
   event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount, bool useATokens);
 
-  /**
-   * @dev Emitted on swapBorrowRateMode()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user swapping his rate mode
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  event SwapBorrowRateMode(address indexed reserve, address indexed user, DataTypes.InterestRateMode interestRateMode);
-
   /**
    * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets
    * @param asset The address of the underlying asset of the reserve
@@ -119,20 +90,14 @@ interface IPool {
    */
   event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);
 
-  /**
-   * @dev Emitted on rebalanceStableBorrowRate()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user for which the rebalance has been executed
-   */
-  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);
-
   /**
    * @dev Emitted on flashLoan()
    * @param target The address of the flash loan receiver contract
    * @param initiator The address initiating the flash loan
    * @param asset The address of the asset being flash borrowed
    * @param amount The amount flash borrowed
-   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt
+   * @param interestRateMode The flashloan mode: 0 for regular flashloan,
+   *        1 for Stable (Deprecated on v3.2.0), 2 for Variable
    * @param premium The fee flash borrowed
    * @param referralCode The referral code used
    */
@@ -171,7 +136,7 @@ interface IPool {
    * @dev Emitted when the state of a reserve is updated.
    * @param reserve The address of the underlying asset of the reserve
    * @param liquidityRate The next liquidity rate
-   * @param stableBorrowRate The next stable borrow rate
+   * @param stableBorrowRate The next stable borrow rate @note deprecated on v3.2.0
    * @param variableBorrowRate The next variable borrow rate
    * @param liquidityIndex The next liquidity index
    * @param variableBorrowIndex The next variable borrow index
@@ -185,6 +150,14 @@ interface IPool {
     uint256 variableBorrowIndex
   );
 
+  /**
+   * @dev Emitted when the deficit of a reserve is covered.
+   * @param reserve The address of the underlying asset of the reserve
+   * @param caller The caller that triggered the DeficitCovered event
+   * @param amountCovered The amount of deficit covered
+   */
+  event DeficitCovered(address indexed reserve, address caller, uint256 amountCovered);
+
   /**
    * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
    * @param reserve The address of the reserve
@@ -193,23 +166,26 @@ interface IPool {
   event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
   /**
-   * @notice Mints an `amount` of aTokens to the `onBehalfOf`
-   * @param asset The address of the underlying asset to mint
-   * @param amount The amount to mint
-   * @param onBehalfOf The address that will receive the aTokens
-   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
-   *   0 if the action is executed directly by the user, without any middle-man
+   * @dev Emitted when deficit is realized on a liquidation.
+   * @param user The user address where the bad debt will be burned
+   * @param debtAsset The address of the underlying borrowed asset to be burned
+   * @param amountCreated The amount of deficit created
+   */
+  event DeficitCreated(address indexed user, address indexed debtAsset, uint256 amountCreated);
+
+  /**
+   * @dev Emitted when a position manager is approved by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+  event PositionManagerApproved(address indexed user, address indexed positionManager);
 
   /**
-   * @notice Back the current unbacked underlying with `amount` and pay `fee`.
-   * @param asset The address of the underlying asset to back
-   * @param amount The amount to back
-   * @param fee The amount paid in fees
-   * @return The backed amount
+   * @dev Emitted when a position manager is revoked by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);
+  event PositionManagerRevoked(address indexed user, address indexed positionManager);
 
   /**
    * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
@@ -265,13 +241,12 @@ interface IPool {
 
   /**
    * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower
-   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the
-   * corresponding debt token (StableDebtToken or VariableDebtToken)
+   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the VariableDebtToken
    * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet
-   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`
+   *   and 100 variable debt tokens
    * @param asset The address of the underlying asset to borrow
    * @param amount The amount to be borrowed
-   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
    * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself
@@ -283,11 +258,11 @@ interface IPool {
 
   /**
    * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned
-   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
+   * - E.g. User repays 100 USDC, burning 100 variable debt tokens of the `onBehalfOf` address
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -303,7 +278,7 @@ interface IPool {
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -327,35 +302,17 @@ interface IPool {
   /**
    * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the
    * equivalent debt tokens
-   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens
+   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable debt tokens
    * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken
    * balance is not enough to cover the whole debt
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode DEPRECATED in v3.2.0
    * @return The final amount repaid
    */
   function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);
 
-  /**
-   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa
-   * @param asset The address of the underlying asset borrowed
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;
-
-  /**
-   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.
-   * - Users can be rebalanced if the following conditions are satisfied:
-   *     1. Usage ratio is above 95%
-   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too
-   *        much has been borrowed at a stable rate and suppliers are not earning enough
-   * @param asset The address of the underlying asset borrowed
-   * @param user The address of the user to be rebalanced
-   */
-  function rebalanceStableBorrowRate(address asset, address user) external;
-
   /**
    * @notice Allows suppliers to enable/disable a specific supplied asset as collateral
    * @param asset The address of the underlying asset supplied
@@ -369,7 +326,7 @@ interface IPool {
    *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
-   * @param user The address of the borrower getting liquidated
+   * @param borrower The address of the borrower getting liquidated
    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
    * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
    * to receive the underlying collateral asset directly
@@ -377,7 +334,7 @@ interface IPool {
   function liquidationCall(
     address collateralAsset,
     address debtAsset,
-    address user,
+    address borrower,
     uint256 debtToCover,
     bool receiveAToken
   ) external;
@@ -392,9 +349,9 @@ interface IPool {
    * @param amounts The amounts of the assets being flash-borrowed
    * @param interestRateModes Types of the debt to open if the flash loan is not returned:
    *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver
-   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
+   *   1 -> Deprecated on v3.2.0
    *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
-   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
+   * @param onBehalfOf The address  that will receive the debt in the case of using 2 on `modes`
    * @param params Variadic packed params to pass to the receiver as extra information
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
@@ -452,37 +409,37 @@ interface IPool {
     );
 
   /**
-   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an
-   * interest rate strategy
+   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens
    * @dev Only callable by the PoolConfigurator contract
    * @param asset The address of the underlying asset of the reserve
    * @param aTokenAddress The address of the aToken that will be assigned to the reserve
-   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve
    * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
-   * @param interestRateStrategyAddress The address of the interest rate strategy contract
    */
-  function initReserve(
-    address asset,
-    address aTokenAddress,
-    address stableDebtAddress,
-    address variableDebtAddress,
-    address interestRateStrategyAddress
-  ) external;
+  function initReserve(address asset, address aTokenAddress, address variableDebtAddress) external;
 
   /**
    * @notice Drop a reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev Does not reset eMode flags, which must be considered when reusing the same reserve id for a different reserve.
    * @param asset The address of the underlying asset of the reserve
    */
   function dropReserve(address asset) external;
 
   /**
-   * @notice Updates the address of the interest rate strategy contract
+   * @notice Accumulates interest to all indexes of the reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
    * @param asset The address of the underlying asset of the reserve
-   * @param rateStrategyAddress The address of the interest rate strategy contract
    */
-  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;
+  function syncIndexesState(address asset) external;
+
+  /**
+   * @notice Updates interest rates on the reserve data
+   * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
+   * @param asset The address of the underlying asset of the reserve
+   */
+  function syncRatesState(address asset) external;
 
   /**
    * @notice Sets the configuration bitmap of the reserve as a whole
@@ -532,7 +489,14 @@ interface IPool {
    * @param asset The address of the underlying asset of the reserve
    * @return The state and configuration data of the reserve
    */
-  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);
+  function getReserveData(address asset) external view returns (DataTypes.ReserveDataLegacy memory);
+
+  /**
+   * @notice Returns the virtual underlying balance of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The reserve virtual underlying balance
+   */
+  function getVirtualUnderlyingBalance(address asset) external view returns (uint128);
 
   /**
    * @notice Validates and finalizes an aToken transfer
@@ -560,6 +524,13 @@ interface IPool {
    */
   function getReservesList() external view returns (address[] memory);
 
+  /**
+   * @notice Returns the number of initialized reserves
+   * @dev It includes dropped reserves
+   * @return The count
+   */
+  function getReservesCount() external view returns (uint256);
+
   /**
    * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct
    * @param id The id of the reserve as stored in the DataTypes.ReserveData struct
@@ -574,38 +545,77 @@ interface IPool {
   function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
 
   /**
-   * @notice Updates the protocol fee on the bridging
-   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury
+   * @notice Returns the ReserveInterestRateStrategy connected to all the reserves
+   * @return The address of the ReserveInterestRateStrategy contract
    */
-  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;
+  function RESERVE_INTEREST_RATE_STRATEGY() external view returns (address);
 
   /**
-   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:
-   * - A part is sent to aToken holders as extra, one time accumulated interest
-   * - A part is collected by the protocol treasury
-   * @dev The total premium is calculated on the total borrowed amount
-   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`
+   * @notice Updates flash loan premium. All this premium is collected by the protocol treasury.
+   * @dev The premium is calculated on the total borrowed amount
    * @dev Only callable by the PoolConfigurator contract
-   * @param flashLoanPremiumTotal The total premium, expressed in bps
-   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps
+   * @param flashLoanPremium The flash loan premium, expressed in bps
    */
-  function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;
+  function updateFlashloanPremium(uint128 flashLoanPremium) external;
 
   /**
-   * @notice Configures a new category for the eMode.
+   * @notice Configures a new or alters an existing collateral configuration of an eMode.
    * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.
    * The category 0 is reserved as it's the default for volatile assets
    * @param id The id of the category
    * @param config The configuration of the category
    */
-  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;
+  function configureEModeCategory(uint8 id, DataTypes.EModeCategoryBaseConfiguration memory config) external;
+
+  /**
+   * @notice Replaces the current eMode collateralBitmap.
+   * @param id The id of the category
+   * @param collateralBitmap The collateralBitmap of the category
+   */
+  function configureEModeCategoryCollateralBitmap(uint8 id, uint128 collateralBitmap) external;
+
+  /**
+   * @notice Replaces the current eMode borrowableBitmap.
+   * @param id The id of the category
+   * @param borrowableBitmap The borrowableBitmap of the category
+   */
+  function configureEModeCategoryBorrowableBitmap(uint8 id, uint128 borrowableBitmap) external;
 
   /**
    * @notice Returns the data of an eMode category
+   * @dev DEPRECATED use independent getters instead
    * @param id The id of the category
    * @return The configuration data of the category
    */
-  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);
+  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategoryLegacy memory);
+
+  /**
+   * @notice Returns the label of an eMode category
+   * @param id The id of the category
+   * @return The label of the category
+   */
+  function getEModeCategoryLabel(uint8 id) external view returns (string memory);
+
+  /**
+   * @notice Returns the collateral config of an eMode category
+   * @param id The id of the category
+   * @return The ltv,lt,lb of the category
+   */
+  function getEModeCategoryCollateralConfig(uint8 id) external view returns (DataTypes.CollateralConfig memory);
+
+  /**
+   * @notice Returns the collateralBitmap of an eMode category
+   * @param id The id of the category
+   * @return The collateralBitmap of the category
+   */
+  function getEModeCategoryCollateralBitmap(uint8 id) external view returns (uint128);
+
+  /**
+   * @notice Returns the borrowableBitmap of an eMode category
+   * @param id The id of the category
+   * @return The borrowableBitmap of the category
+   */
+  function getEModeCategoryBorrowableBitmap(uint8 id) external view returns (uint128);
 
   /**
    * @notice Allows a user to use the protocol in eMode
@@ -628,25 +638,34 @@ interface IPool {
   function resetIsolationModeTotalDebt(address asset) external;
 
   /**
-   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate
-   * @return The percentage of available liquidity to borrow, expressed in bps
+   * @notice Sets the liquidation grace period of the given asset
+   * @dev To enable a liquidation grace period, a timestamp in the future should be set,
+   *      To disable a liquidation grace period, any timestamp in the past works, like 0
+   * @param asset The address of the underlying asset to set the liquidationGracePeriod
+   * @param until Timestamp when the liquidation grace period will end
+   *
    */
-  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);
+  function setLiquidationGracePeriod(address asset, uint40 until) external;
 
   /**
-   * @notice Returns the total fee on flash loans
-   * @return The total fee on flashloans
+   * @notice Returns the liquidation grace period of the given asset
+   * @param asset The address of the underlying asset
+   * @return Timestamp when the liquidation grace period will end
+   *
    */
-  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
+  function getLiquidationGracePeriod(address asset) external view returns (uint40);
 
   /**
-   * @notice Returns the part of the bridge fees sent to protocol
-   * @return The bridge fee sent to the protocol treasury
+   * @notice Returns the total fee on flash loans.
+   * @dev From v3.4 all flashloan fees will be send to the treasury.
+   * @return The total fee on flashloans
    */
-  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);
+  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
 
   /**
    * @notice Returns the part of the flashloan fees sent to protocol
+   * @dev From v3.4 all flashloan fees will be send to the treasury and this value
+   *      is always 100_00.
    * @return The flashloan fee sent to the protocol treasury
    */
   function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);
@@ -684,4 +703,101 @@ interface IPool {
    *   0 if the action is executed directly by the user, without any middle-man
    */
   function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+
+  /**
+   * @notice It covers the deficit of a specified reserve by burning the equivalent aToken `amount` for assets
+   * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+   * @param asset The address of the underlying asset to cover the deficit.
+   * @param amount The amount to be covered, in aToken
+   */
+  function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+  /**
+   * @notice Approves or disapproves a position manager. This position manager will be able
+   * to call the `setUserUseReserveAsCollateralOnBehalfOf` and the
+   * `setUserEModeOnBehalfOf` function on behalf of the user.
+   * @param positionManager The address of the position manager
+   * @param approve True if the position manager should be approved, false otherwise
+   */
+  function approvePositionManager(address positionManager, bool approve) external;
+
+  /**
+   * @notice Renounces a position manager role for a given user.
+   * @param user The address of the user
+   */
+  function renouncePositionManagerRole(address user) external;
+
+  /**
+   * @notice Sets the use as collateral flag for the user on the specific reserve on behalf of the user.
+   * @param asset The address of the underlying asset of the reserve
+   * @param useAsCollateral True if the user wants to use the reserve as collateral, false otherwise
+   * @param onBehalfOf The address of the user
+   */
+  function setUserUseReserveAsCollateralOnBehalfOf(address asset, bool useAsCollateral, address onBehalfOf) external;
+
+  /**
+   * @notice Sets the eMode category for the user on the specific reserve on behalf of the user.
+   * @param categoryId The id of the category
+   * @param onBehalfOf The address of the user
+   */
+  function setUserEModeOnBehalfOf(uint8 categoryId, address onBehalfOf) external;
+
+  /*
+   * @notice Returns true if the `positionManager` address is approved to use the position manager role on behalf of the user.
+   * @param user The address of the user
+   * @param positionManager The address of the position manager
+   * @return True if the user is approved to use the position manager, false otherwise
+   */
+  function isApprovedPositionManager(address user, address positionManager) external view returns (bool);
+
+  /**
+   * @notice Returns the current deficit of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The current deficit of the reserve
+   */
+  function getReserveDeficit(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the aToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the aToken
+   */
+  function getReserveAToken(address asset) external view returns (address);
+
+  /**
+   * @notice Returns the variableDebtToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the variableDebtToken
+   */
+  function getReserveVariableDebtToken(address asset) external view returns (address);
+
+  /**
+   * @notice Gets the address of the external FlashLoanLogic
+   */
+  function getFlashLoanLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external BorrowLogic
+   */
+  function getBorrowLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external EModeLogic
+   */
+  function getEModeLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external LiquidationLogic
+   */
+  function getLiquidationLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external PoolLogic
+   */
+  function getPoolLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external SupplyLogic
+   */
+  function getSupplyLogic() external view returns (address);
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IPoolAddressesProvider.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolAddressesProvider.sol
index 08ed4a5..a27288b 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IPoolAddressesProvider.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolAddressesProvider.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolConfigurator.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolConfigurator.sol
new file mode 100644
index 0000000..0a94778
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolConfigurator.sol
@@ -0,0 +1,476 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {ConfiguratorInputTypes} from "../protocol/libraries/types/ConfiguratorInputTypes.sol";
+import {IDefaultInterestRateStrategyV2} from "./IDefaultInterestRateStrategyV2.sol";
+
+/**
+ * @title IPoolConfigurator
+ * @author Aave
+ * @notice Defines the basic interface for a Pool configurator.
+ */
+interface IPoolConfigurator {
+  /**
+   * @dev Emitted when a reserve is initialized.
+   * @param asset The address of the underlying asset of the reserve
+   * @param aToken The address of the associated aToken contract
+   * @param stableDebtToken, DEPRECATED in v3.2.0
+   * @param variableDebtToken The address of the associated variable rate debt token
+   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve
+   */
+  event ReserveInitialized(
+    address indexed asset,
+    address indexed aToken,
+    address stableDebtToken,
+    address variableDebtToken,
+    address interestRateStrategyAddress
+  );
+
+  /**
+   * @dev Emitted when borrowing is enabled or disabled on a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param enabled True if borrowing is enabled, false otherwise
+   */
+  event ReserveBorrowing(address indexed asset, bool enabled);
+
+  /**
+   * @dev Emitted when flashloans are enabled or disabled on a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param enabled True if flashloans are enabled, false otherwise
+   */
+  event ReserveFlashLoaning(address indexed asset, bool enabled);
+
+  /**
+   * @dev Emitted when the ltv is set for the frozen asset.
+   * @param asset The address of the underlying asset of the reserve
+   * @param ltv The loan to value of the asset when used as collateral
+   */
+  event PendingLtvChanged(address indexed asset, uint256 ltv);
+
+  /**
+   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param ltv The loan to value of the asset when used as collateral
+   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
+   * @param liquidationBonus The bonus liquidators receive to liquidate this asset
+   */
+  event CollateralConfigurationChanged(
+    address indexed asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus
+  );
+
+  /**
+   * @dev Emitted when a reserve is activated or deactivated
+   * @param asset The address of the underlying asset of the reserve
+   * @param active True if reserve is active, false otherwise
+   */
+  event ReserveActive(address indexed asset, bool active);
+
+  /**
+   * @dev Emitted when a reserve is frozen or unfrozen
+   * @param asset The address of the underlying asset of the reserve
+   * @param frozen True if reserve is frozen, false otherwise
+   */
+  event ReserveFrozen(address indexed asset, bool frozen);
+
+  /**
+   * @dev Emitted when a reserve is paused or unpaused
+   * @param asset The address of the underlying asset of the reserve
+   * @param paused True if reserve is paused, false otherwise
+   */
+  event ReservePaused(address indexed asset, bool paused);
+
+  /**
+   * @dev Emitted when a reserve is dropped.
+   * @param asset The address of the underlying asset of the reserve
+   */
+  event ReserveDropped(address indexed asset);
+
+  /**
+   * @dev Emitted when a reserve factor is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldReserveFactor The old reserve factor, expressed in bps
+   * @param newReserveFactor The new reserve factor, expressed in bps
+   */
+  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);
+
+  /**
+   * @dev Emitted when the borrow cap of a reserve is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldBorrowCap The old borrow cap
+   * @param newBorrowCap The new borrow cap
+   */
+  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);
+
+  /**
+   * @dev Emitted when the supply cap of a reserve is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldSupplyCap The old supply cap
+   * @param newSupplyCap The new supply cap
+   */
+  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);
+
+  /**
+   * @dev Emitted when the liquidation protocol fee of a reserve is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldFee The old liquidation protocol fee, expressed in bps
+   * @param newFee The new liquidation protocol fee, expressed in bps
+   */
+  event LiquidationProtocolFeeChanged(address indexed asset, uint256 oldFee, uint256 newFee);
+
+  /**
+   * @dev Emitted when the liquidation grace period is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param gracePeriodUntil Timestamp until when liquidations will not be allowed post-unpause
+   */
+  event LiquidationGracePeriodChanged(address indexed asset, uint40 gracePeriodUntil);
+
+  /**
+   * @dev Emitted when the liquidation grace period is disabled.
+   * @param asset The address of the underlying asset of the reserve
+   */
+  event LiquidationGracePeriodDisabled(address indexed asset);
+
+  /**
+   * @dev Emitted when an collateral configuration of an asset in an eMode is changed.
+   * @param asset The address of the underlying asset of the reserve
+   * @param categoryId The eMode category
+   * @param collateral True if the asset is enabled as collateral in the eMode, false otherwise.
+   */
+  event AssetCollateralInEModeChanged(address indexed asset, uint8 categoryId, bool collateral);
+
+  /**
+   * @dev Emitted when the borrowable configuration of an asset in an eMode changed.
+   * @param asset The address of the underlying asset of the reserve
+   * @param categoryId The eMode category
+   * @param borrowable True if the asset is enabled as borrowable in the eMode, false otherwise.
+   */
+  event AssetBorrowableInEModeChanged(address indexed asset, uint8 categoryId, bool borrowable);
+
+  /**
+   * @dev Emitted when a new eMode category is added or an existing category is altered.
+   * @param categoryId The new eMode category id
+   * @param ltv The ltv for the asset category in eMode
+   * @param liquidationThreshold The liquidationThreshold for the asset category in eMode
+   * @param liquidationBonus The liquidationBonus for the asset category in eMode
+   * @param oracle DEPRECATED in v3.2.0
+   * @param label A human readable identifier for the category
+   */
+  event EModeCategoryAdded(
+    uint8 indexed categoryId,
+    uint256 ltv,
+    uint256 liquidationThreshold,
+    uint256 liquidationBonus,
+    address oracle,
+    string label
+  );
+
+  /**
+   * @dev Emitted when a reserve interest strategy contract is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldStrategy The address of the old interest strategy contract
+   * @param newStrategy The address of the new interest strategy contract
+   */
+  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);
+
+  /**
+   * @dev Emitted when the data of a reserve interest strategy contract is updated.
+   * @param asset The address of the underlying asset of the reserve
+   * @param data abi encoded data
+   */
+  event ReserveInterestRateDataChanged(address indexed asset, address indexed strategy, bytes data);
+
+  /**
+   * @dev Emitted when an aToken implementation is upgraded.
+   * @param asset The address of the underlying asset of the reserve
+   * @param proxy The aToken proxy address
+   * @param implementation The new aToken implementation
+   */
+  event ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);
+
+  /**
+   * @dev Emitted when the implementation of a variable debt token is upgraded.
+   * @param asset The address of the underlying asset of the reserve
+   * @param proxy The variable debt token proxy address
+   * @param implementation The new aToken implementation
+   */
+  event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);
+
+  /**
+   * @dev Emitted when the debt ceiling of an asset is set.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldDebtCeiling The old debt ceiling
+   * @param newDebtCeiling The new debt ceiling
+   */
+  event DebtCeilingChanged(address indexed asset, uint256 oldDebtCeiling, uint256 newDebtCeiling);
+
+  /**
+   * @dev Emitted when the the siloed borrowing state for an asset is changed.
+   * @param asset The address of the underlying asset of the reserve
+   * @param oldState The old siloed borrowing state
+   * @param newState The new siloed borrowing state
+   */
+  event SiloedBorrowingChanged(address indexed asset, bool oldState, bool newState);
+
+  /**
+   * @dev Emitted when the bridge protocol fee is updated.
+   * @param oldBridgeProtocolFee The old protocol fee, expressed in bps
+   * @param newBridgeProtocolFee The new protocol fee, expressed in bps
+   */
+  event BridgeProtocolFeeUpdated(uint256 oldBridgeProtocolFee, uint256 newBridgeProtocolFee);
+
+  /**
+   * @dev Emitted when the total premium on flashloans is updated.
+   * @param oldFlashloanPremiumTotal The old premium, expressed in bps
+   * @param newFlashloanPremiumTotal The new premium, expressed in bps
+   */
+  event FlashloanPremiumTotalUpdated(uint128 oldFlashloanPremiumTotal, uint128 newFlashloanPremiumTotal);
+
+  /**
+   * @dev Emitted when the part of the premium that goes to protocol is updated.
+   *         Deprecated, from the v3.4 version the `flashloanPremiumToProtocol` value
+   *         is always 100%.
+   * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps
+   * @param newFlashloanPremiumToProtocol The new premium, expressed in bps
+   */
+  event FlashloanPremiumToProtocolUpdated(uint128 oldFlashloanPremiumToProtocol, uint128 newFlashloanPremiumToProtocol);
+
+  /**
+   * @dev Emitted when the reserve is set as borrowable/non borrowable in isolation mode.
+   * @param asset The address of the underlying asset of the reserve
+   * @param borrowable True if the reserve is borrowable in isolation, false otherwise
+   */
+  event BorrowableInIsolationChanged(address asset, bool borrowable);
+
+  /**
+   * @notice Initializes multiple reserves.
+   * @param input The array of initialization parameters
+   */
+  function initReserves(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;
+
+  /**
+   * @dev Updates the aToken implementation for the reserve.
+   * @param input The aToken update parameters
+   */
+  function updateAToken(ConfiguratorInputTypes.UpdateATokenInput calldata input) external;
+
+  /**
+   * @notice Updates the variable debt token implementation for the asset.
+   * @param input The variableDebtToken update parameters
+   */
+  function updateVariableDebtToken(ConfiguratorInputTypes.UpdateDebtTokenInput calldata input) external;
+
+  /**
+   * @notice Configures borrowing on a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param enabled True if borrowing needs to be enabled, false otherwise
+   */
+  function setReserveBorrowing(address asset, bool enabled) external;
+
+  /**
+   * @notice Configures the reserve collateralization parameters.
+   * @dev All the values are expressed in bps. A value of 10000, results in 100.00%
+   * @dev The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus
+   * @param asset The address of the underlying asset of the reserve
+   * @param ltv The loan to value of the asset when used as collateral
+   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized
+   * @param liquidationBonus The bonus liquidators receive to liquidate this asset
+   */
+  function configureReserveAsCollateral(
+    address asset,
+    uint256 ltv,
+    uint256 liquidationThreshold,
+    uint256 liquidationBonus
+  ) external;
+
+  /**
+   * @notice Enable or disable flashloans on a reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @param enabled True if flashloans need to be enabled, false otherwise
+   */
+  function setReserveFlashLoaning(address asset, bool enabled) external;
+
+  /**
+   * @notice Activate or deactivate a reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @param active True if the reserve needs to be active, false otherwise
+   */
+  function setReserveActive(address asset, bool active) external;
+
+  /**
+   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow
+   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.
+   * @param asset The address of the underlying asset of the reserve
+   * @param freeze True if the reserve needs to be frozen, false otherwise
+   */
+  function setReserveFreeze(address asset, bool freeze) external;
+
+  /**
+   * @notice Sets the borrowable in isolation flag for the reserve.
+   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the
+   * borrowed amount will be accumulated in the isolated collateral's total debt exposure
+   * @dev Only assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep
+   * consistency in the debt ceiling calculations
+   * @param asset The address of the underlying asset of the reserve
+   * @param borrowable True if the asset should be borrowable in isolation, false otherwise
+   */
+  function setBorrowableInIsolation(address asset, bool borrowable) external;
+
+  /**
+   * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,
+   * swap interest rate, liquidate, atoken transfers).
+   * @param asset The address of the underlying asset of the reserve
+   * @param paused True if pausing the reserve, false if unpausing
+   * @param gracePeriod Count of seconds after unpause during which liquidations will not be available
+   *   - Only applicable whenever unpausing (`paused` as false)
+   *   - Passing 0 means no grace period
+   *   - Capped to maximum MAX_GRACE_PERIOD
+   */
+  function setReservePause(address asset, bool paused, uint40 gracePeriod) external;
+
+  /**
+   * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,
+   * swap interest rate, liquidate, atoken transfers).
+   * @dev Version with no grace period
+   * @param asset The address of the underlying asset of the reserve
+   * @param paused True if pausing the reserve, false if unpausing
+   */
+  function setReservePause(address asset, bool paused) external;
+
+  /**
+   * @notice Disables liquidation grace period for the asset. The liquidation grace period is set in the past
+   * so that liquidations are allowed for the asset.
+   * @param asset The address of the underlying asset of the reserve
+   */
+  function disableLiquidationGracePeriod(address asset) external;
+
+  /**
+   * @notice Updates the reserve factor of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param newReserveFactor The new reserve factor of the reserve
+   */
+  function setReserveFactor(address asset, uint256 newReserveFactor) external;
+
+  /**
+   * @notice Sets interest rate data for a reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @param rateData bytes-encoded rate data. In this format in order to allow the rate strategy contract
+   *  to de-structure custom data
+   */
+  function setReserveInterestRateData(address asset, bytes calldata rateData) external;
+
+  /**
+   * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions
+   * are suspended.
+   * @param paused True if protocol needs to be paused, false otherwise
+   * @param gracePeriod Count of seconds after unpause during which liquidations will not be available
+   *   - Only applicable whenever unpausing (`paused` as false)
+   *   - Passing 0 means no grace period
+   *   - Capped to maximum MAX_GRACE_PERIOD
+   */
+  function setPoolPause(bool paused, uint40 gracePeriod) external;
+
+  /**
+   * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions
+   * are suspended.
+   * @dev Version with no grace period
+   * @param paused True if protocol needs to be paused, false otherwise
+   */
+  function setPoolPause(bool paused) external;
+
+  /**
+   * @notice Updates the borrow cap of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param newBorrowCap The new borrow cap of the reserve
+   */
+  function setBorrowCap(address asset, uint256 newBorrowCap) external;
+
+  /**
+   * @notice Updates the supply cap of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param newSupplyCap The new supply cap of the reserve
+   */
+  function setSupplyCap(address asset, uint256 newSupplyCap) external;
+
+  /**
+   * @notice Updates the liquidation protocol fee of reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @param newFee The new liquidation protocol fee of the reserve, expressed in bps
+   */
+  function setLiquidationProtocolFee(address asset, uint256 newFee) external;
+
+  /**
+   * @notice Enables/disables an asset to be borrowable in a selected eMode.
+   * - eMode.borrowable always has less priority then reserve.borrowable
+   * @param asset The address of the underlying asset of the reserve
+   * @param categoryId The eMode categoryId
+   * @param borrowable True if the asset should be borrowable in the given eMode category, false otherwise.
+   */
+  function setAssetBorrowableInEMode(address asset, uint8 categoryId, bool borrowable) external;
+
+  /**
+   * @notice Enables/disables an asset to be collateral in a selected eMode.
+   * @param asset The address of the underlying asset of the reserve
+   * @param categoryId The eMode categoryId
+   * @param collateral True if the asset should be collateral in the given eMode category, false otherwise.
+   */
+  function setAssetCollateralInEMode(address asset, uint8 categoryId, bool collateral) external;
+
+  /**
+   * @notice Adds a new efficiency mode (eMode) category or alters a existing one.
+   * @param categoryId The id of the category to be configured
+   * @param ltv The ltv associated with the category
+   * @param liquidationThreshold The liquidation threshold associated with the category
+   * @param liquidationBonus The liquidation bonus associated with the category
+   * @param label A label identifying the category
+   */
+  function setEModeCategory(
+    uint8 categoryId,
+    uint16 ltv,
+    uint16 liquidationThreshold,
+    uint16 liquidationBonus,
+    string calldata label
+  ) external;
+
+  /**
+   * @notice Drops a reserve entirely.
+   * @param asset The address of the reserve to drop
+   */
+  function dropReserve(address asset) external;
+
+  /**
+   * @notice Updates the flash loan premium. All this premium
+   *         will be collected by the treasury.
+   * @dev Expressed in bps
+   * @dev The premium is calculated on the total amount borrowed
+   * @param newFlashloanPremium The flashloan premium
+   */
+  function updateFlashloanPremium(uint128 newFlashloanPremium) external;
+
+  /**
+   * @notice Sets the debt ceiling for an asset.
+   * @param newDebtCeiling The new debt ceiling
+   */
+  function setDebtCeiling(address asset, uint256 newDebtCeiling) external;
+
+  /**
+   * @notice Sets siloed borrowing for an asset
+   * @param siloed The new siloed borrowing state
+   */
+  function setSiloedBorrowing(address asset, bool siloed) external;
+
+  /**
+   * @notice Gets pending ltv value
+   * @param asset The new siloed borrowing state
+   */
+  function getPendingLtv(address asset) external view returns (uint256);
+
+  /**
+   * @notice Gets the address of the external ConfiguratorLogic
+   */
+  function getConfiguratorLogic() external view returns (address);
+
+  /**
+   * @notice Gets the maximum liquidations grace period allowed, in seconds
+   */
+  function MAX_GRACE_PERIOD() external view returns (uint40);
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolDataProvider.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolDataProvider.sol
new file mode 100644
index 0000000..fbb2df1
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPoolDataProvider.sol
@@ -0,0 +1,247 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
+import {IPool} from "./IPool.sol";
+
+/**
+ * @title IPoolDataProvider
+ * @author Aave
+ * @notice Defines the basic interface of a PoolDataProvider
+ */
+interface IPoolDataProvider {
+  struct TokenData {
+    string symbol;
+    address tokenAddress;
+  }
+
+  /**
+   * @notice Returns the address for the PoolAddressesProvider contract.
+   * @return The address for the PoolAddressesProvider contract
+   */
+  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
+
+  /**
+   * @notice Returns the address for the Pool contract.
+   * @return The address for the Pool contract
+   */
+  function POOL() external view returns (IPool);
+
+  /**
+   * @notice Returns the list of the existing reserves in the pool.
+   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.
+   * @return The list of reserves, pairs of symbols and addresses
+   */
+  function getAllReservesTokens() external view returns (TokenData[] memory);
+
+  /**
+   * @notice Returns the list of the existing ATokens in the pool.
+   * @return The list of ATokens, pairs of symbols and addresses
+   */
+  function getAllATokens() external view returns (TokenData[] memory);
+
+  /**
+   * @notice Returns the configuration data of the reserve
+   * @dev Not returning borrow and supply caps for compatibility, nor pause flag
+   * @param asset The address of the underlying asset of the reserve
+   * @return decimals The number of decimals of the reserve
+   * @return ltv The ltv of the reserve
+   * @return liquidationThreshold The liquidationThreshold of the reserve
+   * @return liquidationBonus The liquidationBonus of the reserve
+   * @return reserveFactor The reserveFactor of the reserve
+   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise
+   * @return borrowingEnabled True if borrowing is enabled, false otherwise
+   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise
+   * @return isActive True if it is active, false otherwise
+   * @return isFrozen True if it is frozen, false otherwise
+   */
+  function getReserveConfigurationData(address asset)
+    external
+    view
+    returns (
+      uint256 decimals,
+      uint256 ltv,
+      uint256 liquidationThreshold,
+      uint256 liquidationBonus,
+      uint256 reserveFactor,
+      bool usageAsCollateralEnabled,
+      bool borrowingEnabled,
+      bool stableBorrowRateEnabled,
+      bool isActive,
+      bool isFrozen
+    );
+
+  /**
+   * @notice Returns the caps parameters of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return borrowCap The borrow cap of the reserve
+   * @return supplyCap The supply cap of the reserve
+   */
+  function getReserveCaps(address asset) external view returns (uint256 borrowCap, uint256 supplyCap);
+
+  /**
+   * @notice Returns if the pool is paused
+   * @param asset The address of the underlying asset of the reserve
+   * @return isPaused True if the pool is paused, false otherwise
+   */
+  function getPaused(address asset) external view returns (bool isPaused);
+
+  /**
+   * @notice Returns the siloed borrowing flag
+   * @param asset The address of the underlying asset of the reserve
+   * @return True if the asset is siloed for borrowing
+   */
+  function getSiloedBorrowing(address asset) external view returns (bool);
+
+  /**
+   * @notice Returns the protocol fee on the liquidation bonus
+   * @param asset The address of the underlying asset of the reserve
+   * @return The protocol fee on liquidation
+   */
+  function getLiquidationProtocolFee(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the unbacked mint cap of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return 0, DEPRECATED in v3.4.0
+   */
+  function getUnbackedMintCap(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the debt ceiling of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The debt ceiling of the reserve
+   */
+  function getDebtCeiling(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the debt ceiling decimals
+   * @return The debt ceiling decimals
+   */
+  function getDebtCeilingDecimals() external pure returns (uint256);
+
+  /**
+   * @notice Returns the reserve data
+   * @param asset The address of the underlying asset of the reserve
+   * @return unbacked The amount of unbacked tokens
+   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted
+   * @return totalAToken The total supply of the aToken
+   * @return totalStableDebt The total stable debt of the reserve
+   * @return totalVariableDebt The total variable debt of the reserve
+   * @return liquidityRate The liquidity rate of the reserve
+   * @return variableBorrowRate The variable borrow rate of the reserve
+   * @return stableBorrowRate The stable borrow rate of the reserve
+   * @return averageStableBorrowRate The average stable borrow rate of the reserve
+   * @return liquidityIndex The liquidity index of the reserve
+   * @return variableBorrowIndex The variable borrow index of the reserve
+   * @return lastUpdateTimestamp The timestamp of the last update of the reserve
+   */
+  function getReserveData(address asset)
+    external
+    view
+    returns (
+      uint256 unbacked,
+      uint256 accruedToTreasuryScaled,
+      uint256 totalAToken,
+      uint256 totalStableDebt,
+      uint256 totalVariableDebt,
+      uint256 liquidityRate,
+      uint256 variableBorrowRate,
+      uint256 stableBorrowRate,
+      uint256 averageStableBorrowRate,
+      uint256 liquidityIndex,
+      uint256 variableBorrowIndex,
+      uint40 lastUpdateTimestamp
+    );
+
+  /**
+   * @notice Returns the total supply of aTokens for a given asset
+   * @param asset The address of the underlying asset of the reserve
+   * @return The total supply of the aToken
+   */
+  function getATokenTotalSupply(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the total debt for a given asset
+   * @param asset The address of the underlying asset of the reserve
+   * @return The total debt for asset
+   */
+  function getTotalDebt(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the user data in a reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @param user The address of the user
+   * @return currentATokenBalance The current AToken balance of the user
+   * @return currentStableDebt The current stable debt of the user
+   * @return currentVariableDebt The current variable debt of the user
+   * @return principalStableDebt The principal stable debt of the user
+   * @return scaledVariableDebt The scaled variable debt of the user
+   * @return stableBorrowRate The stable borrow rate of the user
+   * @return liquidityRate The liquidity rate of the reserve
+   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate
+   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false
+   *         otherwise
+   */
+  function getUserReserveData(address asset, address user)
+    external
+    view
+    returns (
+      uint256 currentATokenBalance,
+      uint256 currentStableDebt,
+      uint256 currentVariableDebt,
+      uint256 principalStableDebt,
+      uint256 scaledVariableDebt,
+      uint256 stableBorrowRate,
+      uint256 liquidityRate,
+      uint40 stableRateLastUpdated,
+      bool usageAsCollateralEnabled
+    );
+
+  /**
+   * @notice Returns the token addresses of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return aTokenAddress The AToken address of the reserve
+   * @return stableDebtTokenAddress DEPRECATED in v3.2.0
+   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve
+   */
+  function getReserveTokensAddresses(address asset)
+    external
+    view
+    returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);
+
+  /**
+   * @notice Returns the address of the Interest Rate strategy
+   * @param asset The address of the underlying asset of the reserve
+   * @return irStrategyAddress The address of the Interest Rate strategy
+   */
+  function getInterestRateStrategyAddress(address asset) external view returns (address irStrategyAddress);
+
+  /**
+   * @notice Returns whether the reserve has FlashLoans enabled or disabled
+   * @param asset The address of the underlying asset of the reserve
+   * @return True if FlashLoans are enabled, false otherwise
+   */
+  function getFlashLoanEnabled(address asset) external view returns (bool);
+
+  /**
+   * @notice Returns whether virtual accounting is enabled/not for a reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return True, DEPRECATED in v3.4.0 as all reserves have virtual accounting set as active
+   */
+  function getIsVirtualAccActive(address asset) external view returns (bool);
+
+  /**
+   * @notice Returns the virtual underlying balance of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The reserve virtual underlying balance
+   */
+  function getVirtualUnderlyingBalance(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the deficit of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The reserve deficit
+   */
+  function getReserveDeficit(address asset) external view returns (uint256);
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPriceOracleGetter.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPriceOracleGetter.sol
new file mode 100644
index 0000000..869851a
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IPriceOracleGetter.sol
@@ -0,0 +1,30 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+/**
+ * @title IPriceOracleGetter
+ * @author Aave
+ * @notice Interface for the Aave price oracle.
+ */
+interface IPriceOracleGetter {
+  /**
+   * @notice Returns the base currency address
+   * @dev Address 0x0 is reserved for USD as base currency.
+   * @return Returns the base currency address.
+   */
+  function BASE_CURRENCY() external view returns (address);
+
+  /**
+   * @notice Returns the base currency unit
+   * @dev 1 ether for ETH, 1e8 for USD.
+   * @return Returns the base currency unit.
+   */
+  function BASE_CURRENCY_UNIT() external view returns (uint256);
+
+  /**
+   * @notice Returns the asset price in the base currency
+   * @param asset The address of the asset
+   * @return The price of the asset
+   */
+  function getAssetPrice(address asset) external view returns (uint256);
+}
diff --git a/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IReserveInterestRateStrategy.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IReserveInterestRateStrategy.sol
new file mode 100644
index 0000000..9549f03
--- /dev/null
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IReserveInterestRateStrategy.sol
@@ -0,0 +1,30 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
+
+/**
+ * @title IReserveInterestRateStrategy
+ * @author BGD Labs
+ * @notice Basic interface for any rate strategy used by the Aave protocol
+ */
+interface IReserveInterestRateStrategy {
+  /**
+   * @notice Sets interest rate data for an Aave rate strategy
+   * @param reserve The reserve to update
+   * @param rateData The abi encoded reserve interest rate data to apply to the given reserve
+   *   Abstracted this way as rate strategies can be custom
+   */
+  function setInterestRateParams(address reserve, bytes calldata rateData) external;
+
+  /**
+   * @notice Calculates the interest rates depending on the reserve's state and configurations
+   * @param params The parameters needed to calculate interest rates
+   * @return liquidityRate The liquidity rate expressed in ray
+   * @return variableBorrowRate The variable borrow rate expressed in ray
+   */
+  function calculateInterestRates(DataTypes.CalculateInterestRatesParams memory params)
+    external
+    view
+    returns (uint256, uint256);
+}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IScaledBalanceToken.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IScaledBalanceToken.sol
index 6888d93..3e745c2 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IScaledBalanceToken.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IScaledBalanceToken.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
 /**
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IVariableDebtToken.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IVariableDebtToken.sol
deleted file mode 100644
index 9e312dd..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IVariableDebtToken.sol
+++ /dev/null
@@ -1,41 +0,0 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity ^0.8.0;
-
-import {IScaledBalanceToken} from "./IScaledBalanceToken.sol";
-import {IInitializableDebtToken} from "./IInitializableDebtToken.sol";
-
-/**
- * @title IVariableDebtToken
- * @author Aave
- * @notice Defines the basic interface for a variable debt token.
- */
-interface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {
-  /**
-   * @notice Mints debt token to the `onBehalfOf` address
-   * @param user The address receiving the borrowed underlying, being the delegatee in case
-   * of credit delegate, or same as `onBehalfOf` otherwise
-   * @param onBehalfOf The address receiving the debt tokens
-   * @param amount The amount of debt being minted
-   * @param index The variable debt index of the reserve
-   * @return True if the previous balance of the user is 0, false otherwise
-   * @return The scaled total debt of the reserve
-   */
-  function mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool, uint256);
-
-  /**
-   * @notice Burns user variable debt
-   * @dev In some instances, a burn transaction will emit a mint event
-   * if the amount to burn is less than the interest that the user accrued
-   * @param from The address from which the debt will be burned
-   * @param amount The amount getting burned
-   * @param index The variable debt index of the reserve
-   * @return The scaled total debt of the reserve
-   */
-  function burn(address from, uint256 amount, uint256 index) external returns (uint256);
-
-  /**
-   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)
-   * @return The address of the underlying asset
-   */
-  function UNDERLYING_ASSET_ADDRESS() external view returns (address);
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IncentivizedERC20.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IncentivizedERC20.sol
index 04ce567..4e18e31 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/IncentivizedERC20.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/IncentivizedERC20.sol
@@ -1,16 +1,17 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
 import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
 import {IERC20Detailed} from "../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
-import {SafeCast} from "../../../dependencies/openzeppelin/contracts/SafeCast.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
 import {Errors} from "../../libraries/helpers/Errors.sol";
 import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
 import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
 import {IACLManager} from "../../../interfaces/IACLManager.sol";
+import {DelegationMode} from "./DelegationMode.sol";
 
 /**
  * @title IncentivizedERC20
@@ -26,7 +27,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    */
   modifier onlyPoolAdmin() {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
-    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
+    require(aclManager.isPoolAdmin(_msgSender()), Errors.CallerNotPoolAdmin());
     _;
   }
 
@@ -34,18 +35,18 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @dev Only pool can call functions marked by this modifier.
    */
   modifier onlyPool() {
-    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);
+    require(_msgSender() == address(POOL), Errors.CallerMustBePool());
     _;
   }
 
   /**
    * @dev UserState - additionalData is a flexible field.
    * ATokens and VariableDebtTokens use this field store the index of the
-   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use
-   * this field to store the user's stable rate.
+   * user's last supply/withdrawal/borrow/repayment.
    */
   struct UserState {
-    uint128 balance;
+    uint120 balance;
+    DelegationMode delegationMode;
     uint128 additionalData;
   }
   // Map of users address and their state data (userAddress => userStateData)
@@ -59,23 +60,31 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
   string private _name;
   string private _symbol;
   uint8 private _decimals;
-  IAaveIncentivesController internal _incentivesController;
+  // @dev deprecated on v3.4.0, replaced with immutable REWARDS_CONTROLLER
+  IAaveIncentivesController internal __deprecated_incentivesController;
   IPoolAddressesProvider internal immutable _addressesProvider;
   IPool public immutable POOL;
+  /**
+   * @notice Returns the address of the Incentives Controller contract
+   * @return The address of the Incentives Controller
+   */
+  IAaveIncentivesController public immutable REWARDS_CONTROLLER;
 
   /**
    * @dev Constructor.
    * @param pool The reference to the main Pool contract
-   * @param name The name of the token
-   * @param symbol The symbol of the token
-   * @param decimals The number of decimals of the token
+   * @param name_ The name of the token
+   * @param symbol_ The symbol of the token
+   * @param decimals_ The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {
+  constructor(IPool pool, string memory name_, string memory symbol_, uint8 decimals_, address rewardsController) {
     _addressesProvider = pool.ADDRESSES_PROVIDER();
-    _name = name;
-    _symbol = symbol;
-    _decimals = decimals;
+    _name = name_;
+    _symbol = symbol_;
+    _decimals = decimals_;
     POOL = pool;
+    REWARDS_CONTROLLER = IAaveIncentivesController(rewardsController);
   }
 
   /// @inheritdoc IERC20Detailed
@@ -108,20 +117,12 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @return The address of the Incentives Controller
    */
   function getIncentivesController() external view virtual returns (IAaveIncentivesController) {
-    return _incentivesController;
-  }
-
-  /**
-   * @notice Sets a new Incentives Controller
-   * @param controller the new Incentives controller
-   */
-  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {
-    _incentivesController = controller;
+    return REWARDS_CONTROLLER;
   }
 
   /// @inheritdoc IERC20
   function transfer(address recipient, uint256 amount) external virtual override returns (bool) {
-    uint128 castAmount = amount.toUint128();
+    uint120 castAmount = amount.toUint120();
     _transfer(_msgSender(), recipient, castAmount);
     return true;
   }
@@ -139,7 +140,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
 
   /// @inheritdoc IERC20
   function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {
-    uint128 castAmount = amount.toUint128();
+    uint120 castAmount = amount.toUint120();
     _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);
     _transfer(sender, recipient, castAmount);
     return true;
@@ -173,18 +174,17 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @param recipient The destination address
    * @param amount The amount getting transferred
    */
-  function _transfer(address sender, address recipient, uint128 amount) internal virtual {
-    uint128 oldSenderBalance = _userState[sender].balance;
+  function _transfer(address sender, address recipient, uint120 amount) internal virtual {
+    uint120 oldSenderBalance = _userState[sender].balance;
     _userState[sender].balance = oldSenderBalance - amount;
-    uint128 oldRecipientBalance = _userState[recipient].balance;
+    uint120 oldRecipientBalance = _userState[recipient].balance;
     _userState[recipient].balance = oldRecipientBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
+    if (address(REWARDS_CONTROLLER) != address(0)) {
       uint256 currentTotalSupply = _totalSupply;
-      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
+      REWARDS_CONTROLLER.handleAction(sender, currentTotalSupply, oldSenderBalance);
       if (sender != recipient) {
-        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
+        REWARDS_CONTROLLER.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
       }
     }
   }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/MintableIncentivizedERC20.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/MintableIncentivizedERC20.sol
index 21686c4..b69d99e 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/MintableIncentivizedERC20.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/MintableIncentivizedERC20.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
 import {IPool} from "../../../interfaces/IPool.sol";
@@ -17,9 +17,10 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    IncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    IncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -29,16 +30,15 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param account The address receiving tokens
    * @param amount The amount of tokens to mint
    */
-  function _mint(address account, uint128 amount) internal virtual {
+  function _mint(address account, uint120 amount) internal virtual {
     uint256 oldTotalSupply = _totalSupply;
     _totalSupply = oldTotalSupply + amount;
 
-    uint128 oldAccountBalance = _userState[account].balance;
+    uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 
@@ -47,17 +47,15 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param account The account whose tokens are burnt
    * @param amount The amount of tokens to burn
    */
-  function _burn(address account, uint128 amount) internal virtual {
+  function _burn(address account, uint120 amount) internal virtual {
     uint256 oldTotalSupply = _totalSupply;
     _totalSupply = oldTotalSupply - amount;
 
-    uint128 oldAccountBalance = _userState[account].balance;
+    uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance - amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/PercentageMath.sol b/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/PercentageMath.sol
deleted file mode 100644
index 914d38a..0000000
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/PercentageMath.sol
+++ /dev/null
@@ -1,53 +0,0 @@
-// SPDX-License-Identifier: BUSL-1.1
-pragma solidity ^0.8.0;
-
-/**
- * @title PercentageMath library
- * @author Aave
- * @notice Provides functions to perform percentage calculations
- * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR
- * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.
- */
-library PercentageMath {
-  // Maximum percentage factor (100.00%)
-  uint256 internal constant PERCENTAGE_FACTOR = 1e4;
-
-  // Half percentage factor (50.00%)
-  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;
-
-  /**
-   * @notice Executes a percentage multiplication
-   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
-   * @param value The value of which the percentage needs to be calculated
-   * @param percentage The percentage of the value to be calculated
-   * @return result value percentmul percentage
-   */
-  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {
-    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage
-    assembly {
-      if iszero(or(iszero(percentage), iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage))))) {
-        revert(0, 0)
-      }
-
-      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)
-    }
-  }
-
-  /**
-   * @notice Executes a percentage division
-   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328
-   * @param value The value of which the percentage needs to be calculated
-   * @param percentage The percentage of the value to be calculated
-   * @return result value percentdiv percentage
-   */
-  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {
-    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR
-    assembly {
-      if or(iszero(percentage), iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))) {
-        revert(0, 0)
-      }
-
-      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)
-    }
-  }
-}
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/SafeCast.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/SafeCast.sol
index 1542e33..6e26cd8 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/SafeCast.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/SafeCast.sol
@@ -1,9 +1,11 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)
-pragma solidity 0.8.10;
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
+// This file was procedurally generated from scripts/generate/templates/SafeCast.js.
+
+pragma solidity ^0.8.20;
 
 /**
- * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
+ * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
  * checks.
  *
  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
@@ -13,11 +15,79 @@ pragma solidity 0.8.10;
  *
  * Using this library instead of the unchecked operations eliminates an entire
  * class of bugs, so it's recommended to use it always.
- *
- * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
- * all math on `uint256` and `int256` and then downcasting.
  */
 library SafeCast {
+  /**
+   * @dev Value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
+
+  /**
+   * @dev An int value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedIntToUint(int256 value);
+
+  /**
+   * @dev Value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
+
+  /**
+   * @dev An uint value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedUintToInt(uint256 value);
+
+  /**
+   * @dev Returns the downcasted uint248 from uint256, reverting on
+   * overflow (when the input is greater than largest uint248).
+   *
+   * Counterpart to Solidity's `uint248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toUint248(uint256 value) internal pure returns (uint248) {
+    if (value > type(uint248).max) {
+      revert SafeCastOverflowedUintDowncast(248, value);
+    }
+    return uint248(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint240 from uint256, reverting on
+   * overflow (when the input is greater than largest uint240).
+   *
+   * Counterpart to Solidity's `uint240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toUint240(uint256 value) internal pure returns (uint240) {
+    if (value > type(uint240).max) {
+      revert SafeCastOverflowedUintDowncast(240, value);
+    }
+    return uint240(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint232 from uint256, reverting on
+   * overflow (when the input is greater than largest uint232).
+   *
+   * Counterpart to Solidity's `uint232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toUint232(uint256 value) internal pure returns (uint232) {
+    if (value > type(uint232).max) {
+      revert SafeCastOverflowedUintDowncast(232, value);
+    }
+    return uint232(value);
+  }
+
   /**
    * @dev Returns the downcasted uint224 from uint256, reverting on
    * overflow (when the input is greater than largest uint224).
@@ -29,10 +99,199 @@ library SafeCast {
    * - input must fit into 224 bits
    */
   function toUint224(uint256 value) internal pure returns (uint224) {
-    require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
+    if (value > type(uint224).max) {
+      revert SafeCastOverflowedUintDowncast(224, value);
+    }
     return uint224(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint216 from uint256, reverting on
+   * overflow (when the input is greater than largest uint216).
+   *
+   * Counterpart to Solidity's `uint216` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 216 bits
+   */
+  function toUint216(uint256 value) internal pure returns (uint216) {
+    if (value > type(uint216).max) {
+      revert SafeCastOverflowedUintDowncast(216, value);
+    }
+    return uint216(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint208 from uint256, reverting on
+   * overflow (when the input is greater than largest uint208).
+   *
+   * Counterpart to Solidity's `uint208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toUint208(uint256 value) internal pure returns (uint208) {
+    if (value > type(uint208).max) {
+      revert SafeCastOverflowedUintDowncast(208, value);
+    }
+    return uint208(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint200 from uint256, reverting on
+   * overflow (when the input is greater than largest uint200).
+   *
+   * Counterpart to Solidity's `uint200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toUint200(uint256 value) internal pure returns (uint200) {
+    if (value > type(uint200).max) {
+      revert SafeCastOverflowedUintDowncast(200, value);
+    }
+    return uint200(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint192 from uint256, reverting on
+   * overflow (when the input is greater than largest uint192).
+   *
+   * Counterpart to Solidity's `uint192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toUint192(uint256 value) internal pure returns (uint192) {
+    if (value > type(uint192).max) {
+      revert SafeCastOverflowedUintDowncast(192, value);
+    }
+    return uint192(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint184 from uint256, reverting on
+   * overflow (when the input is greater than largest uint184).
+   *
+   * Counterpart to Solidity's `uint184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toUint184(uint256 value) internal pure returns (uint184) {
+    if (value > type(uint184).max) {
+      revert SafeCastOverflowedUintDowncast(184, value);
+    }
+    return uint184(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint176 from uint256, reverting on
+   * overflow (when the input is greater than largest uint176).
+   *
+   * Counterpart to Solidity's `uint176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toUint176(uint256 value) internal pure returns (uint176) {
+    if (value > type(uint176).max) {
+      revert SafeCastOverflowedUintDowncast(176, value);
+    }
+    return uint176(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint168 from uint256, reverting on
+   * overflow (when the input is greater than largest uint168).
+   *
+   * Counterpart to Solidity's `uint168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toUint168(uint256 value) internal pure returns (uint168) {
+    if (value > type(uint168).max) {
+      revert SafeCastOverflowedUintDowncast(168, value);
+    }
+    return uint168(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint160 from uint256, reverting on
+   * overflow (when the input is greater than largest uint160).
+   *
+   * Counterpart to Solidity's `uint160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toUint160(uint256 value) internal pure returns (uint160) {
+    if (value > type(uint160).max) {
+      revert SafeCastOverflowedUintDowncast(160, value);
+    }
+    return uint160(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint152 from uint256, reverting on
+   * overflow (when the input is greater than largest uint152).
+   *
+   * Counterpart to Solidity's `uint152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toUint152(uint256 value) internal pure returns (uint152) {
+    if (value > type(uint152).max) {
+      revert SafeCastOverflowedUintDowncast(152, value);
+    }
+    return uint152(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint144 from uint256, reverting on
+   * overflow (when the input is greater than largest uint144).
+   *
+   * Counterpart to Solidity's `uint144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toUint144(uint256 value) internal pure returns (uint144) {
+    if (value > type(uint144).max) {
+      revert SafeCastOverflowedUintDowncast(144, value);
+    }
+    return uint144(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint136 from uint256, reverting on
+   * overflow (when the input is greater than largest uint136).
+   *
+   * Counterpart to Solidity's `uint136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toUint136(uint256 value) internal pure returns (uint136) {
+    if (value > type(uint136).max) {
+      revert SafeCastOverflowedUintDowncast(136, value);
+    }
+    return uint136(value);
+  }
+
   /**
    * @dev Returns the downcasted uint128 from uint256, reverting on
    * overflow (when the input is greater than largest uint128).
@@ -44,10 +303,63 @@ library SafeCast {
    * - input must fit into 128 bits
    */
   function toUint128(uint256 value) internal pure returns (uint128) {
-    require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
+    if (value > type(uint128).max) {
+      revert SafeCastOverflowedUintDowncast(128, value);
+    }
     return uint128(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint120 from uint256, reverting on
+   * overflow (when the input is greater than largest uint120).
+   *
+   * Counterpart to Solidity's `uint120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toUint120(uint256 value) internal pure returns (uint120) {
+    if (value > type(uint120).max) {
+      revert SafeCastOverflowedUintDowncast(120, value);
+    }
+    return uint120(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint112 from uint256, reverting on
+   * overflow (when the input is greater than largest uint112).
+   *
+   * Counterpart to Solidity's `uint112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toUint112(uint256 value) internal pure returns (uint112) {
+    if (value > type(uint112).max) {
+      revert SafeCastOverflowedUintDowncast(112, value);
+    }
+    return uint112(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint104 from uint256, reverting on
+   * overflow (when the input is greater than largest uint104).
+   *
+   * Counterpart to Solidity's `uint104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toUint104(uint256 value) internal pure returns (uint104) {
+    if (value > type(uint104).max) {
+      revert SafeCastOverflowedUintDowncast(104, value);
+    }
+    return uint104(value);
+  }
+
   /**
    * @dev Returns the downcasted uint96 from uint256, reverting on
    * overflow (when the input is greater than largest uint96).
@@ -59,10 +371,63 @@ library SafeCast {
    * - input must fit into 96 bits
    */
   function toUint96(uint256 value) internal pure returns (uint96) {
-    require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
+    if (value > type(uint96).max) {
+      revert SafeCastOverflowedUintDowncast(96, value);
+    }
     return uint96(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint88 from uint256, reverting on
+   * overflow (when the input is greater than largest uint88).
+   *
+   * Counterpart to Solidity's `uint88` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 88 bits
+   */
+  function toUint88(uint256 value) internal pure returns (uint88) {
+    if (value > type(uint88).max) {
+      revert SafeCastOverflowedUintDowncast(88, value);
+    }
+    return uint88(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint80 from uint256, reverting on
+   * overflow (when the input is greater than largest uint80).
+   *
+   * Counterpart to Solidity's `uint80` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 80 bits
+   */
+  function toUint80(uint256 value) internal pure returns (uint80) {
+    if (value > type(uint80).max) {
+      revert SafeCastOverflowedUintDowncast(80, value);
+    }
+    return uint80(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint72 from uint256, reverting on
+   * overflow (when the input is greater than largest uint72).
+   *
+   * Counterpart to Solidity's `uint72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toUint72(uint256 value) internal pure returns (uint72) {
+    if (value > type(uint72).max) {
+      revert SafeCastOverflowedUintDowncast(72, value);
+    }
+    return uint72(value);
+  }
+
   /**
    * @dev Returns the downcasted uint64 from uint256, reverting on
    * overflow (when the input is greater than largest uint64).
@@ -74,10 +439,63 @@ library SafeCast {
    * - input must fit into 64 bits
    */
   function toUint64(uint256 value) internal pure returns (uint64) {
-    require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
+    if (value > type(uint64).max) {
+      revert SafeCastOverflowedUintDowncast(64, value);
+    }
     return uint64(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint56 from uint256, reverting on
+   * overflow (when the input is greater than largest uint56).
+   *
+   * Counterpart to Solidity's `uint56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
+   */
+  function toUint56(uint256 value) internal pure returns (uint56) {
+    if (value > type(uint56).max) {
+      revert SafeCastOverflowedUintDowncast(56, value);
+    }
+    return uint56(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint48 from uint256, reverting on
+   * overflow (when the input is greater than largest uint48).
+   *
+   * Counterpart to Solidity's `uint48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toUint48(uint256 value) internal pure returns (uint48) {
+    if (value > type(uint48).max) {
+      revert SafeCastOverflowedUintDowncast(48, value);
+    }
+    return uint48(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint40 from uint256, reverting on
+   * overflow (when the input is greater than largest uint40).
+   *
+   * Counterpart to Solidity's `uint40` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 40 bits
+   */
+  function toUint40(uint256 value) internal pure returns (uint40) {
+    if (value > type(uint40).max) {
+      revert SafeCastOverflowedUintDowncast(40, value);
+    }
+    return uint40(value);
+  }
+
   /**
    * @dev Returns the downcasted uint32 from uint256, reverting on
    * overflow (when the input is greater than largest uint32).
@@ -89,10 +507,29 @@ library SafeCast {
    * - input must fit into 32 bits
    */
   function toUint32(uint256 value) internal pure returns (uint32) {
-    require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
+    if (value > type(uint32).max) {
+      revert SafeCastOverflowedUintDowncast(32, value);
+    }
     return uint32(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint24 from uint256, reverting on
+   * overflow (when the input is greater than largest uint24).
+   *
+   * Counterpart to Solidity's `uint24` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 24 bits
+   */
+  function toUint24(uint256 value) internal pure returns (uint24) {
+    if (value > type(uint24).max) {
+      revert SafeCastOverflowedUintDowncast(24, value);
+    }
+    return uint24(value);
+  }
+
   /**
    * @dev Returns the downcasted uint16 from uint256, reverting on
    * overflow (when the input is greater than largest uint16).
@@ -104,7 +541,9 @@ library SafeCast {
    * - input must fit into 16 bits
    */
   function toUint16(uint256 value) internal pure returns (uint16) {
-    require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
+    if (value > type(uint16).max) {
+      revert SafeCastOverflowedUintDowncast(16, value);
+    }
     return uint16(value);
   }
 
@@ -116,10 +555,12 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
+   * - input must fit into 8 bits
    */
   function toUint8(uint256 value) internal pure returns (uint8) {
-    require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
+    if (value > type(uint8).max) {
+      revert SafeCastOverflowedUintDowncast(8, value);
+    }
     return uint8(value);
   }
 
@@ -131,10 +572,282 @@ library SafeCast {
    * - input must be greater than or equal to 0.
    */
   function toUint256(int256 value) internal pure returns (uint256) {
-    require(value >= 0, "SafeCast: value must be positive");
+    if (value < 0) {
+      revert SafeCastOverflowedIntToUint(value);
+    }
     return uint256(value);
   }
 
+  /**
+   * @dev Returns the downcasted int248 from int256, reverting on
+   * overflow (when the input is less than smallest int248 or
+   * greater than largest int248).
+   *
+   * Counterpart to Solidity's `int248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toInt248(int256 value) internal pure returns (int248 downcasted) {
+    downcasted = int248(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(248, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int240 from int256, reverting on
+   * overflow (when the input is less than smallest int240 or
+   * greater than largest int240).
+   *
+   * Counterpart to Solidity's `int240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toInt240(int256 value) internal pure returns (int240 downcasted) {
+    downcasted = int240(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(240, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int232 from int256, reverting on
+   * overflow (when the input is less than smallest int232 or
+   * greater than largest int232).
+   *
+   * Counterpart to Solidity's `int232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toInt232(int256 value) internal pure returns (int232 downcasted) {
+    downcasted = int232(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(232, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int224 from int256, reverting on
+   * overflow (when the input is less than smallest int224 or
+   * greater than largest int224).
+   *
+   * Counterpart to Solidity's `int224` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 224 bits
+   */
+  function toInt224(int256 value) internal pure returns (int224 downcasted) {
+    downcasted = int224(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(224, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int216 from int256, reverting on
+   * overflow (when the input is less than smallest int216 or
+   * greater than largest int216).
+   *
+   * Counterpart to Solidity's `int216` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 216 bits
+   */
+  function toInt216(int256 value) internal pure returns (int216 downcasted) {
+    downcasted = int216(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(216, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int208 from int256, reverting on
+   * overflow (when the input is less than smallest int208 or
+   * greater than largest int208).
+   *
+   * Counterpart to Solidity's `int208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toInt208(int256 value) internal pure returns (int208 downcasted) {
+    downcasted = int208(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(208, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int200 from int256, reverting on
+   * overflow (when the input is less than smallest int200 or
+   * greater than largest int200).
+   *
+   * Counterpart to Solidity's `int200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toInt200(int256 value) internal pure returns (int200 downcasted) {
+    downcasted = int200(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(200, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int192 from int256, reverting on
+   * overflow (when the input is less than smallest int192 or
+   * greater than largest int192).
+   *
+   * Counterpart to Solidity's `int192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toInt192(int256 value) internal pure returns (int192 downcasted) {
+    downcasted = int192(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(192, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int184 from int256, reverting on
+   * overflow (when the input is less than smallest int184 or
+   * greater than largest int184).
+   *
+   * Counterpart to Solidity's `int184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toInt184(int256 value) internal pure returns (int184 downcasted) {
+    downcasted = int184(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(184, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int176 from int256, reverting on
+   * overflow (when the input is less than smallest int176 or
+   * greater than largest int176).
+   *
+   * Counterpart to Solidity's `int176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toInt176(int256 value) internal pure returns (int176 downcasted) {
+    downcasted = int176(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(176, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int168 from int256, reverting on
+   * overflow (when the input is less than smallest int168 or
+   * greater than largest int168).
+   *
+   * Counterpart to Solidity's `int168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toInt168(int256 value) internal pure returns (int168 downcasted) {
+    downcasted = int168(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(168, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int160 from int256, reverting on
+   * overflow (when the input is less than smallest int160 or
+   * greater than largest int160).
+   *
+   * Counterpart to Solidity's `int160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toInt160(int256 value) internal pure returns (int160 downcasted) {
+    downcasted = int160(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(160, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int152 from int256, reverting on
+   * overflow (when the input is less than smallest int152 or
+   * greater than largest int152).
+   *
+   * Counterpart to Solidity's `int152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toInt152(int256 value) internal pure returns (int152 downcasted) {
+    downcasted = int152(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(152, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int144 from int256, reverting on
+   * overflow (when the input is less than smallest int144 or
+   * greater than largest int144).
+   *
+   * Counterpart to Solidity's `int144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toInt144(int256 value) internal pure returns (int144 downcasted) {
+    downcasted = int144(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(144, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int136 from int256, reverting on
+   * overflow (when the input is less than smallest int136 or
+   * greater than largest int136).
+   *
+   * Counterpart to Solidity's `int136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toInt136(int256 value) internal pure returns (int136 downcasted) {
+    downcasted = int136(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(136, value);
+    }
+  }
+
   /**
    * @dev Returns the downcasted int128 from int256, reverting on
    * overflow (when the input is less than smallest int128 or
@@ -145,12 +858,138 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 128 bits
+   */
+  function toInt128(int256 value) internal pure returns (int128 downcasted) {
+    downcasted = int128(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(128, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int120 from int256, reverting on
+   * overflow (when the input is less than smallest int120 or
+   * greater than largest int120).
+   *
+   * Counterpart to Solidity's `int120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toInt120(int256 value) internal pure returns (int120 downcasted) {
+    downcasted = int120(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(120, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int112 from int256, reverting on
+   * overflow (when the input is less than smallest int112 or
+   * greater than largest int112).
+   *
+   * Counterpart to Solidity's `int112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toInt112(int256 value) internal pure returns (int112 downcasted) {
+    downcasted = int112(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(112, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int104 from int256, reverting on
+   * overflow (when the input is less than smallest int104 or
+   * greater than largest int104).
+   *
+   * Counterpart to Solidity's `int104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toInt104(int256 value) internal pure returns (int104 downcasted) {
+    downcasted = int104(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(104, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int96 from int256, reverting on
+   * overflow (when the input is less than smallest int96 or
+   * greater than largest int96).
+   *
+   * Counterpart to Solidity's `int96` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 96 bits
+   */
+  function toInt96(int256 value) internal pure returns (int96 downcasted) {
+    downcasted = int96(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(96, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int88 from int256, reverting on
+   * overflow (when the input is less than smallest int88 or
+   * greater than largest int88).
+   *
+   * Counterpart to Solidity's `int88` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 88 bits
    */
-  function toInt128(int256 value) internal pure returns (int128) {
-    require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
-    return int128(value);
+  function toInt88(int256 value) internal pure returns (int88 downcasted) {
+    downcasted = int88(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(88, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int80 from int256, reverting on
+   * overflow (when the input is less than smallest int80 or
+   * greater than largest int80).
+   *
+   * Counterpart to Solidity's `int80` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 80 bits
+   */
+  function toInt80(int256 value) internal pure returns (int80 downcasted) {
+    downcasted = int80(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(80, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int72 from int256, reverting on
+   * overflow (when the input is less than smallest int72 or
+   * greater than largest int72).
+   *
+   * Counterpart to Solidity's `int72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toInt72(int256 value) internal pure returns (int72 downcasted) {
+    downcasted = int72(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(72, value);
+    }
   }
 
   /**
@@ -163,12 +1002,66 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 64 bits
+   */
+  function toInt64(int256 value) internal pure returns (int64 downcasted) {
+    downcasted = int64(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(64, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int56 from int256, reverting on
+   * overflow (when the input is less than smallest int56 or
+   * greater than largest int56).
+   *
+   * Counterpart to Solidity's `int56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
+   */
+  function toInt56(int256 value) internal pure returns (int56 downcasted) {
+    downcasted = int56(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(56, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int48 from int256, reverting on
+   * overflow (when the input is less than smallest int48 or
+   * greater than largest int48).
+   *
+   * Counterpart to Solidity's `int48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toInt48(int256 value) internal pure returns (int48 downcasted) {
+    downcasted = int48(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(48, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int40 from int256, reverting on
+   * overflow (when the input is less than smallest int40 or
+   * greater than largest int40).
+   *
+   * Counterpart to Solidity's `int40` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 40 bits
    */
-  function toInt64(int256 value) internal pure returns (int64) {
-    require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
-    return int64(value);
+  function toInt40(int256 value) internal pure returns (int40 downcasted) {
+    downcasted = int40(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(40, value);
+    }
   }
 
   /**
@@ -181,12 +1074,30 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 32 bits
+   */
+  function toInt32(int256 value) internal pure returns (int32 downcasted) {
+    downcasted = int32(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(32, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int24 from int256, reverting on
+   * overflow (when the input is less than smallest int24 or
+   * greater than largest int24).
+   *
+   * Counterpart to Solidity's `int24` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 24 bits
    */
-  function toInt32(int256 value) internal pure returns (int32) {
-    require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
-    return int32(value);
+  function toInt24(int256 value) internal pure returns (int24 downcasted) {
+    downcasted = int24(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(24, value);
+    }
   }
 
   /**
@@ -199,12 +1110,12 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 16 bits
-   *
-   * _Available since v3.1._
    */
-  function toInt16(int256 value) internal pure returns (int16) {
-    require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
-    return int16(value);
+  function toInt16(int256 value) internal pure returns (int16 downcasted) {
+    downcasted = int16(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(16, value);
+    }
   }
 
   /**
@@ -216,13 +1127,13 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
-   *
-   * _Available since v3.1._
+   * - input must fit into 8 bits
    */
-  function toInt8(int256 value) internal pure returns (int8) {
-    require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
-    return int8(value);
+  function toInt8(int256 value) internal pure returns (int8 downcasted) {
+    downcasted = int8(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(8, value);
+    }
   }
 
   /**
@@ -234,7 +1145,18 @@ library SafeCast {
    */
   function toInt256(uint256 value) internal pure returns (int256) {
     // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
-    require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
+    if (value > uint256(type(int256).max)) {
+      revert SafeCastOverflowedUintToInt(value);
+    }
     return int256(value);
   }
+
+  /**
+   * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
+   */
+  function toUint(bool b) internal pure returns (uint256 u) {
+    assembly ("memory-safe") {
+      u := iszero(iszero(b))
+    }
+  }
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/ScaledBalanceTokenBase.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ScaledBalanceTokenBase.sol
index b66cb39..4d22caf 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/ScaledBalanceTokenBase.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/ScaledBalanceTokenBase.sol
@@ -1,13 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {SafeCast} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol";
-import {Errors} from "@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "@aave/core-v3/contracts/interfaces/IPool.sol";
-import {IScaledBalanceToken} from "@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol";
-import {MintableIncentivizedERC20} from
-  "@aave/core-v3/contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
+import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
+import {MintableIncentivizedERC20} from "./MintableIncentivizedERC20.sol";
 
 /**
  * @title ScaledBalanceTokenBase
@@ -24,9 +23,10 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    MintableIncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    MintableIncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -59,20 +59,16 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param index The next liquidity index of the reserve
    * @return `true` if the the previous balance of the user was 0
    */
-  function _mintScaled(address caller, address onBehalfOf, uint256 amount, uint256 index)
-    internal
-    virtual
-    returns (bool)
-  {
+  function _mintScaled(address caller, address onBehalfOf, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidMintAmount());
 
     uint256 scaledBalance = super.balanceOf(onBehalfOf);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[onBehalfOf].additionalData);
 
     _userState[onBehalfOf].additionalData = index.toUint128();
 
-    _mint(onBehalfOf, amountScaled.toUint128());
+    _mint(onBehalfOf, amountScaled.toUint120());
 
     uint256 amountToMint = amount + balanceIncrease;
     emit Transfer(address(0), onBehalfOf, amountToMint);
@@ -89,17 +85,18 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param target The address that will receive the underlying, if any
    * @param amount The amount getting burned
    * @param index The variable debt index of the reserve
+   * @return `true` if the the new balance of the user is 0
    */
-  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal virtual {
+  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidBurnAmount());
 
     uint256 scaledBalance = super.balanceOf(user);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[user].additionalData);
 
     _userState[user].additionalData = index.toUint128();
 
-    _burn(user, amountScaled.toUint128());
+    _burn(user, amountScaled.toUint120());
 
     if (balanceIncrease > amount) {
       uint256 amountToMint = balanceIncrease - amount;
@@ -110,5 +107,6 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
       emit Transfer(user, address(0), amountToBurn);
       emit Burn(user, target, amountToBurn, balanceIncrease, index);
     }
+    return scaledBalance - amountScaled == 0;
   }
 }
diff --git a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/VersionedInitializable.sol b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/VersionedInitializable.sol
index e67fff0..97b36b7 100644
--- a/tmp/1_0x2f32A274e02FA356423CE5e97a8e3155c1Ac396b_flat/VersionedInitializable.sol
+++ b/tmp/1_0xAAc28Fd01425ac85d5f8A473bbe311dbaD335E06_flat/VersionedInitializable.sol
@@ -1,5 +1,5 @@
-// SPDX-License-Identifier: AGPL-3.0
-pragma solidity 0.8.10;
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.10;
 
 /**
  * @title VersionedInitializable
@@ -14,6 +14,15 @@ pragma solidity 0.8.10;
  * because this is not dealt with automatically as with constructors.
  */
 abstract contract VersionedInitializable {
+  /**
+   * @dev Initializes the implementation contract at the current revision.
+   * In practice this breaks further initialization of the implementation.
+   */
+  constructor() {
+    // break the initialize
+    lastInitializedRevision = getRevision();
+  }
+
   /**
    * @dev Indicates that the contract has been initialized.
    */
