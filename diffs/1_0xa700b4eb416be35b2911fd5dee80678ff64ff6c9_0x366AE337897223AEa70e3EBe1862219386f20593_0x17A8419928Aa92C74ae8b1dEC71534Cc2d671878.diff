diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/AToken.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/AToken.sol
index 7bdeac0..f5e5fd0 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/AToken.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/AToken.sol
@@ -1,28 +1,28 @@
-// SPDX-License-Identifier: MIT
+// SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.10;
 
-import {IERC20} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {GPv2SafeERC20} from "aave-v3-core/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol";
-import {SafeCast} from "./dependencies/SafeCast.sol";
-import {VersionedInitializable} from
-  "aave-v3-core/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol";
-import {Errors} from "aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "aave-v3-core/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {IAToken} from "./interfaces/IAToken.sol";
-import {IAaveIncentivesController} from "aave-v3-core/contracts/interfaces/IAaveIncentivesController.sol";
-import {IInitializableAToken} from "./interfaces/IInitializableAToken.sol";
-import {ScaledBalanceTokenBase} from "./ScaledBalanceTokenBase.sol";
-import {IncentivizedERC20} from "./IncentivizedERC20.sol";
-import {EIP712Base} from "./dependencies/EIP712Base.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
 
+import {IERC20} from "../../dependencies/openzeppelin/contracts/IERC20.sol";
+import {GPv2SafeERC20} from "../../dependencies/gnosis/contracts/GPv2SafeERC20.sol";
+import {VersionedInitializable} from "../../misc/aave-upgradeability/VersionedInitializable.sol";
+import {Errors} from "../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../libraries/math/WadRayMath.sol";
+import {IPool} from "../../interfaces/IPool.sol";
+import {IAToken} from "../../interfaces/IAToken.sol";
+import {IAaveIncentivesController} from "../../interfaces/IAaveIncentivesController.sol";
+import {IInitializableAToken} from "../../interfaces/IInitializableAToken.sol";
+import {ScaledBalanceTokenBase} from "./base/ScaledBalanceTokenBase.sol";
+import {IncentivizedERC20} from "./base/IncentivizedERC20.sol";
+import {EIP712Base} from "./base/EIP712Base.sol";
+
 /**
  * @title Aave ERC20 AToken
  * @author Aave
  * @notice Implementation of the interest bearing token for the Aave protocol
  */
-contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IAToken {
+abstract contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, IAToken {
   using WadRayMath for uint256;
   using SafeCast for uint256;
   using GPv2SafeERC20 for IERC20;
@@ -30,35 +30,34 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
   bytes32 public constant PERMIT_TYPEHASH =
     keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
 
-  uint256 public constant ATOKEN_REVISION = 0x2;
+  address public immutable TREASURY;
 
-  address internal _treasury;
+  address internal _deprecated_treasury;
   address internal _underlyingAsset;
 
-  /// @inheritdoc VersionedInitializable
-  function getRevision() internal pure virtual override returns (uint256) {
-    return ATOKEN_REVISION;
-  }
-
   /**
    * @dev Constructor.
    * @param pool The address of the Pool contract
+   * @param rewardsController The address of the rewards controller contract
+   * @param treasury The address of the treasury. This is where accrued interest is sent.
    */
-  constructor(IPool pool) ScaledBalanceTokenBase(pool, "ATOKEN_IMPL", "ATOKEN_IMPL", 0) EIP712Base() {
-    // Intentionally left blank
+  constructor(IPool pool, address rewardsController, address treasury)
+    ScaledBalanceTokenBase(pool, "ATOKEN_IMPL", "ATOKEN_IMPL", 0, rewardsController)
+    EIP712Base()
+  {
+    require(treasury != address(0), Errors.ZeroAddressNotValid());
+    TREASURY = treasury;
   }
 
   /// @inheritdoc IInitializableAToken
   function initialize(
-    IPool,
-    address,
-    address,
-    IAaveIncentivesController,
-    uint8,
-    string calldata,
-    string calldata,
-    bytes calldata
-  ) public virtual override initializer {}
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 aTokenDecimals,
+    string calldata aTokenName,
+    string calldata aTokenSymbol,
+    bytes calldata params
+  ) public virtual;
 
   /// @inheritdoc IAToken
   function mint(address caller, address onBehalfOf, uint256 amount, uint256 index)
@@ -89,14 +88,17 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
     if (amount == 0) {
       return;
     }
-    _mintScaled(address(POOL), _treasury, amount, index);
+    _mintScaled(address(POOL), TREASURY, amount, index);
   }
 
   /// @inheritdoc IAToken
-  function transferOnLiquidation(address from, address to, uint256 value) external virtual override onlyPool {
-    // Being a normal transfer, the Transfer() and BalanceTransfer() are emitted
-    // so no need to emit a specific event here
-    _transfer(from, to, value, false);
+  function transferOnLiquidation(address from, address to, uint256 amount, uint256 index)
+    external
+    virtual
+    override
+    onlyPool
+  {
+    _transfer(from, to, amount, index);
   }
 
   /// @inheritdoc IERC20
@@ -117,7 +119,7 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
 
   /// @inheritdoc IAToken
   function RESERVE_TREASURY_ADDRESS() external view override returns (address) {
-    return _treasury;
+    return TREASURY;
   }
 
   /// @inheritdoc IAToken
@@ -130,36 +132,34 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
     IERC20(_underlyingAsset).safeTransfer(target, amount);
   }
 
-  /// @inheritdoc IAToken
-  function handleRepayment(address user, address onBehalfOf, uint256 amount) external virtual override onlyPool {
-    // Intentionally left blank
-  }
-
   /// @inheritdoc IAToken
   function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
     external
     override
   {
-    require(owner != address(0), Errors.ZERO_ADDRESS_NOT_VALID);
+    require(owner != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
     uint256 currentValidNonce = _nonces[owner];
-    bytes32 digest =
-      _hashTypedDataV4(keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline)));
-    require(owner == ECDSA.recover(digest, v, r, s), Errors.INVALID_SIGNATURE);
+    bytes32 digest = keccak256(
+      abi.encodePacked(
+        "\x19\x01",
+        DOMAIN_SEPARATOR(),
+        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))
+      )
+    );
+    require(owner == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
     _nonces[owner] = currentValidNonce + 1;
     _approve(owner, spender, value);
   }
 
   /**
-   * @notice Transfers the aTokens between two users. Validates the transfer
-   * (ie checks for valid HF after the transfer) if required
+   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()
    * @param from The source address
    * @param to The destination address
    * @param amount The amount getting transferred
-   * @param validate True if the transfer needs to be validated, false otherwise
    */
-  function _transfer(address from, address to, uint256 amount, bool validate) internal virtual {
+  function _transfer(address from, address to, uint120 amount) internal virtual override {
     address underlyingAsset = _underlyingAsset;
 
     uint256 index = POOL.getReserveNormalizedIncome(underlyingAsset);
@@ -167,23 +167,46 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
     uint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);
     uint256 toBalanceBefore = super.balanceOf(to).rayMul(index);
 
-    super._transfer(from, to, amount, index);
+    _transfer(from, to, amount, index);
 
-    if (validate) {
-      POOL.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);
-    }
-
-    emit BalanceTransfer(from, to, amount.rayDiv(index), index);
+    POOL.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);
   }
 
   /**
-   * @notice Overrides the parent _transfer to force validated transfer() and transferFrom()
-   * @param from The source address
-   * @param to The destination address
+   * @notice Implements the basic logic to transfer scaled balance tokens between two users
+   * @dev It emits a mint event with the interest accrued per user
+   * @param sender The source address
+   * @param recipient The destination address
    * @param amount The amount getting transferred
+   * @param index The next liquidity index of the reserve
    */
-  function _transfer(address from, address to, uint120 amount) internal virtual override {
-    _transfer(from, to, amount, true);
+  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal virtual {
+    uint256 senderScaledBalance = super.balanceOf(sender);
+    uint256 senderBalanceIncrease =
+      senderScaledBalance.rayMul(index) - senderScaledBalance.rayMul(_userState[sender].additionalData);
+
+    uint256 recipientScaledBalance = super.balanceOf(recipient);
+    uint256 recipientBalanceIncrease =
+      recipientScaledBalance.rayMul(index) - recipientScaledBalance.rayMul(_userState[recipient].additionalData);
+
+    _userState[sender].additionalData = index.toUint128();
+    _userState[recipient].additionalData = index.toUint128();
+    uint120 scaledAmount = amount.rayDiv(index).toUint120();
+
+    super._transfer(sender, recipient, scaledAmount);
+
+    if (senderBalanceIncrease > 0) {
+      emit Transfer(address(0), sender, senderBalanceIncrease);
+      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);
+    }
+
+    if (sender != recipient && recipientBalanceIncrease > 0) {
+      emit Transfer(address(0), recipient, recipientBalanceIncrease);
+      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);
+    }
+
+    emit Transfer(sender, recipient, amount);
+    emit BalanceTransfer(sender, recipient, scaledAmount, index);
   }
 
   /**
@@ -209,7 +232,7 @@ contract AToken is VersionedInitializable, ScaledBalanceTokenBase, EIP712Base, I
 
   /// @inheritdoc IAToken
   function rescueTokens(address token, address to, uint256 amount) external override onlyPoolAdmin {
-    require(token != _underlyingAsset, Errors.UNDERLYING_CANNOT_BE_RESCUED);
+    require(token != _underlyingAsset, Errors.UnderlyingCannotBeRescued());
     IERC20(token).safeTransfer(to, amount);
   }
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ATokenWithDelegation.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ATokenWithDelegation.sol
index 66cab88..1e8dfc1 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ATokenWithDelegation.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ATokenWithDelegation.sol
@@ -1,17 +1,24 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.10;
+
+import {WadRayMath} from "../libraries/math/WadRayMath.sol";
+import {IPool} from "../../interfaces/IPool.sol";
 
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {BaseDelegation} from "aave-token-v3/BaseDelegation.sol";
 import {AToken} from "./AToken.sol";
 
+import {DelegationMode} from "./base/DelegationMode.sol";
+import {BaseDelegation} from "./delegation/BaseDelegation.sol";
+
 /**
+ * @title Aave ERC20 ATokenWithDelegation
  * @author BGD Labs
  * @notice contract that gives a tokens the delegation functionality. For now should only be used for AAVE aToken
  * @dev uint sizes are used taken into account that is tailored for AAVE token. In this AToken child we only update
  *         delegation balances. Balances amount is taken care of by AToken contract
  */
-contract ATokenWithDelegation is AToken, BaseDelegation {
+abstract contract ATokenWithDelegation is AToken, BaseDelegation {
+  using WadRayMath for uint256;
+
   struct ATokenDelegationState {
     uint72 delegatedPropositionBalance;
     uint72 delegatedVotingBalance;
@@ -19,7 +26,13 @@ contract ATokenWithDelegation is AToken, BaseDelegation {
 
   mapping(address => ATokenDelegationState) internal _delegatedState;
 
-  constructor(IPool pool) AToken(pool) {}
+  /**
+   * @dev Constructor.
+   * @param pool The address of the Pool contract
+   * @param rewardsController The address of the rewards controller contract
+   * @param treasury The address of the treasury. This is where accrued interest is sent.
+   */
+  constructor(IPool pool, address rewardsController, address treasury) AToken(pool, rewardsController, treasury) {}
 
   function _getDomainSeparator() internal view override returns (bytes32) {
     return DOMAIN_SEPARATOR();
@@ -51,20 +64,31 @@ contract ATokenWithDelegation is AToken, BaseDelegation {
   }
 
   /**
-   * @notice Overrides the parent _transfer to force validated transfer() and delegation balance transfers
-   * @param from The source address
-   * @param to The destination address
-   * @param amount The amount getting transferred
+   * @notice Transfers tokens and updates delegation balances.  This function overrides the parent `_transfer`
+   *         to include delegation logic. It first updates the delegation balances based on the transfer
+   *         and then calls the parent's `_transfer` function to perform the actual token transfer.
+   * @dev The amount is divided by the index inside this function to perform the scaling.
+   * @param from The sender's address.
+   * @param to The recipient's address.
+   * @param amount The amount of tokens to transfer (non-scaled).
+   * @param index The current liquidity index of the reserve.
    */
-  function _transfer(address from, address to, uint256 amount, bool validate) internal override {
-    _delegationChangeOnTransfer(from, to, _getBalance(from), _getBalance(to), amount);
-    super._transfer(from, to, amount, validate);
+  function _transfer(address from, address to, uint256 amount, uint256 index) internal virtual override {
+    _delegationChangeOnTransfer({
+      from: from,
+      to: to,
+      fromBalanceBefore: _userState[from].balance,
+      toBalanceBefore: _userState[to].balance,
+      amount: uint256(amount).rayDiv(index)
+    });
+
+    super._transfer(from, to, amount, index);
   }
 
   /**
    * @notice Overrides the parent _mint to force delegation balance transfers
    * @param account The address receiving tokens
-   * @param amount The amount of tokens to mint
+   * @param amount The amount of tokens to mint (scaled)
    */
   function _mint(address account, uint120 amount) internal override {
     _delegationChangeOnTransfer(address(0), account, 0, _getBalance(account), amount);
@@ -74,7 +98,7 @@ contract ATokenWithDelegation is AToken, BaseDelegation {
   /**
    * @notice Overrides the parent _burn to force delegation balance transfers
    * @param account The account whose tokens are burnt
-   * @param amount The amount of tokens to burn
+   * @param amount The amount of tokens to burn (scaled)
    */
   function _burn(address account, uint120 amount) internal override {
     _delegationChangeOnTransfer(account, address(0), _getBalance(account), 0, amount);
diff --git a/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ATokenWithDelegationInstance.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ATokenWithDelegationInstance.sol
new file mode 100644
index 0000000..13ffc3d
--- /dev/null
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ATokenWithDelegationInstance.sol
@@ -0,0 +1,59 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.0;
+
+import {IPool} from "../interfaces/IPool.sol";
+import {IInitializableAToken} from "../interfaces/IInitializableAToken.sol";
+
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
+
+import {VersionedInitializable} from "../misc/aave-upgradeability/VersionedInitializable.sol";
+
+import {ATokenWithDelegation} from "../protocol/tokenization/ATokenWithDelegation.sol";
+
+/**
+ * @title Aave ERC20 ATokenWithDelegation Instance
+ * @author BGD Labs
+ * @notice Instance of the interest bearing token for the Aave protocol with additional delegation functionality used on aAAVE(mainnet)
+ */
+contract ATokenWithDelegationInstance is ATokenWithDelegation {
+  uint256 public constant ATOKEN_REVISION = 3;
+
+  constructor(IPool pool, address rewardsController, address treasury)
+    ATokenWithDelegation(pool, rewardsController, treasury)
+  {}
+
+  /// @inheritdoc VersionedInitializable
+  function getRevision() internal pure virtual override returns (uint256) {
+    return ATOKEN_REVISION;
+  }
+
+  /// @inheritdoc IInitializableAToken
+  function initialize(
+    IPool initializingPool,
+    address underlyingAsset,
+    uint8 aTokenDecimals,
+    string calldata aTokenName,
+    string calldata aTokenSymbol,
+    bytes calldata params
+  ) public override initializer {
+    require(initializingPool == POOL, Errors.PoolAddressesDoNotMatch());
+    _setName(aTokenName);
+    _setSymbol(aTokenSymbol);
+    _setDecimals(aTokenDecimals);
+
+    _underlyingAsset = underlyingAsset;
+
+    _domainSeparator = _calculateDomainSeparator();
+
+    emit Initialized(
+      underlyingAsset,
+      address(POOL),
+      address(TREASURY),
+      address(REWARDS_CONTROLLER),
+      aTokenDecimals,
+      aTokenName,
+      aTokenSymbol,
+      params
+    );
+  }
+}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/BaseDelegation.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/BaseDelegation.sol
index 5111937..0dff653 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/BaseDelegation.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/BaseDelegation.sol
@@ -1,11 +1,15 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
+pragma solidity ^0.8.10;
 
+import {MessageHashUtils} from "openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol";
 import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
 
-import {SafeCast72} from "./utils/SafeCast72.sol";
-import {IGovernancePowerDelegationToken} from "./interfaces/IGovernancePowerDelegationToken.sol";
-import {DelegationMode} from "./DelegationAwareBalance.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+
+import {IBaseDelegation} from "./interfaces/IBaseDelegation.sol";
+import {DelegationMode} from "../base/DelegationMode.sol";
 
 /**
  * @notice The contract implements generic delegation functionality for the upcoming governance v3
@@ -18,7 +22,7 @@ import {DelegationMode} from "./DelegationAwareBalance.sol";
  *   otherwise at least POWER_SCALE_FACTOR should be adjusted !!!
  *   *************************************************************
  */
-abstract contract BaseDelegation is IGovernancePowerDelegationToken {
+abstract contract BaseDelegation is IBaseDelegation {
   struct DelegationState {
     uint72 delegatedPropositionBalance;
     uint72 delegatedVotingBalance;
@@ -77,18 +81,18 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
    */
   function _setDelegationState(address user, DelegationState memory delegationState) internal virtual;
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function delegateByType(address delegatee, GovernancePowerType delegationType) external virtual override {
     _delegateByType(msg.sender, delegatee, delegationType);
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function delegate(address delegatee) external override {
     _delegateByType(msg.sender, delegatee, GovernancePowerType.VOTING);
     _delegateByType(msg.sender, delegatee, GovernancePowerType.PROPOSITION);
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getDelegateeByType(address delegator, GovernancePowerType delegationType)
     external
     view
@@ -98,7 +102,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     return _getDelegateeByType(delegator, _getDelegationState(delegator), delegationType);
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getDelegates(address delegator) external view override returns (address, address) {
     DelegationState memory delegatorBalance = _getDelegationState(delegator);
     return (
@@ -107,7 +111,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     );
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getPowerCurrent(address user, GovernancePowerType delegationType)
     public
     view
@@ -118,15 +122,17 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     DelegationState memory userState = _getDelegationState(user);
     uint256 userOwnPower = uint8(userState.delegationMode) & (uint8(delegationType) + 1) == 0 ? _getBalance(user) : 0;
     uint256 userDelegatedPower = _getDelegatedPowerByType(userState, delegationType);
+
+    // The power returned is the scaled power, assuming an index of 1e27. The voting strategy is based on the same assumption.
     return userOwnPower + userDelegatedPower;
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getPowersCurrent(address user) external view override returns (uint256, uint256) {
     return (getPowerCurrent(user, GovernancePowerType.VOTING), getPowerCurrent(user, GovernancePowerType.PROPOSITION));
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function metaDelegateByType(
     address delegator,
     address delegatee,
@@ -136,10 +142,11 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     bytes32 r,
     bytes32 s
   ) external override {
-    require(delegator != address(0), "INVALID_OWNER");
+    require(delegator != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, "INVALID_EXPIRATION");
-    bytes32 digest = ECDSA.toTypedDataHash(
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+    bytes32 digest = MessageHashUtils.toTypedDataHash(
       _getDomainSeparator(),
       keccak256(
         abi.encode(
@@ -148,24 +155,27 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
       )
     );
 
-    require(delegator == ECDSA.recover(digest, v, r, s), "INVALID_SIGNATURE");
+    require(delegator == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
+
     _delegateByType(delegator, delegatee, delegationType);
   }
 
-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function metaDelegate(address delegator, address delegatee, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
     external
     override
   {
-    require(delegator != address(0), "INVALID_OWNER");
+    require(delegator != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, "INVALID_EXPIRATION");
-    bytes32 digest = ECDSA.toTypedDataHash(
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+    bytes32 digest = MessageHashUtils.toTypedDataHash(
       _getDomainSeparator(),
       keccak256(abi.encode(DELEGATE_TYPEHASH, delegator, delegatee, _incrementNonces(delegator), deadline))
     );
 
-    require(delegator == ECDSA.recover(digest, v, r, s), "INVALID_SIGNATURE");
+    require(delegator == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
+
     _delegateByType(delegator, delegatee, GovernancePowerType.VOTING);
     _delegateByType(delegator, delegatee, GovernancePowerType.PROPOSITION);
   }
@@ -196,8 +206,8 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
 
     // we use uint72, because this is the most optimal for AaveTokenV3
     // To make delegated balance fit into uint72 we're decreasing precision of delegated balance by POWER_SCALE_FACTOR
-    uint72 impactOnDelegationBefore72 = SafeCast72.toUint72(impactOnDelegationBefore / POWER_SCALE_FACTOR);
-    uint72 impactOnDelegationAfter72 = SafeCast72.toUint72(impactOnDelegationAfter / POWER_SCALE_FACTOR);
+    uint72 impactOnDelegationBefore72 = SafeCast.toUint72(impactOnDelegationBefore / POWER_SCALE_FACTOR);
+    uint72 impactOnDelegationAfter72 = SafeCast.toUint72(impactOnDelegationAfter / POWER_SCALE_FACTOR);
 
     DelegationState memory delegateeState = _getDelegationState(delegatee);
     if (delegationType == GovernancePowerType.VOTING) {
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/DataTypes.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/DataTypes.sol
index 6756aa5..3debcd4 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/DataTypes.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/DataTypes.sol
@@ -2,7 +2,11 @@
 pragma solidity ^0.8.0;
 
 library DataTypes {
-  struct ReserveData {
+  /**
+   * This exists specifically to maintain the `getReserveData()` interface, since the new, internal
+   * `ReserveData` struct includes the reserve's `virtualUnderlyingBalance`.
+   */
+  struct ReserveDataLegacy {
     //stores the reserve configuration
     ReserveConfigurationMap configuration;
     //the liquidity index. Expressed in ray
@@ -13,7 +17,7 @@ library DataTypes {
     uint128 variableBorrowIndex;
     //the current variable borrow rate. Expressed in ray
     uint128 currentVariableBorrowRate;
-    //the current stable borrow rate. Expressed in ray
+    // DEPRECATED on v3.2.0
     uint128 currentStableBorrowRate;
     //timestamp of last update
     uint40 lastUpdateTimestamp;
@@ -21,20 +25,59 @@ library DataTypes {
     uint16 id;
     //aToken address
     address aTokenAddress;
-    //stableDebtToken address
+    // DEPRECATED on v3.2.0
     address stableDebtTokenAddress;
     //variableDebtToken address
     address variableDebtTokenAddress;
-    //address of the interest rate strategy
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
     address interestRateStrategyAddress;
     //the current treasury balance, scaled
     uint128 accruedToTreasury;
-    //the outstanding unbacked aTokens minted through the bridging feature
+    // DEPRECATED on v3.4.0
     uint128 unbacked;
     //the outstanding debt borrowed against this asset in isolation mode
     uint128 isolationModeTotalDebt;
   }
 
+  struct ReserveData {
+    //stores the reserve configuration
+    ReserveConfigurationMap configuration;
+    //the liquidity index. Expressed in ray
+    uint128 liquidityIndex;
+    //the current supply rate. Expressed in ray
+    uint128 currentLiquidityRate;
+    //variable borrow index. Expressed in ray
+    uint128 variableBorrowIndex;
+    //the current variable borrow rate. Expressed in ray
+    uint128 currentVariableBorrowRate;
+    /// @notice reused `__deprecatedStableBorrowRate` storage from pre 3.2
+    // the current accumulate deficit in underlying tokens
+    uint128 deficit;
+    //timestamp of last update
+    uint40 lastUpdateTimestamp;
+    //the id of the reserve. Represents the position in the list of the active reserves
+    uint16 id;
+    //timestamp until when liquidations are not allowed on the reserve, if set to past liquidations will be allowed
+    uint40 liquidationGracePeriodUntil;
+    //aToken address
+    address aTokenAddress;
+    // DEPRECATED on v3.2.0
+    address __deprecatedStableDebtTokenAddress;
+    //variableDebtToken address
+    address variableDebtTokenAddress;
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
+    address __deprecatedInterestRateStrategyAddress;
+    //the current treasury balance, scaled
+    uint128 accruedToTreasury;
+    // In aave 3.3.0 this storage slot contained the `unbacked`
+    uint128 virtualUnderlyingBalance;
+    //the outstanding debt borrowed against this asset in isolation mode
+    uint128 isolationModeTotalDebt;
+    //the amount of underlying accounted for by the protocol
+    // DEPRECATED on v3.4.0. Moved into the same slot as accruedToTreasury for optimized storage access.
+    uint128 __deprecatedVirtualUnderlyingBalance;
+  }
+
   struct ReserveConfigurationMap {
     //bit 0-15: LTV
     //bit 16-31: Liq. threshold
@@ -43,18 +86,20 @@ library DataTypes {
     //bit 56: reserve is active
     //bit 57: reserve is frozen
     //bit 58: borrowing is enabled
-    //bit 59: stable rate borrowing enabled
+    //bit 59: DEPRECATED: stable rate borrowing enabled
     //bit 60: asset is paused
     //bit 61: borrowing in isolation mode is enabled
-    //bit 62-63: reserved
+    //bit 62: siloed borrowing enabled
+    //bit 63: flashloaning enabled
     //bit 64-79: reserve factor
-    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap
-    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap
-    //bit 152-167 liquidation protocol fee
-    //bit 168-175 eMode category
-    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
-    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-    //bit 252-255 unused
+    //bit 80-115: borrow cap in whole tokens, borrowCap == 0 => no cap
+    //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
+    //bit 152-167: liquidation protocol fee
+    //bit 168-175: DEPRECATED: eMode category
+    //bit 176-211: DEPRECATED: unbacked mint cap
+    //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
+    //bit 252: DEPRECATED: virtual accounting is enabled for the reserve
+    //bit 253-255 unused
     uint256 data;
   }
 
@@ -67,30 +112,49 @@ library DataTypes {
     uint256 data;
   }
 
-  struct EModeCategory {
+  // DEPRECATED: kept for backwards compatibility, might be removed in a future version
+  struct EModeCategoryLegacy {
     // each eMode category has a custom ltv and liquidation threshold
     uint16 ltv;
     uint16 liquidationThreshold;
     uint16 liquidationBonus;
-    // each eMode category may or may not have a custom oracle to override the individual assets price oracles
+    // DEPRECATED
     address priceSource;
     string label;
   }
 
+  struct CollateralConfig {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+  }
+
+  struct EModeCategoryBaseConfiguration {
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    string label;
+  }
+
+  struct EModeCategory {
+    // each eMode category has a custom ltv and liquidation threshold
+    uint16 ltv;
+    uint16 liquidationThreshold;
+    uint16 liquidationBonus;
+    uint128 collateralBitmap;
+    string label;
+    uint128 borrowableBitmap;
+  }
+
   enum InterestRateMode {
     NONE,
-    STABLE,
+    __DEPRECATED,
     VARIABLE
   }
 
   struct ReserveCache {
     uint256 currScaledVariableDebt;
     uint256 nextScaledVariableDebt;
-    uint256 currPrincipalStableDebt;
-    uint256 currAvgStableBorrowRate;
-    uint256 currTotalStableDebt;
-    uint256 nextAvgStableBorrowRate;
-    uint256 nextTotalStableDebt;
     uint256 currLiquidityIndex;
     uint256 nextLiquidityIndex;
     uint256 currVariableBorrowIndex;
@@ -100,26 +164,27 @@ library DataTypes {
     uint256 reserveFactor;
     ReserveConfigurationMap reserveConfiguration;
     address aTokenAddress;
-    address stableDebtTokenAddress;
     address variableDebtTokenAddress;
     uint40 reserveLastUpdateTimestamp;
-    uint40 stableDebtLastUpdateTimestamp;
   }
 
   struct ExecuteLiquidationCallParams {
-    uint256 reservesCount;
+    address liquidator;
     uint256 debtToCover;
     address collateralAsset;
     address debtAsset;
-    address user;
+    address borrower;
     bool receiveAToken;
     address priceOracle;
-    uint8 userEModeCategory;
+    uint8 borrowerEModeCategory;
     address priceOracleSentinel;
+    address interestRateStrategyAddress;
   }
 
   struct ExecuteSupplyParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address onBehalfOf;
     uint16 referralCode;
@@ -129,12 +194,11 @@ library DataTypes {
     address asset;
     address user;
     address onBehalfOf;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     uint16 referralCode;
     bool releaseUnderlying;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
@@ -142,6 +206,8 @@ library DataTypes {
 
   struct ExecuteRepayParams {
     address asset;
+    address user;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     address onBehalfOf;
@@ -149,18 +215,20 @@ library DataTypes {
   }
 
   struct ExecuteWithdrawParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address to;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
   }
 
-  struct ExecuteSetUserEModeParams {
-    uint256 reservesCount;
-    address oracle;
-    uint8 categoryId;
+  struct ExecuteEliminateDeficitParams {
+    address user;
+    address asset;
+    address interestRateStrategyAddress;
+    uint256 amount;
   }
 
   struct FinalizeTransferParams {
@@ -170,50 +238,50 @@ library DataTypes {
     uint256 amount;
     uint256 balanceFromBefore;
     uint256 balanceToBefore;
-    uint256 reservesCount;
     address oracle;
     uint8 fromEModeCategory;
   }
 
   struct FlashloanParams {
+    address user;
     address receiverAddress;
     address[] assets;
     uint256[] amounts;
     uint256[] interestRateModes;
+    address interestRateStrategyAddress;
     address onBehalfOf;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
-    uint256 maxStableRateBorrowSizePercent;
-    uint256 reservesCount;
+    uint256 flashLoanPremium;
     address addressesProvider;
+    address pool;
     uint8 userEModeCategory;
     bool isAuthorizedFlashBorrower;
   }
 
   struct FlashloanSimpleParams {
+    address user;
     address receiverAddress;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
+    uint256 flashLoanPremium;
   }
 
   struct FlashLoanRepaymentParams {
+    address user;
     uint256 amount;
     uint256 totalPremium;
-    uint256 flashLoanPremiumToProtocol;
     address asset;
+    address interestRateStrategyAddress;
     address receiverAddress;
     uint16 referralCode;
   }
 
   struct CalculateUserAccountDataParams {
     UserConfigurationMap userConfig;
-    uint256 reservesCount;
     address user;
     address oracle;
     uint8 userEModeCategory;
@@ -226,14 +294,9 @@ library DataTypes {
     address userAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
-    uint256 maxStableLoanPercent;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
-    bool isolationModeActive;
-    address isolationModeCollateralAddress;
-    uint256 isolationModeDebtCeiling;
   }
 
   struct ValidateLiquidationCallParams {
@@ -241,26 +304,26 @@ library DataTypes {
     uint256 totalDebt;
     uint256 healthFactor;
     address priceOracleSentinel;
+    address borrower;
+    address liquidator;
   }
 
   struct CalculateInterestRatesParams {
     uint256 unbacked;
     uint256 liquidityAdded;
     uint256 liquidityTaken;
-    uint256 totalStableDebt;
-    uint256 totalVariableDebt;
-    uint256 averageStableBorrowRate;
+    uint256 totalDebt;
     uint256 reserveFactor;
     address reserve;
-    address aToken;
+    // @notice DEPRECATED in 3.4, but kept for backwards compatibility
+    bool usingVirtualBalance;
+    uint256 virtualUnderlyingBalance;
   }
 
   struct InitReserveParams {
     address asset;
     address aTokenAddress;
-    address stableDebtAddress;
     address variableDebtAddress;
-    address interestRateStrategyAddress;
     uint16 reservesCount;
     uint16 maxNumberReserves;
   }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ECDSA.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ECDSA.sol
index 85fffca..ab51116 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ECDSA.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ECDSA.sol
@@ -1,9 +1,7 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)
 
-pragma solidity ^0.8.19;
-
-import "../Strings.sol";
+pragma solidity ^0.8.20;
 
 /**
  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
@@ -34,21 +32,12 @@ library ECDSA {
    */
   error ECDSAInvalidSignatureS(bytes32 s);
 
-  function _throwError(RecoverError error, bytes32 errorArg) private pure {
-    if (error == RecoverError.NoError) {
-      return; // no error: do nothing
-    } else if (error == RecoverError.InvalidSignature) {
-      revert ECDSAInvalidSignature();
-    } else if (error == RecoverError.InvalidSignatureLength) {
-      revert ECDSAInvalidSignatureLength(uint256(errorArg));
-    } else if (error == RecoverError.InvalidSignatureS) {
-      revert ECDSAInvalidSignatureS(errorArg);
-    }
-  }
-
   /**
-   * @dev Returns the address that signed a hashed message (`hash`) with
-   * `signature` or error string. This address can then be used for verification purposes.
+   * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
+   * return address(0) without also returning an error description. Errors are documented using an enum (error type)
+   * and a bytes32 providing additional information about the error.
+   *
+   * If no error is returned, then the address can be used for verification purposes.
    *
    * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
    * this function rejects them by requiring the `s` value to be in the lower
@@ -58,23 +47,24 @@ library ECDSA {
    * verification to be secure: it is possible to craft signatures that
    * recover to arbitrary addresses for non-hashed data. A safe way to ensure
    * this is by receiving a hash of the original message (which may otherwise
-   * be too long), and then calling {toEthSignedMessageHash} on it.
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
    *
    * Documentation for signature generation:
    * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
    * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
-   *
-   * _Available since v4.3._
    */
-  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {
+  function tryRecover(bytes32 hash, bytes memory signature)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
     if (signature.length == 65) {
       bytes32 r;
       bytes32 s;
       uint8 v;
       // ecrecover takes the signature parameters, and the only way to get them
       // currently is to use assembly.
-      /// @solidity memory-safe-assembly
-      assembly {
+      assembly ("memory-safe") {
         r := mload(add(signature, 0x20))
         s := mload(add(signature, 0x40))
         v := byte(0, mload(add(signature, 0x60)))
@@ -97,7 +87,7 @@ library ECDSA {
    * verification to be secure: it is possible to craft signatures that
    * recover to arbitrary addresses for non-hashed data. A safe way to ensure
    * this is by receiving a hash of the original message (which may otherwise
-   * be too long), and then calling {toEthSignedMessageHash} on it.
+   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
    */
   function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
     (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
@@ -108,11 +98,13 @@ library ECDSA {
   /**
    * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
    *
-   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
-   *
-   * _Available since v4.3._
+   * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]
    */
-  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {
+  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)
+    internal
+    pure
+    returns (address recovered, RecoverError err, bytes32 errArg)
+  {
     unchecked {
       bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
       // We do not check for an overflow here since the shift operation results in 0 or 1.
@@ -123,8 +115,6 @@ library ECDSA {
 
   /**
    * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
-   *
-   * _Available since v4.2._
    */
   function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
     (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
@@ -135,13 +125,11 @@ library ECDSA {
   /**
    * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
    * `r` and `s` signature fields separately.
-   *
-   * _Available since v4.3._
    */
   function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)
     internal
     pure
-    returns (address, RecoverError, bytes32)
+    returns (address recovered, RecoverError err, bytes32 errArg)
   {
     // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
     // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
@@ -176,63 +164,17 @@ library ECDSA {
   }
 
   /**
-   * @dev Returns an Ethereum Signed Message, created from a `hash`. This
-   * produces hash corresponding to the one signed with the
-   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
-   * JSON-RPC method as part of EIP-191.
-   *
-   * See {recover}.
+   * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
    */
-  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {
-    // 32 is the length in bytes of hash,
-    // enforced by the type signature above
-    /// @solidity memory-safe-assembly
-    assembly {
-      mstore(0x00, "\x19Ethereum Signed Message:\n32")
-      mstore(0x1c, hash)
-      message := keccak256(0x00, 0x3c)
-    }
-  }
-
-  /**
-   * @dev Returns an Ethereum Signed Message, created from `s`. This
-   * produces hash corresponding to the one signed with the
-   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
-   * JSON-RPC method as part of EIP-191.
-   *
-   * See {recover}.
-   */
-  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
-    return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
-  }
-
-  /**
-   * @dev Returns an Ethereum Signed Typed Data, created from a
-   * `domainSeparator` and a `structHash`. This produces hash corresponding
-   * to the one signed with the
-   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
-   * JSON-RPC method as part of EIP-712.
-   *
-   * See {recover}.
-   */
-  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      let ptr := mload(0x40)
-      mstore(ptr, hex"1901")
-      mstore(add(ptr, 0x02), domainSeparator)
-      mstore(add(ptr, 0x22), structHash)
-      data := keccak256(ptr, 0x42)
+  function _throwError(RecoverError error, bytes32 errorArg) private pure {
+    if (error == RecoverError.NoError) {
+      return; // no error: do nothing
+    } else if (error == RecoverError.InvalidSignature) {
+      revert ECDSAInvalidSignature();
+    } else if (error == RecoverError.InvalidSignatureLength) {
+      revert ECDSAInvalidSignatureLength(uint256(errorArg));
+    } else if (error == RecoverError.InvalidSignatureS) {
+      revert ECDSAInvalidSignatureS(errorArg);
     }
   }
-
-  /**
-   * @dev Returns an Ethereum Signed Data with intended validator, created from a
-   * `validator` and `data` according to the version 0 of EIP-191.
-   *
-   * See {recover}.
-   */
-  function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
-    return keccak256(abi.encodePacked(hex"1900", validator, data));
-  }
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/EIP712.sol b/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/EIP712.sol
deleted file mode 100644
index d2b7fc4..0000000
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/EIP712.sol
+++ /dev/null
@@ -1,171 +0,0 @@
-// SPDX-License-Identifier: MIT
-// Contract modified from OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol) to remove local
-// fallback storage variables, so contract does not affect on existing storage layout. This works as its used on contracts
-// that have name and revision < 32 bytes
-
-pragma solidity ^0.8.10;
-
-import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
-import {ShortStrings, ShortString} from "openzeppelin-contracts/contracts/utils/ShortStrings.sol";
-import {IERC5267} from "openzeppelin-contracts/contracts/interfaces/IERC5267.sol";
-
-/**
- * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
- *
- * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,
- * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding
- * they need in their contracts using a combination of `abi.encode` and `keccak256`.
- *
- * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
- * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
- * ({_hashTypedDataV4}).
- *
- * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
- * the chain id to protect against replay attacks on an eventual fork of the chain.
- *
- * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
- * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
- *
- * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
- * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the
- * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
- *
- * _Available since v3.4._
- *
- * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment
- */
-abstract contract EIP712 is IERC5267 {
-  using ShortStrings for *;
-
-  bytes32 private constant _TYPE_HASH =
-    keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
-
-  // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
-  // invalidate the cached domain separator if the chain id changes.
-  bytes32 private immutable _cachedDomainSeparator;
-  uint256 private immutable _cachedChainId;
-  address private immutable _cachedThis;
-
-  bytes32 private immutable _hashedName;
-  bytes32 private immutable _hashedVersion;
-
-  ShortString private immutable _name;
-  ShortString private immutable _version;
-
-  /**
-   * @dev Initializes the domain separator and parameter caches.
-   *
-   * The meaning of `name` and `version` is specified in
-   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
-   *
-   * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
-   * - `version`: the current major version of the signing domain.
-   *
-   * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
-   * contract upgrade].
-   */
-  /// @dev BGD: removed usage of fallback variables to not modify previous storage layout. As we know that the length of
-  ///           name and version will not be bigger than 32 bytes we use toShortString as there is no need to use the fallback system.
-  constructor(string memory name, string memory version) {
-    _name = name.toShortString();
-    _version = version.toShortString();
-    _hashedName = keccak256(bytes(name));
-    _hashedVersion = keccak256(bytes(version));
-
-    _cachedChainId = block.chainid;
-    _cachedDomainSeparator = _buildDomainSeparator();
-    _cachedThis = address(this);
-  }
-
-  /**
-   * @dev Returns the domain separator for the current chain.
-   */
-  function _domainSeparatorV4() internal view returns (bytes32) {
-    if (address(this) == _cachedThis && block.chainid == _cachedChainId) {
-      return _cachedDomainSeparator;
-    } else {
-      return _buildDomainSeparator();
-    }
-  }
-
-  function _buildDomainSeparator() private view returns (bytes32) {
-    return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
-  }
-
-  /**
-   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
-   * function returns the hash of the fully encoded EIP712 message for this domain.
-   *
-   * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
-   *
-   * ```solidity
-   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
-   *     keccak256("Mail(address to,string contents)"),
-   *     mailTo,
-   *     keccak256(bytes(mailContents))
-   * )));
-   * address signer = ECDSA.recover(digest, signature);
-   * ```
-   */
-  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
-    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);
-  }
-
-  /**
-   * @dev See {EIP-5267}.
-   *
-   * _Available since v4.9._
-   */
-  function eip712Domain()
-    public
-    view
-    virtual
-    returns (
-      bytes1 fields,
-      string memory name,
-      string memory version,
-      uint256 chainId,
-      address verifyingContract,
-      bytes32 salt,
-      uint256[] memory extensions
-    )
-  {
-    return (
-      hex"0f", // 01111
-      _EIP712Name(),
-      _EIP712Version(),
-      block.chainid,
-      address(this),
-      bytes32(0),
-      new uint256[](0)
-    );
-  }
-
-  /**
-   * @dev The name parameter for the EIP712 domain.
-   *
-   * NOTE: By default this function reads _name which is an immutable value.
-   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
-   *
-   * _Available since v5.0._
-   */
-  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout
-  // solhint-disable-next-line func-name-mixedcase
-  function _EIP712Name() internal view returns (string memory) {
-    return _name.toString(); // _name.toStringWithFallback(_nameFallback);
-  }
-
-  /**
-   * @dev The version parameter for the EIP712 domain.
-   *
-   * NOTE: By default this function reads _version which is an immutable value.
-   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
-   *
-   * _Available since v5.0._
-   */
-  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout
-  // solhint-disable-next-line func-name-mixedcase
-  function _EIP712Version() internal view returns (string memory) {
-    return _version.toString();
-  }
-}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/EIP712Base.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/EIP712Base.sol
index f5ea520..be5c539 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/EIP712Base.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/EIP712Base.sol
@@ -1,28 +1,27 @@
-// SPDX-License-Identifier: BUSL-1.1
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {ECDSA} from "openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol";
-import {EIP712} from "aave-token-v3/utils/EIP712.sol";
-
 /**
  * @title EIP712Base
  * @author Aave
  * @notice Base contract implementation of EIP712.
  */
-abstract contract EIP712Base is EIP712 {
+abstract contract EIP712Base {
+  bytes public constant EIP712_REVISION = bytes("1");
+  bytes32 internal constant EIP712_DOMAIN =
+    keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
+
   // Map of address nonces (address => nonce)
   mapping(address => uint256) internal _nonces;
 
-  bytes32 private _______DEPRECATED_DOMAIN_SEPARATOR;
+  bytes32 internal _domainSeparator;
+  uint256 internal immutable _chainId;
 
   /**
    * @dev Constructor.
    */
-  constructor() EIP712("Aave Ethereum AAVE", "2") {}
-
-  /// @dev maintained for backwards compatibility. See EIP712 _EIP712Version
-  function EIP712_REVISION() external returns (bytes memory) {
-    return bytes(_EIP712Version());
+  constructor() {
+    _chainId = block.chainid;
   }
 
   /**
@@ -31,7 +30,10 @@ abstract contract EIP712Base is EIP712 {
    * @return The domain separator of the token at current chain
    */
   function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
-    return _domainSeparatorV4();
+    if (block.chainid == _chainId) {
+      return _domainSeparator;
+    }
+    return _calculateDomainSeparator();
   }
 
   /**
@@ -43,6 +45,18 @@ abstract contract EIP712Base is EIP712 {
     return _nonces[owner];
   }
 
+  /**
+   * @notice Compute the current domain separator
+   * @return The domain separator for the token
+   */
+  function _calculateDomainSeparator() internal view returns (bytes32) {
+    return keccak256(
+      abi.encode(
+        EIP712_DOMAIN, keccak256(bytes(_EIP712BaseId())), keccak256(EIP712_REVISION), block.chainid, address(this)
+      )
+    );
+  }
+
   /**
    * @notice Returns the user readable name of signing domain (e.g. token name)
    * @return The name of the signing domain
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Errors.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Errors.sol
index 8ca61b2..6c493d8 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Errors.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Errors.sol
@@ -7,94 +7,93 @@ pragma solidity ^0.8.0;
  * @notice Defines the error messages emitted by the different contracts of the Aave protocol
  */
 library Errors {
-  string public constant CALLER_NOT_POOL_ADMIN = "1"; // 'The caller of the function is not a pool admin'
-  string public constant CALLER_NOT_EMERGENCY_ADMIN = "2"; // 'The caller of the function is not an emergency admin'
-  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = "3"; // 'The caller of the function is not a pool or emergency admin'
-  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = "4"; // 'The caller of the function is not a risk or pool admin'
-  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = "5"; // 'The caller of the function is not an asset listing or pool admin'
-  string public constant CALLER_NOT_BRIDGE = "6"; // 'The caller of the function is not a bridge'
-  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = "7"; // 'Pool addresses provider is not registered'
-  string public constant INVALID_ADDRESSES_PROVIDER_ID = "8"; // 'Invalid id for the pool addresses provider'
-  string public constant NOT_CONTRACT = "9"; // 'Address is not a contract'
-  string public constant CALLER_NOT_POOL_CONFIGURATOR = "10"; // 'The caller of the function is not the pool configurator'
-  string public constant CALLER_NOT_ATOKEN = "11"; // 'The caller of the function is not an AToken'
-  string public constant INVALID_ADDRESSES_PROVIDER = "12"; // 'The address of the pool addresses provider is invalid'
-  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = "13"; // 'Invalid return value of the flashloan executor function'
-  string public constant RESERVE_ALREADY_ADDED = "14"; // 'Reserve has already been added to reserve list'
-  string public constant NO_MORE_RESERVES_ALLOWED = "15"; // 'Maximum amount of reserves in the pool reached'
-  string public constant EMODE_CATEGORY_RESERVED = "16"; // 'Zero eMode category is reserved for volatile heterogeneous assets'
-  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = "17"; // 'Invalid eMode category assignment to asset'
-  string public constant RESERVE_LIQUIDITY_NOT_ZERO = "18"; // 'The liquidity of the reserve needs to be 0'
-  string public constant FLASHLOAN_PREMIUM_INVALID = "19"; // 'Invalid flashloan premium'
-  string public constant INVALID_RESERVE_PARAMS = "20"; // 'Invalid risk parameters for the reserve'
-  string public constant INVALID_EMODE_CATEGORY_PARAMS = "21"; // 'Invalid risk parameters for the eMode category'
-  string public constant BRIDGE_PROTOCOL_FEE_INVALID = "22"; // 'Invalid bridge protocol fee'
-  string public constant CALLER_MUST_BE_POOL = "23"; // 'The caller of this function must be a pool'
-  string public constant INVALID_MINT_AMOUNT = "24"; // 'Invalid amount to mint'
-  string public constant INVALID_BURN_AMOUNT = "25"; // 'Invalid amount to burn'
-  string public constant INVALID_AMOUNT = "26"; // 'Amount must be greater than 0'
-  string public constant RESERVE_INACTIVE = "27"; // 'Action requires an active reserve'
-  string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
-  string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
-  string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-  string public constant STABLE_BORROWING_NOT_ENABLED = "31"; // 'Stable borrowing is not enabled'
-  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
-  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
-  string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
-  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = "35"; // 'Health factor is lesser than the liquidation threshold'
-  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
-  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = "38"; // 'The requested amount is greater than the max loan size in stable rate mode'
-  string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
-  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-  string public constant NO_OUTSTANDING_STABLE_DEBT = "41"; // 'User does not have outstanding stable rate debt on this reserve'
-  string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
-  string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
-  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
-  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = "45"; // 'Health factor is not below the threshold'
-  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = "46"; // 'The collateral chosen cannot be liquidated'
-  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = "47"; // 'User did not borrow the specified currency'
-  string public constant INCONSISTENT_FLASHLOAN_PARAMS = "49"; // 'Inconsistent flashloan parameters'
-  string public constant BORROW_CAP_EXCEEDED = "50"; // 'Borrow cap is exceeded'
-  string public constant SUPPLY_CAP_EXCEEDED = "51"; // 'Supply cap is exceeded'
-  string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
-  string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
-  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-  string public constant STABLE_DEBT_NOT_ZERO = "55"; // 'Stable debt supply is not zero'
-  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
-  string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
-  string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
-  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = "59"; // 'Price oracle sentinel validation failed'
-  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = "60"; // 'Asset is not borrowable in isolation mode'
-  string public constant RESERVE_ALREADY_INITIALIZED = "61"; // 'Reserve has already been initialized'
-  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = "62"; // 'User is in isolation mode or ltv is zero'
-  string public constant INVALID_LTV = "63"; // 'Invalid ltv parameter for the reserve'
-  string public constant INVALID_LIQ_THRESHOLD = "64"; // 'Invalid liquidity threshold parameter for the reserve'
-  string public constant INVALID_LIQ_BONUS = "65"; // 'Invalid liquidity bonus parameter for the reserve'
-  string public constant INVALID_DECIMALS = "66"; // 'Invalid decimals parameter of the underlying asset of the reserve'
-  string public constant INVALID_RESERVE_FACTOR = "67"; // 'Invalid reserve factor parameter for the reserve'
-  string public constant INVALID_BORROW_CAP = "68"; // 'Invalid borrow cap for the reserve'
-  string public constant INVALID_SUPPLY_CAP = "69"; // 'Invalid supply cap for the reserve'
-  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = "70"; // 'Invalid liquidation protocol fee for the reserve'
-  string public constant INVALID_EMODE_CATEGORY = "71"; // 'Invalid eMode category for the reserve'
-  string public constant INVALID_UNBACKED_MINT_CAP = "72"; // 'Invalid unbacked mint cap for the reserve'
-  string public constant INVALID_DEBT_CEILING = "73"; // 'Invalid debt ceiling for the reserve
-  string public constant INVALID_RESERVE_INDEX = "74"; // 'Invalid reserve index'
-  string public constant ACL_ADMIN_CANNOT_BE_ZERO = "75"; // 'ACL admin cannot be set to the zero address'
-  string public constant INCONSISTENT_PARAMS_LENGTH = "76"; // 'Array parameters that should be equal length are not'
-  string public constant ZERO_ADDRESS_NOT_VALID = "77"; // 'Zero address not valid'
-  string public constant INVALID_EXPIRATION = "78"; // 'Invalid expiration'
-  string public constant INVALID_SIGNATURE = "79"; // 'Invalid signature'
-  string public constant OPERATION_NOT_SUPPORTED = "80"; // 'Operation not supported'
-  string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
-  string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
-  string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = "84"; // 'Invalid optimal stable to total debt ratio'
-  string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
-  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
-  string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-  string public constant STABLE_BORROWING_ENABLED = "88"; // 'Stable borrowing is enabled'
-  string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
-  string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
-  string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
+  error CallerNotPoolAdmin(); // 'The caller of the function is not a pool admin'
+  error CallerNotPoolOrEmergencyAdmin(); // 'The caller of the function is not a pool or emergency admin'
+  error CallerNotRiskOrPoolAdmin(); // 'The caller of the function is not a risk or pool admin'
+  error CallerNotAssetListingOrPoolAdmin(); // 'The caller of the function is not an asset listing or pool admin'
+  error AddressesProviderNotRegistered(); // 'Pool addresses provider is not registered'
+  error InvalidAddressesProviderId(); // 'Invalid id for the pool addresses provider'
+  error NotContract(); // 'Address is not a contract'
+  error CallerNotPoolConfigurator(); // 'The caller of the function is not the pool configurator'
+  error CallerNotAToken(); // 'The caller of the function is not an AToken'
+  error InvalidAddressesProvider(); // 'The address of the pool addresses provider is invalid'
+  error InvalidFlashloanExecutorReturn(); // 'Invalid return value of the flashloan executor function'
+  error ReserveAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error NoMoreReservesAllowed(); // 'Maximum amount of reserves in the pool reached'
+  error EModeCategoryReserved(); // 'Zero eMode category is reserved for volatile heterogeneous assets'
+  error ReserveLiquidityNotZero(); // 'The liquidity of the reserve needs to be 0'
+  error FlashloanPremiumInvalid(); // 'Invalid flashloan premium'
+  error InvalidReserveParams(); // 'Invalid risk parameters for the reserve'
+  error InvalidEmodeCategoryParams(); // 'Invalid risk parameters for the eMode category'
+  error CallerMustBePool(); // 'The caller of this function must be a pool'
+  error InvalidMintAmount(); // 'Invalid amount to mint'
+  error InvalidBurnAmount(); // 'Invalid amount to burn'
+  error InvalidAmount(); // 'Amount must be greater than 0'
+  error ReserveInactive(); // 'Action requires an active reserve'
+  error ReserveFrozen(); // 'Action cannot be performed because the reserve is frozen'
+  error ReservePaused(); // 'Action cannot be performed because the reserve is paused'
+  error BorrowingNotEnabled(); // 'Borrowing is not enabled'
+  error NotEnoughAvailableUserBalance(); // 'User cannot withdraw more than the available balance'
+  error InvalidInterestRateModeSelected(); // 'Invalid interest rate mode selected'
+  error CollateralBalanceIsZero(); // 'The collateral balance is 0'
+  error HealthFactorLowerThanLiquidationThreshold(); // 'Health factor is below the liquidation threshold'
+  error CollateralCannotCoverNewBorrow(); // 'There is not enough collateral to cover a new borrow'
+  error NoDebtOfSelectedType(); // 'For repayment of a specific type of debt, the user needs to have debt that type'
+  error NoExplicitAmountToRepayOnBehalf(); // 'To repay on behalf of a user an explicit amount to repay is needed'
+  error UnderlyingBalanceZero(); // 'The underlying balance needs to be greater than 0'
+  error HealthFactorNotBelowThreshold(); // 'Health factor is not below the threshold'
+  error CollateralCannotBeLiquidated(); // 'The collateral chosen cannot be liquidated'
+  error SpecifiedCurrencyNotBorrowedByUser(); // 'User did not borrow the specified currency'
+  error InconsistentFlashloanParams(); // 'Inconsistent flashloan parameters'
+  error BorrowCapExceeded(); // 'Borrow cap is exceeded'
+  error SupplyCapExceeded(); // 'Supply cap is exceeded'
+  error DebtCeilingExceeded(); // 'Debt ceiling is exceeded'
+  error UnderlyingClaimableRightsNotZero(); // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
+  error VariableDebtSupplyNotZero(); // 'Variable debt supply is not zero'
+  error LtvValidationFailed(); // 'Ltv validation failed'
+  error InconsistentEModeCategory(); // 'Inconsistent eMode category'
+  error PriceOracleSentinelCheckFailed(); // 'Price oracle sentinel validation failed'
+  error AssetNotBorrowableInIsolation(); // 'Asset is not borrowable in isolation mode'
+  error ReserveAlreadyInitialized(); // 'Reserve has already been initialized'
+  error UserInIsolationModeOrLtvZero(); // 'User is in isolation mode or ltv is zero'
+  error InvalidLtv(); // 'Invalid ltv parameter for the reserve'
+  error InvalidLiquidationThreshold(); // 'Invalid liquidity threshold parameter for the reserve'
+  error InvalidLiquidationBonus(); // 'Invalid liquidity bonus parameter for the reserve'
+  error InvalidDecimals(); // 'Invalid decimals parameter of the underlying asset of the reserve'
+  error InvalidReserveFactor(); // 'Invalid reserve factor parameter for the reserve'
+  error InvalidBorrowCap(); // 'Invalid borrow cap for the reserve'
+  error InvalidSupplyCap(); // 'Invalid supply cap for the reserve'
+  error InvalidLiquidationProtocolFee(); // 'Invalid liquidation protocol fee for the reserve'
+  error InvalidDebtCeiling(); // 'Invalid debt ceiling for the reserve'
+  error InvalidReserveIndex(); // 'Invalid reserve index'
+  error AclAdminCannotBeZero(); // 'ACL admin cannot be set to the zero address'
+  error InconsistentParamsLength(); // 'Array parameters that should be equal length are not'
+  error ZeroAddressNotValid(); // 'Zero address not valid'
+  error InvalidExpiration(); // 'Invalid expiration'
+  error InvalidSignature(); // 'Invalid signature'
+  error OperationNotSupported(); // 'Operation not supported'
+  error DebtCeilingNotZero(); // 'Debt ceiling is not zero'
+  error AssetNotListed(); // 'Asset is not listed'
+  error InvalidOptimalUsageRatio(); // 'Invalid optimal usage ratio'
+  error UnderlyingCannotBeRescued(); // 'The underlying asset cannot be rescued'
+  error AddressesProviderAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error PoolAddressesDoNotMatch(); // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
+  error SiloedBorrowingViolation(); // 'User is trying to borrow multiple assets including a siloed one'
+  error ReserveDebtNotZero(); // the total debt of the reserve needs to be 0
+  error FlashloanDisabled(); // FlashLoaning for this asset is disabled
+  error InvalidMaxRate(); // The expect maximum borrow rate is invalid
+  error WithdrawToAToken(); // Withdrawing to the aToken is not allowed
+  error SupplyToAToken(); // Supplying to the aToken is not allowed
+  error Slope2MustBeGteSlope1(); // Variable interest rate slope 2 can not be lower than slope 1
+  error CallerNotRiskOrPoolOrEmergencyAdmin(); // 'The caller of the function is not a risk, pool or emergency admin'
+  error LiquidationGraceSentinelCheckFailed(); // 'Liquidation grace sentinel validation failed'
+  error InvalidGracePeriod(); // Grace period above a valid range
+  error InvalidFreezeState(); // Reserve is already in the passed freeze state
+  error NotBorrowableInEMode(); // Asset not borrowable in eMode
+  error CallerNotUmbrella(); // The caller of the function is not the umbrella contract
+  error ReserveNotInDeficit(); // The reserve is not in deficit
+  error MustNotLeaveDust(); // Below a certain threshold liquidators need to take the full position
+  error UserCannotHaveDebt(); // Thrown when a user tries to interact with a method that requires a position without debt
+  error SelfLiquidation(); // Thrown when a user tries to liquidate themselves
+  error CallerNotPositionManager(); // Thrown when the caller has not been enabled as a position manager of the on-behalf-of user
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IAToken.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IAToken.sol
index ee00eb8..e42351f 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IAToken.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IAToken.sol
@@ -1,8 +1,8 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IERC20} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {IScaledBalanceToken} from "aave-v3-core/contracts/interfaces/IScaledBalanceToken.sol";
+import {IERC20} from "../dependencies/openzeppelin/contracts/IERC20.sol";
+import {IScaledBalanceToken} from "./IScaledBalanceToken.sol";
 import {IInitializableAToken} from "./IInitializableAToken.sol";
 
 /**
@@ -53,8 +53,9 @@ interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {
    * @param from The address getting liquidated, current owner of the aTokens
    * @param to The recipient
    * @param value The amount of tokens getting transferred
+   * @param index The next liquidity index of the reserve
    */
-  function transferOnLiquidation(address from, address to, uint256 value) external;
+  function transferOnLiquidation(address from, address to, uint256 value, uint256 index) external;
 
   /**
    * @notice Transfers the underlying asset to `target`.
@@ -64,17 +65,6 @@ interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {
    */
   function transferUnderlyingTo(address target, uint256 amount) external;
 
-  /**
-   * @notice Handles the underlying received by the aToken after the transfer has been completed.
-   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the
-   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying
-   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.
-   * @param user The user executing the repayment
-   * @param onBehalfOf The address of the user who will get his debt reduced/removed
-   * @param amount The amount getting repaid
-   */
-  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;
-
   /**
    * @notice Allow passing a signed message to approve spending
    * @dev implements the permit function as for
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IGovernancePowerDelegationToken.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IBaseDelegation.sol
similarity index 98%
rename from /tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IGovernancePowerDelegationToken.sol
rename to /tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IBaseDelegation.sol
index 051347a..0f0bc78 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IGovernancePowerDelegationToken.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IBaseDelegation.sol
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-interface IGovernancePowerDelegationToken {
+interface IBaseDelegation {
   enum GovernancePowerType {
     VOTING,
     PROPOSITION
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IERC5267.sol b/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IERC5267.sol
deleted file mode 100644
index ecc4684..0000000
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IERC5267.sol
+++ /dev/null
@@ -1,28 +0,0 @@
-// SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)
-
-pragma solidity ^0.8.19;
-
-interface IERC5267 {
-  /**
-   * @dev MAY be emitted to signal that the domain could have changed.
-   */
-  event EIP712DomainChanged();
-
-  /**
-   * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
-   * signature.
-   */
-  function eip712Domain()
-    external
-    view
-    returns (
-      bytes1 fields,
-      string memory name,
-      string memory version,
-      uint256 chainId,
-      address verifyingContract,
-      bytes32 salt,
-      uint256[] memory extensions
-    );
-}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IInitializableAToken.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IInitializableAToken.sol
index 46cf60b..6773248 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IInitializableAToken.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IInitializableAToken.sol
@@ -1,8 +1,8 @@
-// SPDX-License-Identifier: AGPL-3.0
+// SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IAaveIncentivesController} from "aave-v3-core/contracts/interfaces/IAaveIncentivesController.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
+import {IAaveIncentivesController} from "./IAaveIncentivesController.sol";
+import {IPool} from "./IPool.sol";
 
 /**
  * @title IInitializableAToken
@@ -35,9 +35,7 @@ interface IInitializableAToken {
   /**
    * @notice Initializes the aToken
    * @param pool The pool contract that is initializing this contract
-   * @param treasury The address of the Aave treasury, receiving the fees on this aToken
    * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
    * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's
    * @param aTokenName The name of the aToken
    * @param aTokenSymbol The symbol of the aToken
@@ -45,9 +43,7 @@ interface IInitializableAToken {
    */
   function initialize(
     IPool pool,
-    address treasury,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 aTokenDecimals,
     string calldata aTokenName,
     string calldata aTokenSymbol,
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IPool.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IPool.sol
index bdcd836..38aad59 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IPool.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IPool.sol
@@ -10,27 +10,6 @@ import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
  * @notice Defines the basic interface for an Aave Pool.
  */
 interface IPool {
-  /**
-   * @dev Emitted on mintUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address initiating the supply
-   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens
-   * @param amount The amount of supplied assets
-   * @param referralCode The referral code used
-   */
-  event MintUnbacked(
-    address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode
-  );
-
-  /**
-   * @dev Emitted on backUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param backer The address paying for the backing
-   * @param amount The amount added as backing
-   * @param fee The amount paid in fees
-   */
-  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);
-
   /**
    * @dev Emitted on supply()
    * @param reserve The address of the underlying asset of the reserve
@@ -59,7 +38,7 @@ interface IPool {
    * initiator of the transaction on flashLoan()
    * @param onBehalfOf The address that will be getting the debt
    * @param amount The amount borrowed out
-   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable
+   * @param interestRateMode The rate mode: 2 for Variable, 1 is deprecated (changed on v3.2.0)
    * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray
    * @param referralCode The referral code used
    */
@@ -83,14 +62,6 @@ interface IPool {
    */
   event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount, bool useATokens);
 
-  /**
-   * @dev Emitted on swapBorrowRateMode()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user swapping his rate mode
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  event SwapBorrowRateMode(address indexed reserve, address indexed user, DataTypes.InterestRateMode interestRateMode);
-
   /**
    * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets
    * @param asset The address of the underlying asset of the reserve
@@ -119,20 +90,14 @@ interface IPool {
    */
   event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);
 
-  /**
-   * @dev Emitted on rebalanceStableBorrowRate()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address of the user for which the rebalance has been executed
-   */
-  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);
-
   /**
    * @dev Emitted on flashLoan()
    * @param target The address of the flash loan receiver contract
    * @param initiator The address initiating the flash loan
    * @param asset The address of the asset being flash borrowed
    * @param amount The amount flash borrowed
-   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt
+   * @param interestRateMode The flashloan mode: 0 for regular flashloan,
+   *        1 for Stable (Deprecated on v3.2.0), 2 for Variable
    * @param premium The fee flash borrowed
    * @param referralCode The referral code used
    */
@@ -171,7 +136,7 @@ interface IPool {
    * @dev Emitted when the state of a reserve is updated.
    * @param reserve The address of the underlying asset of the reserve
    * @param liquidityRate The next liquidity rate
-   * @param stableBorrowRate The next stable borrow rate
+   * @param stableBorrowRate The next stable borrow rate @note deprecated on v3.2.0
    * @param variableBorrowRate The next variable borrow rate
    * @param liquidityIndex The next liquidity index
    * @param variableBorrowIndex The next variable borrow index
@@ -185,6 +150,14 @@ interface IPool {
     uint256 variableBorrowIndex
   );
 
+  /**
+   * @dev Emitted when the deficit of a reserve is covered.
+   * @param reserve The address of the underlying asset of the reserve
+   * @param caller The caller that triggered the DeficitCovered event
+   * @param amountCovered The amount of deficit covered
+   */
+  event DeficitCovered(address indexed reserve, address caller, uint256 amountCovered);
+
   /**
    * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.
    * @param reserve The address of the reserve
@@ -193,23 +166,26 @@ interface IPool {
   event MintedToTreasury(address indexed reserve, uint256 amountMinted);
 
   /**
-   * @notice Mints an `amount` of aTokens to the `onBehalfOf`
-   * @param asset The address of the underlying asset to mint
-   * @param amount The amount to mint
-   * @param onBehalfOf The address that will receive the aTokens
-   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
-   *   0 if the action is executed directly by the user, without any middle-man
+   * @dev Emitted when deficit is realized on a liquidation.
+   * @param user The user address where the bad debt will be burned
+   * @param debtAsset The address of the underlying borrowed asset to be burned
+   * @param amountCreated The amount of deficit created
+   */
+  event DeficitCreated(address indexed user, address indexed debtAsset, uint256 amountCreated);
+
+  /**
+   * @dev Emitted when a position manager is approved by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+  event PositionManagerApproved(address indexed user, address indexed positionManager);
 
   /**
-   * @notice Back the current unbacked underlying with `amount` and pay `fee`.
-   * @param asset The address of the underlying asset to back
-   * @param amount The amount to back
-   * @param fee The amount paid in fees
-   * @return The backed amount
+   * @dev Emitted when a position manager is revoked by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);
+  event PositionManagerRevoked(address indexed user, address indexed positionManager);
 
   /**
    * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
@@ -265,13 +241,12 @@ interface IPool {
 
   /**
    * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower
-   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the
-   * corresponding debt token (StableDebtToken or VariableDebtToken)
+   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the VariableDebtToken
    * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet
-   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`
+   *   and 100 variable debt tokens
    * @param asset The address of the underlying asset to borrow
    * @param amount The amount to be borrowed
-   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
    * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself
@@ -283,11 +258,11 @@ interface IPool {
 
   /**
    * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned
-   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address
+   * - E.g. User repays 100 USDC, burning 100 variable debt tokens of the `onBehalfOf` address
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -303,7 +278,7 @@ interface IPool {
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode 2 for Variable, 1 is deprecated on v3.2.0
    * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the
    * user calling the function if he wants to reduce/remove his own debt, or the address of any other
    * other borrower whose debt should be removed
@@ -327,35 +302,17 @@ interface IPool {
   /**
    * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the
    * equivalent debt tokens
-   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens
+   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable debt tokens
    * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken
    * balance is not enough to cover the whole debt
    * @param asset The address of the borrowed underlying asset previously borrowed
    * @param amount The amount to repay
    * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`
-   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable
+   * @param interestRateMode DEPRECATED in v3.2.0
    * @return The final amount repaid
    */
   function repayWithATokens(address asset, uint256 amount, uint256 interestRateMode) external returns (uint256);
 
-  /**
-   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa
-   * @param asset The address of the underlying asset borrowed
-   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable
-   */
-  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;
-
-  /**
-   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.
-   * - Users can be rebalanced if the following conditions are satisfied:
-   *     1. Usage ratio is above 95%
-   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too
-   *        much has been borrowed at a stable rate and suppliers are not earning enough
-   * @param asset The address of the underlying asset borrowed
-   * @param user The address of the user to be rebalanced
-   */
-  function rebalanceStableBorrowRate(address asset, address user) external;
-
   /**
    * @notice Allows suppliers to enable/disable a specific supplied asset as collateral
    * @param asset The address of the underlying asset supplied
@@ -369,7 +326,7 @@ interface IPool {
    *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
-   * @param user The address of the borrower getting liquidated
+   * @param borrower The address of the borrower getting liquidated
    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
    * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
    * to receive the underlying collateral asset directly
@@ -377,7 +334,7 @@ interface IPool {
   function liquidationCall(
     address collateralAsset,
     address debtAsset,
-    address user,
+    address borrower,
     uint256 debtToCover,
     bool receiveAToken
   ) external;
@@ -392,9 +349,9 @@ interface IPool {
    * @param amounts The amounts of the assets being flash-borrowed
    * @param interestRateModes Types of the debt to open if the flash loan is not returned:
    *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver
-   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
+   *   1 -> Deprecated on v3.2.0
    *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address
-   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2
+   * @param onBehalfOf The address  that will receive the debt in the case of using 2 on `modes`
    * @param params Variadic packed params to pass to the receiver as extra information
    * @param referralCode The code used to register the integrator originating the operation, for potential rewards.
    *   0 if the action is executed directly by the user, without any middle-man
@@ -452,37 +409,37 @@ interface IPool {
     );
 
   /**
-   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an
-   * interest rate strategy
+   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens
    * @dev Only callable by the PoolConfigurator contract
    * @param asset The address of the underlying asset of the reserve
    * @param aTokenAddress The address of the aToken that will be assigned to the reserve
-   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve
    * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
-   * @param interestRateStrategyAddress The address of the interest rate strategy contract
    */
-  function initReserve(
-    address asset,
-    address aTokenAddress,
-    address stableDebtAddress,
-    address variableDebtAddress,
-    address interestRateStrategyAddress
-  ) external;
+  function initReserve(address asset, address aTokenAddress, address variableDebtAddress) external;
 
   /**
    * @notice Drop a reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev Does not reset eMode flags, which must be considered when reusing the same reserve id for a different reserve.
    * @param asset The address of the underlying asset of the reserve
    */
   function dropReserve(address asset) external;
 
   /**
-   * @notice Updates the address of the interest rate strategy contract
+   * @notice Accumulates interest to all indexes of the reserve
    * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
    * @param asset The address of the underlying asset of the reserve
-   * @param rateStrategyAddress The address of the interest rate strategy contract
    */
-  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;
+  function syncIndexesState(address asset) external;
+
+  /**
+   * @notice Updates interest rates on the reserve data
+   * @dev Only callable by the PoolConfigurator contract
+   * @dev To be used when required by the configurator, for example when updating interest rates strategy data
+   * @param asset The address of the underlying asset of the reserve
+   */
+  function syncRatesState(address asset) external;
 
   /**
    * @notice Sets the configuration bitmap of the reserve as a whole
@@ -532,7 +489,14 @@ interface IPool {
    * @param asset The address of the underlying asset of the reserve
    * @return The state and configuration data of the reserve
    */
-  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);
+  function getReserveData(address asset) external view returns (DataTypes.ReserveDataLegacy memory);
+
+  /**
+   * @notice Returns the virtual underlying balance of the reserve
+   * @param asset The address of the underlying asset of the reserve
+   * @return The reserve virtual underlying balance
+   */
+  function getVirtualUnderlyingBalance(address asset) external view returns (uint128);
 
   /**
    * @notice Validates and finalizes an aToken transfer
@@ -560,6 +524,13 @@ interface IPool {
    */
   function getReservesList() external view returns (address[] memory);
 
+  /**
+   * @notice Returns the number of initialized reserves
+   * @dev It includes dropped reserves
+   * @return The count
+   */
+  function getReservesCount() external view returns (uint256);
+
   /**
    * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct
    * @param id The id of the reserve as stored in the DataTypes.ReserveData struct
@@ -574,38 +545,77 @@ interface IPool {
   function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
 
   /**
-   * @notice Updates the protocol fee on the bridging
-   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury
+   * @notice Returns the ReserveInterestRateStrategy connected to all the reserves
+   * @return The address of the ReserveInterestRateStrategy contract
    */
-  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;
+  function RESERVE_INTEREST_RATE_STRATEGY() external view returns (address);
 
   /**
-   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:
-   * - A part is sent to aToken holders as extra, one time accumulated interest
-   * - A part is collected by the protocol treasury
-   * @dev The total premium is calculated on the total borrowed amount
-   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`
+   * @notice Updates flash loan premium. All this premium is collected by the protocol treasury.
+   * @dev The premium is calculated on the total borrowed amount
    * @dev Only callable by the PoolConfigurator contract
-   * @param flashLoanPremiumTotal The total premium, expressed in bps
-   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps
+   * @param flashLoanPremium The flash loan premium, expressed in bps
    */
-  function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;
+  function updateFlashloanPremium(uint128 flashLoanPremium) external;
 
   /**
-   * @notice Configures a new category for the eMode.
+   * @notice Configures a new or alters an existing collateral configuration of an eMode.
    * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.
    * The category 0 is reserved as it's the default for volatile assets
    * @param id The id of the category
    * @param config The configuration of the category
    */
-  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;
+  function configureEModeCategory(uint8 id, DataTypes.EModeCategoryBaseConfiguration memory config) external;
+
+  /**
+   * @notice Replaces the current eMode collateralBitmap.
+   * @param id The id of the category
+   * @param collateralBitmap The collateralBitmap of the category
+   */
+  function configureEModeCategoryCollateralBitmap(uint8 id, uint128 collateralBitmap) external;
+
+  /**
+   * @notice Replaces the current eMode borrowableBitmap.
+   * @param id The id of the category
+   * @param borrowableBitmap The borrowableBitmap of the category
+   */
+  function configureEModeCategoryBorrowableBitmap(uint8 id, uint128 borrowableBitmap) external;
 
   /**
    * @notice Returns the data of an eMode category
+   * @dev DEPRECATED use independent getters instead
    * @param id The id of the category
    * @return The configuration data of the category
    */
-  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);
+  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategoryLegacy memory);
+
+  /**
+   * @notice Returns the label of an eMode category
+   * @param id The id of the category
+   * @return The label of the category
+   */
+  function getEModeCategoryLabel(uint8 id) external view returns (string memory);
+
+  /**
+   * @notice Returns the collateral config of an eMode category
+   * @param id The id of the category
+   * @return The ltv,lt,lb of the category
+   */
+  function getEModeCategoryCollateralConfig(uint8 id) external view returns (DataTypes.CollateralConfig memory);
+
+  /**
+   * @notice Returns the collateralBitmap of an eMode category
+   * @param id The id of the category
+   * @return The collateralBitmap of the category
+   */
+  function getEModeCategoryCollateralBitmap(uint8 id) external view returns (uint128);
+
+  /**
+   * @notice Returns the borrowableBitmap of an eMode category
+   * @param id The id of the category
+   * @return The borrowableBitmap of the category
+   */
+  function getEModeCategoryBorrowableBitmap(uint8 id) external view returns (uint128);
 
   /**
    * @notice Allows a user to use the protocol in eMode
@@ -628,25 +638,34 @@ interface IPool {
   function resetIsolationModeTotalDebt(address asset) external;
 
   /**
-   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate
-   * @return The percentage of available liquidity to borrow, expressed in bps
+   * @notice Sets the liquidation grace period of the given asset
+   * @dev To enable a liquidation grace period, a timestamp in the future should be set,
+   *      To disable a liquidation grace period, any timestamp in the past works, like 0
+   * @param asset The address of the underlying asset to set the liquidationGracePeriod
+   * @param until Timestamp when the liquidation grace period will end
+   *
    */
-  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);
+  function setLiquidationGracePeriod(address asset, uint40 until) external;
 
   /**
-   * @notice Returns the total fee on flash loans
-   * @return The total fee on flashloans
+   * @notice Returns the liquidation grace period of the given asset
+   * @param asset The address of the underlying asset
+   * @return Timestamp when the liquidation grace period will end
+   *
    */
-  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
+  function getLiquidationGracePeriod(address asset) external view returns (uint40);
 
   /**
-   * @notice Returns the part of the bridge fees sent to protocol
-   * @return The bridge fee sent to the protocol treasury
+   * @notice Returns the total fee on flash loans.
+   * @dev From v3.4 all flashloan fees will be send to the treasury.
+   * @return The total fee on flashloans
    */
-  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);
+  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
 
   /**
    * @notice Returns the part of the flashloan fees sent to protocol
+   * @dev From v3.4 all flashloan fees will be send to the treasury and this value
+   *      is always 100_00.
    * @return The flashloan fee sent to the protocol treasury
    */
   function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);
@@ -684,4 +703,101 @@ interface IPool {
    *   0 if the action is executed directly by the user, without any middle-man
    */
   function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+
+  /**
+   * @notice It covers the deficit of a specified reserve by burning the equivalent aToken `amount` for assets
+   * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
+   * @param asset The address of the underlying asset to cover the deficit.
+   * @param amount The amount to be covered, in aToken
+   */
+  function eliminateReserveDeficit(address asset, uint256 amount) external;
+
+  /**
+   * @notice Approves or disapproves a position manager. This position manager will be able
+   * to call the `setUserUseReserveAsCollateralOnBehalfOf` and the
+   * `setUserEModeOnBehalfOf` function on behalf of the user.
+   * @param positionManager The address of the position manager
+   * @param approve True if the position manager should be approved, false otherwise
+   */
+  function approvePositionManager(address positionManager, bool approve) external;
+
+  /**
+   * @notice Renounces a position manager role for a given user.
+   * @param user The address of the user
+   */
+  function renouncePositionManagerRole(address user) external;
+
+  /**
+   * @notice Sets the use as collateral flag for the user on the specific reserve on behalf of the user.
+   * @param asset The address of the underlying asset of the reserve
+   * @param useAsCollateral True if the user wants to use the reserve as collateral, false otherwise
+   * @param onBehalfOf The address of the user
+   */
+  function setUserUseReserveAsCollateralOnBehalfOf(address asset, bool useAsCollateral, address onBehalfOf) external;
+
+  /**
+   * @notice Sets the eMode category for the user on the specific reserve on behalf of the user.
+   * @param categoryId The id of the category
+   * @param onBehalfOf The address of the user
+   */
+  function setUserEModeOnBehalfOf(uint8 categoryId, address onBehalfOf) external;
+
+  /*
+   * @notice Returns true if the `positionManager` address is approved to use the position manager role on behalf of the user.
+   * @param user The address of the user
+   * @param positionManager The address of the position manager
+   * @return True if the user is approved to use the position manager, false otherwise
+   */
+  function isApprovedPositionManager(address user, address positionManager) external view returns (bool);
+
+  /**
+   * @notice Returns the current deficit of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The current deficit of the reserve
+   */
+  function getReserveDeficit(address asset) external view returns (uint256);
+
+  /**
+   * @notice Returns the aToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the aToken
+   */
+  function getReserveAToken(address asset) external view returns (address);
+
+  /**
+   * @notice Returns the variableDebtToken address of a reserve.
+   * @param asset The address of the underlying asset of the reserve
+   * @return The address of the variableDebtToken
+   */
+  function getReserveVariableDebtToken(address asset) external view returns (address);
+
+  /**
+   * @notice Gets the address of the external FlashLoanLogic
+   */
+  function getFlashLoanLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external BorrowLogic
+   */
+  function getBorrowLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external EModeLogic
+   */
+  function getEModeLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external LiquidationLogic
+   */
+  function getLiquidationLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external PoolLogic
+   */
+  function getPoolLogic() external view returns (address);
+
+  /**
+   * @notice Gets the address of the external SupplyLogic
+   */
+  function getSupplyLogic() external view returns (address);
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IncentivizedERC20.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IncentivizedERC20.sol
index 4cd119c..4e18e31 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/IncentivizedERC20.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/IncentivizedERC20.sol
@@ -1,17 +1,17 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {Context} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/Context.sol";
-import {IERC20} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol";
-import {IERC20Detailed} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol";
-import {SafeCast} from "./dependencies/SafeCast.sol";
-import {WadRayMath} from "aave-v3-core/contracts/protocol/libraries/math/WadRayMath.sol";
-import {Errors} from "aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol";
-import {IAaveIncentivesController} from "aave-v3-core/contracts/interfaces/IAaveIncentivesController.sol";
-import {IPoolAddressesProvider} from "aave-v3-core/contracts/interfaces/IPoolAddressesProvider.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {IACLManager} from "aave-v3-core/contracts/interfaces/IACLManager.sol";
-import {DelegationMode} from "aave-token-v3/DelegationAwareBalance.sol";
+import {Context} from "../../../dependencies/openzeppelin/contracts/Context.sol";
+import {IERC20} from "../../../dependencies/openzeppelin/contracts/IERC20.sol";
+import {IERC20Detailed} from "../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
+import {IPoolAddressesProvider} from "../../../interfaces/IPoolAddressesProvider.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
+import {IACLManager} from "../../../interfaces/IACLManager.sol";
+import {DelegationMode} from "./DelegationMode.sol";
 
 /**
  * @title IncentivizedERC20
@@ -27,7 +27,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    */
   modifier onlyPoolAdmin() {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
-    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
+    require(aclManager.isPoolAdmin(_msgSender()), Errors.CallerNotPoolAdmin());
     _;
   }
 
@@ -35,16 +35,14 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @dev Only pool can call functions marked by this modifier.
    */
   modifier onlyPool() {
-    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);
+    require(_msgSender() == address(POOL), Errors.CallerMustBePool());
     _;
   }
 
   /**
    * @dev UserState - additionalData is a flexible field.
    * ATokens and VariableDebtTokens use this field store the index of the
-   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use
-   * this field to store the user's stable rate.
-   * delegationMode stores the current delegation of the user
+   * user's last supply/withdrawal/borrow/repayment.
    */
   struct UserState {
     uint120 balance;
@@ -62,23 +60,31 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
   string private _name;
   string private _symbol;
   uint8 private _decimals;
-  IAaveIncentivesController internal _incentivesController;
+  // @dev deprecated on v3.4.0, replaced with immutable REWARDS_CONTROLLER
+  IAaveIncentivesController internal __deprecated_incentivesController;
   IPoolAddressesProvider internal immutable _addressesProvider;
   IPool public immutable POOL;
+  /**
+   * @notice Returns the address of the Incentives Controller contract
+   * @return The address of the Incentives Controller
+   */
+  IAaveIncentivesController public immutable REWARDS_CONTROLLER;
 
   /**
    * @dev Constructor.
    * @param pool The reference to the main Pool contract
-   * @param name The name of the token
-   * @param symbol The symbol of the token
-   * @param decimals The number of decimals of the token
+   * @param name_ The name of the token
+   * @param symbol_ The symbol of the token
+   * @param decimals_ The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals) {
+  constructor(IPool pool, string memory name_, string memory symbol_, uint8 decimals_, address rewardsController) {
     _addressesProvider = pool.ADDRESSES_PROVIDER();
-    _name = name;
-    _symbol = symbol;
-    _decimals = decimals;
+    _name = name_;
+    _symbol = symbol_;
+    _decimals = decimals_;
     POOL = pool;
+    REWARDS_CONTROLLER = IAaveIncentivesController(rewardsController);
   }
 
   /// @inheritdoc IERC20Detailed
@@ -111,15 +117,7 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
    * @return The address of the Incentives Controller
    */
   function getIncentivesController() external view virtual returns (IAaveIncentivesController) {
-    return _incentivesController;
-  }
-
-  /**
-   * @notice Sets a new Incentives Controller
-   * @param controller the new Incentives controller
-   */
-  function setIncentivesController(IAaveIncentivesController controller) external onlyPoolAdmin {
-    _incentivesController = controller;
+    return REWARDS_CONTROLLER;
   }
 
   /// @inheritdoc IERC20
@@ -182,12 +180,11 @@ abstract contract IncentivizedERC20 is Context, IERC20Detailed {
     uint120 oldRecipientBalance = _userState[recipient].balance;
     _userState[recipient].balance = oldRecipientBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
+    if (address(REWARDS_CONTROLLER) != address(0)) {
       uint256 currentTotalSupply = _totalSupply;
-      incentivesControllerLocal.handleAction(sender, currentTotalSupply, oldSenderBalance);
+      REWARDS_CONTROLLER.handleAction(sender, currentTotalSupply, oldSenderBalance);
       if (sender != recipient) {
-        incentivesControllerLocal.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
+        REWARDS_CONTROLLER.handleAction(recipient, currentTotalSupply, oldRecipientBalance);
       }
     }
   }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Math.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Math.sol
index 103aaac..5fa8362 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Math.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Math.sol
@@ -1,30 +1,27 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)
 
-pragma solidity ^0.8.19;
+pragma solidity ^0.8.20;
+
+import {Panic} from "../Panic.sol";
+import {SafeCast} from "./SafeCast.sol";
 
 /**
  * @dev Standard math utilities missing in the Solidity language.
  */
 library Math {
-  /**
-   * @dev Muldiv operation overflow.
-   */
-  error MathOverflowedMulDiv();
-
   enum Rounding {
-    Down, // Toward negative infinity
-    Up, // Toward infinity
-    Zero // Toward zero
+    Floor, // Toward negative infinity
+    Ceil, // Toward positive infinity
+    Trunc, // Toward zero
+    Expand // Away from zero
 
   }
 
   /**
-   * @dev Returns the addition of two unsigned integers, with an overflow flag.
-   *
-   * _Available since v5.0._
+   * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).
    */
-  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
+  function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
     unchecked {
       uint256 c = a + b;
       if (c < a) return (false, 0);
@@ -33,11 +30,9 @@ library Math {
   }
 
   /**
-   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
-   *
-   * _Available since v5.0._
+   * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).
    */
-  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
+  function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
     unchecked {
       if (b > a) return (false, 0);
       return (true, a - b);
@@ -45,11 +40,9 @@ library Math {
   }
 
   /**
-   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
-   *
-   * _Available since v5.0._
+   * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).
    */
-  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
+  function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
     unchecked {
       // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
       // benefit is lost if 'b' is also tested.
@@ -62,11 +55,9 @@ library Math {
   }
 
   /**
-   * @dev Returns the division of two unsigned integers, with a division by zero flag.
-   *
-   * _Available since v5.0._
+   * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).
    */
-  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
+  function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
     unchecked {
       if (b == 0) return (false, 0);
       return (true, a / b);
@@ -74,29 +65,43 @@ library Math {
   }
 
   /**
-   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
-   *
-   * _Available since v5.0._
+   * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).
    */
-  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
+  function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
     unchecked {
       if (b == 0) return (false, 0);
       return (true, a % b);
     }
   }
 
+  /**
+   * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
+   *
+   * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
+   * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
+   * one branch when needed, making this function more expensive.
+   */
+  function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {
+    unchecked {
+      // branchless ternary works because:
+      // b ^ (a ^ b) == a
+      // b ^ 0 == b
+      return b ^ ((a ^ b) * SafeCast.toUint(condition));
+    }
+  }
+
   /**
    * @dev Returns the largest of two numbers.
    */
   function max(uint256 a, uint256 b) internal pure returns (uint256) {
-    return a > b ? a : b;
+    return ternary(a > b, a, b);
   }
 
   /**
    * @dev Returns the smallest of two numbers.
    */
   function min(uint256 a, uint256 b) internal pure returns (uint256) {
-    return a < b ? a : b;
+    return ternary(a < b, a, b);
   }
 
   /**
@@ -111,34 +116,41 @@ library Math {
   /**
    * @dev Returns the ceiling of the division of two numbers.
    *
-   * This differs from standard division with `/` in that it rounds up instead
-   * of rounding down.
+   * This differs from standard division with `/` in that it rounds towards infinity instead
+   * of rounding towards zero.
    */
   function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
     if (b == 0) {
       // Guarantee the same behavior as in a regular Solidity division.
-      return a / b;
+      Panic.panic(Panic.DIVISION_BY_ZERO);
     }
 
-    // (a + b - 1) / b can overflow on addition, so we distribute.
-    return a == 0 ? 0 : (a - 1) / b + 1;
+    // The following calculation ensures accurate ceiling division without overflow.
+    // Since a is non-zero, (a - 1) / b will not overflow.
+    // The largest possible result occurs when (a - 1) / b is type(uint256).max,
+    // but the largest value we can obtain is type(uint256).max - 1, which happens
+    // when a = type(uint256).max and b = 1.
+    unchecked {
+      return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);
+    }
   }
 
   /**
-   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
-   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
-   * with further edits by Uniswap Labs also under MIT license.
+   * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
+   * denominator == 0.
+   *
+   * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
+   * Uniswap Labs also under MIT license.
    */
   function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
     unchecked {
-      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
-      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
-      // variables such that product = prod1 * 2^256 + prod0.
-      uint256 prod0; // Least significant 256 bits of the product
+      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use
+      // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
+      // variables such that product = prod1 * 2²⁵⁶ + prod0.
+      uint256 prod0 = x * y; // Least significant 256 bits of the product
       uint256 prod1; // Most significant 256 bits of the product
       assembly {
         let mm := mulmod(x, y, not(0))
-        prod0 := mul(x, y)
         prod1 := sub(sub(mm, prod0), lt(mm, prod0))
       }
 
@@ -150,9 +162,9 @@ library Math {
         return prod0 / denominator;
       }
 
-      // Make sure the result is less than 2^256. Also prevents denominator == 0.
+      // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.
       if (denominator <= prod1) {
-        revert MathOverflowedMulDiv();
+        Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));
       }
 
       ///////////////////////////////////////////////
@@ -170,11 +182,10 @@ library Math {
         prod0 := sub(prod0, remainder)
       }
 
-      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
-      // See https://cs.stackexchange.com/q/138556/92363.
+      // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
+      // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.
 
-      // Does not overflow because the denominator cannot be zero at this stage in the function.
-      uint256 twos = denominator & (~denominator + 1);
+      uint256 twos = denominator & (0 - denominator);
       assembly {
         // Divide denominator by twos.
         denominator := div(denominator, twos)
@@ -182,30 +193,30 @@ library Math {
         // Divide [prod1 prod0] by twos.
         prod0 := div(prod0, twos)
 
-        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
+        // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.
         twos := add(div(sub(0, twos), twos), 1)
       }
 
       // Shift in bits from prod1 into prod0.
       prod0 |= prod1 * twos;
 
-      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
-      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
-      // four bits. That is, denominator * inv = 1 mod 2^4.
+      // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such
+      // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for
+      // four bits. That is, denominator * inv ≡ 1 mod 2⁴.
       uint256 inverse = (3 * denominator) ^ 2;
 
-      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
-      // in modular arithmetic, doubling the correct bits in each step.
-      inverse *= 2 - denominator * inverse; // inverse mod 2^8
-      inverse *= 2 - denominator * inverse; // inverse mod 2^16
-      inverse *= 2 - denominator * inverse; // inverse mod 2^32
-      inverse *= 2 - denominator * inverse; // inverse mod 2^64
-      inverse *= 2 - denominator * inverse; // inverse mod 2^128
-      inverse *= 2 - denominator * inverse; // inverse mod 2^256
+      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
+      // works in modular arithmetic, doubling the correct bits in each step.
+      inverse *= 2 - denominator * inverse; // inverse mod 2⁸
+      inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶
+      inverse *= 2 - denominator * inverse; // inverse mod 2³²
+      inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴
+      inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸
+      inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶
 
       // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
-      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
-      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
+      // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is
+      // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1
       // is no longer required.
       result = prod0 * inverse;
       return result;
@@ -213,102 +224,353 @@ library Math {
   }
 
   /**
-   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
+   * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.
    */
   function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
-    uint256 result = mulDiv(x, y, denominator);
-    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
-      result += 1;
+    return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);
+  }
+
+  /**
+   * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.
+   *
+   * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.
+   * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.
+   *
+   * If the input value is not inversible, 0 is returned.
+   *
+   * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the
+   * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.
+   */
+  function invMod(uint256 a, uint256 n) internal pure returns (uint256) {
+    unchecked {
+      if (n == 0) return 0;
+
+      // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)
+      // Used to compute integers x and y such that: ax + ny = gcd(a, n).
+      // When the gcd is 1, then the inverse of a modulo n exists and it's x.
+      // ax + ny = 1
+      // ax = 1 + (-y)n
+      // ax ≡ 1 (mod n) # x is the inverse of a modulo n
+
+      // If the remainder is 0 the gcd is n right away.
+      uint256 remainder = a % n;
+      uint256 gcd = n;
+
+      // Therefore the initial coefficients are:
+      // ax + ny = gcd(a, n) = n
+      // 0a + 1n = n
+      int256 x = 0;
+      int256 y = 1;
+
+      while (remainder != 0) {
+        uint256 quotient = gcd / remainder;
+
+        (gcd, remainder) = (
+          // The old remainder is the next gcd to try.
+          remainder,
+          // Compute the next remainder.
+          // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd
+          // where gcd is at most n (capped to type(uint256).max)
+          gcd - remainder * quotient
+        );
+
+        (x, y) = (
+          // Increment the coefficient of a.
+          y,
+          // Decrement the coefficient of n.
+          // Can overflow, but the result is casted to uint256 so that the
+          // next value of y is "wrapped around" to a value between 0 and n - 1.
+          x - y * int256(quotient)
+        );
+      }
+
+      if (gcd != 1) return 0; // No inverse exists.
+      return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.
+    }
+  }
+
+  /**
+   * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.
+   *
+   * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is
+   * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that
+   * `a**(p-2)` is the modular multiplicative inverse of a in Fp.
+   *
+   * NOTE: this function does NOT check that `p` is a prime greater than `2`.
+   */
+  function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {
+    unchecked {
+      return Math.modExp(a, p - 2, p);
+    }
+  }
+
+  /**
+   * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)
+   *
+   * Requirements:
+   * - modulus can't be zero
+   * - underlying staticcall to precompile must succeed
+   *
+   * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make
+   * sure the chain you're using it on supports the precompiled contract for modular exponentiation
+   * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,
+   * the underlying function will succeed given the lack of a revert, but the result may be incorrectly
+   * interpreted as 0.
+   */
+  function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {
+    (bool success, uint256 result) = tryModExp(b, e, m);
+    if (!success) {
+      Panic.panic(Panic.DIVISION_BY_ZERO);
     }
     return result;
   }
 
   /**
-   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
+   * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).
+   * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying
+   * to operate modulo 0 or if the underlying precompile reverted.
    *
-   * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
+   * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain
+   * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in
+   * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack
+   * of a revert, but the result may be incorrectly interpreted as 0.
    */
-  function sqrt(uint256 a) internal pure returns (uint256) {
-    if (a == 0) {
-      return 0;
+  function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {
+    if (m == 0) return (false, 0);
+    assembly ("memory-safe") {
+      let ptr := mload(0x40)
+      // | Offset    | Content    | Content (Hex)                                                      |
+      // |-----------|------------|--------------------------------------------------------------------|
+      // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
+      // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
+      // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
+      // | 0x60:0x7f | value of b | 0x<.............................................................b> |
+      // | 0x80:0x9f | value of e | 0x<.............................................................e> |
+      // | 0xa0:0xbf | value of m | 0x<.............................................................m> |
+      mstore(ptr, 0x20)
+      mstore(add(ptr, 0x20), 0x20)
+      mstore(add(ptr, 0x40), 0x20)
+      mstore(add(ptr, 0x60), b)
+      mstore(add(ptr, 0x80), e)
+      mstore(add(ptr, 0xa0), m)
+
+      // Given the result < m, it's guaranteed to fit in 32 bytes,
+      // so we can use the memory scratch space located at offset 0.
+      success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)
+      result := mload(0x00)
     }
+  }
 
-    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
-    //
-    // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
-    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
-    //
-    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
-    // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
-    // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
-    //
-    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
-    uint256 result = 1 << (log2(a) >> 1);
-
-    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
-    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
-    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
-    // into the expected uint128 result.
-    unchecked {
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      result = (result + a / result) >> 1;
-      return min(result, a / result);
+  /**
+   * @dev Variant of {modExp} that supports inputs of arbitrary length.
+   */
+  function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {
+    (bool success, bytes memory result) = tryModExp(b, e, m);
+    if (!success) {
+      Panic.panic(Panic.DIVISION_BY_ZERO);
     }
+    return result;
   }
 
   /**
-   * @notice Calculates sqrt(a), following the selected rounding direction.
+   * @dev Variant of {tryModExp} that supports inputs of arbitrary length.
    */
-  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
-    unchecked {
-      uint256 result = sqrt(a);
-      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
+  function tryModExp(bytes memory b, bytes memory e, bytes memory m)
+    internal
+    view
+    returns (bool success, bytes memory result)
+  {
+    if (_zeroBytes(m)) return (false, new bytes(0));
+
+    uint256 mLen = m.length;
+
+    // Encode call args in result and move the free memory pointer
+    result = abi.encodePacked(b.length, e.length, mLen, b, e, m);
+
+    assembly ("memory-safe") {
+      let dataPtr := add(result, 0x20)
+      // Write result on top of args to avoid allocating extra memory.
+      success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)
+      // Overwrite the length.
+      // result.length > returndatasize() is guaranteed because returndatasize() == m.length
+      mstore(result, mLen)
+      // Set the memory pointer after the returned data.
+      mstore(0x40, add(dataPtr, mLen))
     }
   }
 
   /**
-   * @dev Return the log in base 2, rounded down, of a positive value.
-   * Returns 0 if given 0.
+   * @dev Returns whether the provided byte array is zero.
    */
-  function log2(uint256 value) internal pure returns (uint256) {
-    uint256 result = 0;
+  function _zeroBytes(bytes memory byteArray) private pure returns (bool) {
+    for (uint256 i = 0; i < byteArray.length; ++i) {
+      if (byteArray[i] != 0) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  /**
+   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
+   * towards zero.
+   *
+   * This method is based on Newton's method for computing square roots; the algorithm is restricted to only
+   * using integer operations.
+   */
+  function sqrt(uint256 a) internal pure returns (uint256) {
     unchecked {
-      if (value >> 128 > 0) {
-        value >>= 128;
-        result += 128;
+      // Take care of easy edge cases when a == 0 or a == 1
+      if (a <= 1) {
+        return a;
       }
-      if (value >> 64 > 0) {
-        value >>= 64;
-        result += 64;
+
+      // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a
+      // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between
+      // the current value as `ε_n = | x_n - sqrt(a) |`.
+      //
+      // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root
+      // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is
+      // bigger than any uint256.
+      //
+      // By noticing that
+      // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`
+      // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar
+      // to the msb function.
+      uint256 aa = a;
+      uint256 xn = 1;
+
+      if (aa >= (1 << 128)) {
+        aa >>= 128;
+        xn <<= 64;
       }
-      if (value >> 32 > 0) {
-        value >>= 32;
-        result += 32;
+      if (aa >= (1 << 64)) {
+        aa >>= 64;
+        xn <<= 32;
       }
-      if (value >> 16 > 0) {
-        value >>= 16;
-        result += 16;
+      if (aa >= (1 << 32)) {
+        aa >>= 32;
+        xn <<= 16;
       }
-      if (value >> 8 > 0) {
-        value >>= 8;
-        result += 8;
+      if (aa >= (1 << 16)) {
+        aa >>= 16;
+        xn <<= 8;
       }
-      if (value >> 4 > 0) {
-        value >>= 4;
-        result += 4;
+      if (aa >= (1 << 8)) {
+        aa >>= 8;
+        xn <<= 4;
       }
-      if (value >> 2 > 0) {
-        value >>= 2;
-        result += 2;
+      if (aa >= (1 << 4)) {
+        aa >>= 4;
+        xn <<= 2;
       }
-      if (value >> 1 > 0) {
-        result += 1;
+      if (aa >= (1 << 2)) {
+        xn <<= 1;
       }
+
+      // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).
+      //
+      // We can refine our estimation by noticing that the middle of that interval minimizes the error.
+      // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).
+      // This is going to be our x_0 (and ε_0)
+      xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)
+
+      // From here, Newton's method give us:
+      // x_{n+1} = (x_n + a / x_n) / 2
+      //
+      // One should note that:
+      // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a
+      //              = ((x_n² + a) / (2 * x_n))² - a
+      //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a
+      //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)
+      //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)
+      //              = (x_n² - a)² / (2 * x_n)²
+      //              = ((x_n² - a) / (2 * x_n))²
+      //              ≥ 0
+      // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n
+      //
+      // This gives us the proof of quadratic convergence of the sequence:
+      // ε_{n+1} = | x_{n+1} - sqrt(a) |
+      //         = | (x_n + a / x_n) / 2 - sqrt(a) |
+      //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |
+      //         = | (x_n - sqrt(a))² / (2 * x_n) |
+      //         = | ε_n² / (2 * x_n) |
+      //         = ε_n² / | (2 * x_n) |
+      //
+      // For the first iteration, we have a special case where x_0 is known:
+      // ε_1 = ε_0² / | (2 * x_0) |
+      //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))
+      //     ≤ 2**(2*e-4) / (3 * 2**(e-1))
+      //     ≤ 2**(e-3) / 3
+      //     ≤ 2**(e-3-log2(3))
+      //     ≤ 2**(e-4.5)
+      //
+      // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:
+      // ε_{n+1} = ε_n² / | (2 * x_n) |
+      //         ≤ (2**(e-k))² / (2 * 2**(e-1))
+      //         ≤ 2**(2*e-2*k) / 2**e
+      //         ≤ 2**(e-2*k)
+      xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above
+      xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5
+      xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9
+      xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18
+      xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36
+      xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72
+
+      // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision
+      // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either
+      // sqrt(a) or sqrt(a) + 1.
+      return xn - SafeCast.toUint(xn > a / xn);
+    }
+  }
+
+  /**
+   * @dev Calculates sqrt(a), following the selected rounding direction.
+   */
+  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
+    unchecked {
+      uint256 result = sqrt(a);
+      return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);
+    }
+  }
+
+  /**
+   * @dev Return the log in base 2 of a positive value rounded towards zero.
+   * Returns 0 if given 0.
+   */
+  function log2(uint256 value) internal pure returns (uint256) {
+    uint256 result = 0;
+    uint256 exp;
+    unchecked {
+      exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);
+      value >>= exp;
+      result += exp;
+
+      exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);
+      value >>= exp;
+      result += exp;
+
+      result += SafeCast.toUint(value > 1);
     }
     return result;
   }
@@ -320,12 +582,12 @@ library Math {
   function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
     unchecked {
       uint256 result = log2(value);
-      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
+      return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);
     }
   }
 
   /**
-   * @dev Return the log in base 10, rounded down, of a positive value.
+   * @dev Return the log in base 10 of a positive value rounded towards zero.
    * Returns 0 if given 0.
    */
   function log10(uint256 value) internal pure returns (uint256) {
@@ -369,38 +631,37 @@ library Math {
   function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
     unchecked {
       uint256 result = log10(value);
-      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
+      return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);
     }
   }
 
   /**
-   * @dev Return the log in base 256, rounded down, of a positive value.
+   * @dev Return the log in base 256 of a positive value rounded towards zero.
    * Returns 0 if given 0.
    *
    * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
    */
   function log256(uint256 value) internal pure returns (uint256) {
     uint256 result = 0;
+    uint256 isGt;
     unchecked {
-      if (value >> 128 > 0) {
-        value >>= 128;
-        result += 16;
-      }
-      if (value >> 64 > 0) {
-        value >>= 64;
-        result += 8;
-      }
-      if (value >> 32 > 0) {
-        value >>= 32;
-        result += 4;
-      }
-      if (value >> 16 > 0) {
-        value >>= 16;
-        result += 2;
-      }
-      if (value >> 8 > 0) {
-        result += 1;
-      }
+      isGt = SafeCast.toUint(value > (1 << 128) - 1);
+      value >>= isGt * 128;
+      result += isGt * 16;
+
+      isGt = SafeCast.toUint(value > (1 << 64) - 1);
+      value >>= isGt * 64;
+      result += isGt * 8;
+
+      isGt = SafeCast.toUint(value > (1 << 32) - 1);
+      value >>= isGt * 32;
+      result += isGt * 4;
+
+      isGt = SafeCast.toUint(value > (1 << 16) - 1);
+      value >>= isGt * 16;
+      result += isGt * 2;
+
+      result += SafeCast.toUint(value > (1 << 8) - 1);
     }
     return result;
   }
@@ -412,7 +673,14 @@ library Math {
   function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
     unchecked {
       uint256 result = log256(value);
-      return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
+      return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);
     }
   }
+
+  /**
+   * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
+   */
+  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
+    return uint8(rounding) % 2 == 1;
+  }
 }
diff --git a/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/MessageHashUtils.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/MessageHashUtils.sol
new file mode 100644
index 0000000..9ef1c13
--- /dev/null
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/MessageHashUtils.sol
@@ -0,0 +1,83 @@
+// SPDX-License-Identifier: MIT
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)
+
+pragma solidity ^0.8.20;
+
+import {Strings} from "../Strings.sol";
+
+/**
+ * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.
+ *
+ * The library provides methods for generating a hash of a message that conforms to the
+ * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]
+ * specifications.
+ */
+library MessageHashUtils {
+  /**
+   * @dev Returns the keccak256 digest of an ERC-191 signed data with version
+   * `0x45` (`personal_sign` messages).
+   *
+   * The digest is calculated by prefixing a bytes32 `messageHash` with
+   * `"\x19Ethereum Signed Message:\n32"` and hashing the result. It corresponds with the
+   * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
+   *
+   * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with
+   * keccak256, although any bytes32 value can be safely used because the final digest will
+   * be re-hashed.
+   *
+   * See {ECDSA-recover}.
+   */
+  function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {
+    assembly ("memory-safe") {
+      mstore(0x00, "\x19Ethereum Signed Message:\n32") // 32 is the bytes-length of messageHash
+      mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix
+      digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)
+    }
+  }
+
+  /**
+   * @dev Returns the keccak256 digest of an ERC-191 signed data with version
+   * `0x45` (`personal_sign` messages).
+   *
+   * The digest is calculated by prefixing an arbitrary `message` with
+   * `"\x19Ethereum Signed Message:\n" + len(message)` and hashing the result. It corresponds with the
+   * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
+   *
+   * See {ECDSA-recover}.
+   */
+  function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {
+    return keccak256(bytes.concat("\x19Ethereum Signed Message:\n", bytes(Strings.toString(message.length)), message));
+  }
+
+  /**
+   * @dev Returns the keccak256 digest of an ERC-191 signed data with version
+   * `0x00` (data with intended validator).
+   *
+   * The digest is calculated by prefixing an arbitrary `data` with `"\x19\x00"` and the intended
+   * `validator` address. Then hashing the result.
+   *
+   * See {ECDSA-recover}.
+   */
+  function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
+    return keccak256(abi.encodePacked(hex"1900", validator, data));
+  }
+
+  /**
+   * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).
+   *
+   * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with
+   * `\x19\x01` and hashing the result. It corresponds to the hash signed by the
+   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.
+   *
+   * See {ECDSA-recover}.
+   */
+  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {
+    assembly ("memory-safe") {
+      let ptr := mload(0x40)
+      mstore(ptr, hex"1901")
+      mstore(add(ptr, 0x02), domainSeparator)
+      mstore(add(ptr, 0x22), structHash)
+      digest := keccak256(ptr, 0x42)
+    }
+  }
+}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/MintableIncentivizedERC20.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/MintableIncentivizedERC20.sol
index e6564bd..b69d99e 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/MintableIncentivizedERC20.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/MintableIncentivizedERC20.sol
@@ -1,8 +1,8 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {IAaveIncentivesController} from "aave-v3-core/contracts/interfaces/IAaveIncentivesController.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
+import {IAaveIncentivesController} from "../../../interfaces/IAaveIncentivesController.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
 import {IncentivizedERC20} from "./IncentivizedERC20.sol";
 
 /**
@@ -17,9 +17,10 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    IncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    IncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -36,9 +37,8 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
     uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance + amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 
@@ -54,10 +54,8 @@ abstract contract MintableIncentivizedERC20 is IncentivizedERC20 {
     uint120 oldAccountBalance = _userState[account].balance;
     _userState[account].balance = oldAccountBalance - amount;
 
-    IAaveIncentivesController incentivesControllerLocal = _incentivesController;
-
-    if (address(incentivesControllerLocal) != address(0)) {
-      incentivesControllerLocal.handleAction(account, oldTotalSupply, oldAccountBalance);
+    if (address(REWARDS_CONTROLLER) != address(0)) {
+      REWARDS_CONTROLLER.handleAction(account, oldTotalSupply, oldAccountBalance);
     }
   }
 }
diff --git a/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Panic.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Panic.sol
new file mode 100644
index 0000000..e25e06f
--- /dev/null
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Panic.sol
@@ -0,0 +1,57 @@
+// SPDX-License-Identifier: MIT
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)
+
+pragma solidity ^0.8.20;
+
+/**
+ * @dev Helper library for emitting standardized panic codes.
+ *
+ * ```solidity
+ * contract Example {
+ *      using Panic for uint256;
+ *
+ *      // Use any of the declared internal constants
+ *      function foo() { Panic.GENERIC.panic(); }
+ *
+ *      // Alternatively
+ *      function foo() { Panic.panic(Panic.GENERIC); }
+ * }
+ * ```
+ *
+ * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].
+ *
+ * _Available since v5.1._
+ */
+// slither-disable-next-line unused-state
+library Panic {
+  /// @dev generic / unspecified error
+  uint256 internal constant GENERIC = 0x00;
+  /// @dev used by the assert() builtin
+  uint256 internal constant ASSERT = 0x01;
+  /// @dev arithmetic underflow or overflow
+  uint256 internal constant UNDER_OVERFLOW = 0x11;
+  /// @dev division or modulo by zero
+  uint256 internal constant DIVISION_BY_ZERO = 0x12;
+  /// @dev enum conversion error
+  uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;
+  /// @dev invalid encoding in storage
+  uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;
+  /// @dev empty array pop
+  uint256 internal constant EMPTY_ARRAY_POP = 0x31;
+  /// @dev array out of bounds access
+  uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;
+  /// @dev resource error (too large allocation or too large array)
+  uint256 internal constant RESOURCE_ERROR = 0x41;
+  /// @dev calling invalid internal function
+  uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;
+
+  /// @dev Reverts with a panic code. Recommended to use with
+  /// the internal constants with predefined codes.
+  function panic(uint256 code) internal pure {
+    assembly ("memory-safe") {
+      mstore(0x00, 0x4e487b71)
+      mstore(0x20, code)
+      revert(0x1c, 0x24)
+    }
+  }
+}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SafeCast.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/SafeCast.sol
index 1a6b544..6e26cd8 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SafeCast.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/SafeCast.sol
@@ -1,9 +1,11 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)
-pragma solidity ^0.8.10;
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
+// This file was procedurally generated from scripts/generate/templates/SafeCast.js.
+
+pragma solidity ^0.8.20;
 
 /**
- * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
+ * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
  * checks.
  *
  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
@@ -13,11 +15,79 @@ pragma solidity ^0.8.10;
  *
  * Using this library instead of the unchecked operations eliminates an entire
  * class of bugs, so it's recommended to use it always.
- *
- * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
- * all math on `uint256` and `int256` and then downcasting.
  */
 library SafeCast {
+  /**
+   * @dev Value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
+
+  /**
+   * @dev An int value doesn't fit in an uint of `bits` size.
+   */
+  error SafeCastOverflowedIntToUint(int256 value);
+
+  /**
+   * @dev Value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
+
+  /**
+   * @dev An uint value doesn't fit in an int of `bits` size.
+   */
+  error SafeCastOverflowedUintToInt(uint256 value);
+
+  /**
+   * @dev Returns the downcasted uint248 from uint256, reverting on
+   * overflow (when the input is greater than largest uint248).
+   *
+   * Counterpart to Solidity's `uint248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toUint248(uint256 value) internal pure returns (uint248) {
+    if (value > type(uint248).max) {
+      revert SafeCastOverflowedUintDowncast(248, value);
+    }
+    return uint248(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint240 from uint256, reverting on
+   * overflow (when the input is greater than largest uint240).
+   *
+   * Counterpart to Solidity's `uint240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toUint240(uint256 value) internal pure returns (uint240) {
+    if (value > type(uint240).max) {
+      revert SafeCastOverflowedUintDowncast(240, value);
+    }
+    return uint240(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint232 from uint256, reverting on
+   * overflow (when the input is greater than largest uint232).
+   *
+   * Counterpart to Solidity's `uint232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toUint232(uint256 value) internal pure returns (uint232) {
+    if (value > type(uint232).max) {
+      revert SafeCastOverflowedUintDowncast(232, value);
+    }
+    return uint232(value);
+  }
+
   /**
    * @dev Returns the downcasted uint224 from uint256, reverting on
    * overflow (when the input is greater than largest uint224).
@@ -29,23 +99,197 @@ library SafeCast {
    * - input must fit into 224 bits
    */
   function toUint224(uint256 value) internal pure returns (uint224) {
-    require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
+    if (value > type(uint224).max) {
+      revert SafeCastOverflowedUintDowncast(224, value);
+    }
     return uint224(value);
   }
 
   /**
-   * @dev Returns the downcasted uint120 from uint256, reverting on
-   * overflow (when the input is greater than largest uint120).
+   * @dev Returns the downcasted uint216 from uint256, reverting on
+   * overflow (when the input is greater than largest uint216).
    *
-   * Counterpart to Solidity's `uint120` operator.
+   * Counterpart to Solidity's `uint216` operator.
    *
    * Requirements:
    *
-   * - input must fit into 120 bits
+   * - input must fit into 216 bits
    */
-  function toUint120(uint256 value) internal pure returns (uint120) {
-    require(value <= type(uint120).max, "SafeCast: value doesn't fit in 120 bits");
-    return uint120(value);
+  function toUint216(uint256 value) internal pure returns (uint216) {
+    if (value > type(uint216).max) {
+      revert SafeCastOverflowedUintDowncast(216, value);
+    }
+    return uint216(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint208 from uint256, reverting on
+   * overflow (when the input is greater than largest uint208).
+   *
+   * Counterpart to Solidity's `uint208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toUint208(uint256 value) internal pure returns (uint208) {
+    if (value > type(uint208).max) {
+      revert SafeCastOverflowedUintDowncast(208, value);
+    }
+    return uint208(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint200 from uint256, reverting on
+   * overflow (when the input is greater than largest uint200).
+   *
+   * Counterpart to Solidity's `uint200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toUint200(uint256 value) internal pure returns (uint200) {
+    if (value > type(uint200).max) {
+      revert SafeCastOverflowedUintDowncast(200, value);
+    }
+    return uint200(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint192 from uint256, reverting on
+   * overflow (when the input is greater than largest uint192).
+   *
+   * Counterpart to Solidity's `uint192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toUint192(uint256 value) internal pure returns (uint192) {
+    if (value > type(uint192).max) {
+      revert SafeCastOverflowedUintDowncast(192, value);
+    }
+    return uint192(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint184 from uint256, reverting on
+   * overflow (when the input is greater than largest uint184).
+   *
+   * Counterpart to Solidity's `uint184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toUint184(uint256 value) internal pure returns (uint184) {
+    if (value > type(uint184).max) {
+      revert SafeCastOverflowedUintDowncast(184, value);
+    }
+    return uint184(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint176 from uint256, reverting on
+   * overflow (when the input is greater than largest uint176).
+   *
+   * Counterpart to Solidity's `uint176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toUint176(uint256 value) internal pure returns (uint176) {
+    if (value > type(uint176).max) {
+      revert SafeCastOverflowedUintDowncast(176, value);
+    }
+    return uint176(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint168 from uint256, reverting on
+   * overflow (when the input is greater than largest uint168).
+   *
+   * Counterpart to Solidity's `uint168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toUint168(uint256 value) internal pure returns (uint168) {
+    if (value > type(uint168).max) {
+      revert SafeCastOverflowedUintDowncast(168, value);
+    }
+    return uint168(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint160 from uint256, reverting on
+   * overflow (when the input is greater than largest uint160).
+   *
+   * Counterpart to Solidity's `uint160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toUint160(uint256 value) internal pure returns (uint160) {
+    if (value > type(uint160).max) {
+      revert SafeCastOverflowedUintDowncast(160, value);
+    }
+    return uint160(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint152 from uint256, reverting on
+   * overflow (when the input is greater than largest uint152).
+   *
+   * Counterpart to Solidity's `uint152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toUint152(uint256 value) internal pure returns (uint152) {
+    if (value > type(uint152).max) {
+      revert SafeCastOverflowedUintDowncast(152, value);
+    }
+    return uint152(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint144 from uint256, reverting on
+   * overflow (when the input is greater than largest uint144).
+   *
+   * Counterpart to Solidity's `uint144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toUint144(uint256 value) internal pure returns (uint144) {
+    if (value > type(uint144).max) {
+      revert SafeCastOverflowedUintDowncast(144, value);
+    }
+    return uint144(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint136 from uint256, reverting on
+   * overflow (when the input is greater than largest uint136).
+   *
+   * Counterpart to Solidity's `uint136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toUint136(uint256 value) internal pure returns (uint136) {
+    if (value > type(uint136).max) {
+      revert SafeCastOverflowedUintDowncast(136, value);
+    }
+    return uint136(value);
   }
 
   /**
@@ -59,10 +303,63 @@ library SafeCast {
    * - input must fit into 128 bits
    */
   function toUint128(uint256 value) internal pure returns (uint128) {
-    require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
+    if (value > type(uint128).max) {
+      revert SafeCastOverflowedUintDowncast(128, value);
+    }
     return uint128(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint120 from uint256, reverting on
+   * overflow (when the input is greater than largest uint120).
+   *
+   * Counterpart to Solidity's `uint120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toUint120(uint256 value) internal pure returns (uint120) {
+    if (value > type(uint120).max) {
+      revert SafeCastOverflowedUintDowncast(120, value);
+    }
+    return uint120(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint112 from uint256, reverting on
+   * overflow (when the input is greater than largest uint112).
+   *
+   * Counterpart to Solidity's `uint112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toUint112(uint256 value) internal pure returns (uint112) {
+    if (value > type(uint112).max) {
+      revert SafeCastOverflowedUintDowncast(112, value);
+    }
+    return uint112(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint104 from uint256, reverting on
+   * overflow (when the input is greater than largest uint104).
+   *
+   * Counterpart to Solidity's `uint104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toUint104(uint256 value) internal pure returns (uint104) {
+    if (value > type(uint104).max) {
+      revert SafeCastOverflowedUintDowncast(104, value);
+    }
+    return uint104(value);
+  }
+
   /**
    * @dev Returns the downcasted uint96 from uint256, reverting on
    * overflow (when the input is greater than largest uint96).
@@ -74,10 +371,63 @@ library SafeCast {
    * - input must fit into 96 bits
    */
   function toUint96(uint256 value) internal pure returns (uint96) {
-    require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
+    if (value > type(uint96).max) {
+      revert SafeCastOverflowedUintDowncast(96, value);
+    }
     return uint96(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint88 from uint256, reverting on
+   * overflow (when the input is greater than largest uint88).
+   *
+   * Counterpart to Solidity's `uint88` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 88 bits
+   */
+  function toUint88(uint256 value) internal pure returns (uint88) {
+    if (value > type(uint88).max) {
+      revert SafeCastOverflowedUintDowncast(88, value);
+    }
+    return uint88(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint80 from uint256, reverting on
+   * overflow (when the input is greater than largest uint80).
+   *
+   * Counterpart to Solidity's `uint80` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 80 bits
+   */
+  function toUint80(uint256 value) internal pure returns (uint80) {
+    if (value > type(uint80).max) {
+      revert SafeCastOverflowedUintDowncast(80, value);
+    }
+    return uint80(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint72 from uint256, reverting on
+   * overflow (when the input is greater than largest uint72).
+   *
+   * Counterpart to Solidity's `uint72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toUint72(uint256 value) internal pure returns (uint72) {
+    if (value > type(uint72).max) {
+      revert SafeCastOverflowedUintDowncast(72, value);
+    }
+    return uint72(value);
+  }
+
   /**
    * @dev Returns the downcasted uint64 from uint256, reverting on
    * overflow (when the input is greater than largest uint64).
@@ -89,10 +439,63 @@ library SafeCast {
    * - input must fit into 64 bits
    */
   function toUint64(uint256 value) internal pure returns (uint64) {
-    require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
+    if (value > type(uint64).max) {
+      revert SafeCastOverflowedUintDowncast(64, value);
+    }
     return uint64(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint56 from uint256, reverting on
+   * overflow (when the input is greater than largest uint56).
+   *
+   * Counterpart to Solidity's `uint56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
+   */
+  function toUint56(uint256 value) internal pure returns (uint56) {
+    if (value > type(uint56).max) {
+      revert SafeCastOverflowedUintDowncast(56, value);
+    }
+    return uint56(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint48 from uint256, reverting on
+   * overflow (when the input is greater than largest uint48).
+   *
+   * Counterpart to Solidity's `uint48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toUint48(uint256 value) internal pure returns (uint48) {
+    if (value > type(uint48).max) {
+      revert SafeCastOverflowedUintDowncast(48, value);
+    }
+    return uint48(value);
+  }
+
+  /**
+   * @dev Returns the downcasted uint40 from uint256, reverting on
+   * overflow (when the input is greater than largest uint40).
+   *
+   * Counterpart to Solidity's `uint40` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 40 bits
+   */
+  function toUint40(uint256 value) internal pure returns (uint40) {
+    if (value > type(uint40).max) {
+      revert SafeCastOverflowedUintDowncast(40, value);
+    }
+    return uint40(value);
+  }
+
   /**
    * @dev Returns the downcasted uint32 from uint256, reverting on
    * overflow (when the input is greater than largest uint32).
@@ -104,10 +507,29 @@ library SafeCast {
    * - input must fit into 32 bits
    */
   function toUint32(uint256 value) internal pure returns (uint32) {
-    require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
+    if (value > type(uint32).max) {
+      revert SafeCastOverflowedUintDowncast(32, value);
+    }
     return uint32(value);
   }
 
+  /**
+   * @dev Returns the downcasted uint24 from uint256, reverting on
+   * overflow (when the input is greater than largest uint24).
+   *
+   * Counterpart to Solidity's `uint24` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 24 bits
+   */
+  function toUint24(uint256 value) internal pure returns (uint24) {
+    if (value > type(uint24).max) {
+      revert SafeCastOverflowedUintDowncast(24, value);
+    }
+    return uint24(value);
+  }
+
   /**
    * @dev Returns the downcasted uint16 from uint256, reverting on
    * overflow (when the input is greater than largest uint16).
@@ -119,7 +541,9 @@ library SafeCast {
    * - input must fit into 16 bits
    */
   function toUint16(uint256 value) internal pure returns (uint16) {
-    require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
+    if (value > type(uint16).max) {
+      revert SafeCastOverflowedUintDowncast(16, value);
+    }
     return uint16(value);
   }
 
@@ -131,10 +555,12 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
+   * - input must fit into 8 bits
    */
   function toUint8(uint256 value) internal pure returns (uint8) {
-    require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
+    if (value > type(uint8).max) {
+      revert SafeCastOverflowedUintDowncast(8, value);
+    }
     return uint8(value);
   }
 
@@ -146,10 +572,282 @@ library SafeCast {
    * - input must be greater than or equal to 0.
    */
   function toUint256(int256 value) internal pure returns (uint256) {
-    require(value >= 0, "SafeCast: value must be positive");
+    if (value < 0) {
+      revert SafeCastOverflowedIntToUint(value);
+    }
     return uint256(value);
   }
 
+  /**
+   * @dev Returns the downcasted int248 from int256, reverting on
+   * overflow (when the input is less than smallest int248 or
+   * greater than largest int248).
+   *
+   * Counterpart to Solidity's `int248` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 248 bits
+   */
+  function toInt248(int256 value) internal pure returns (int248 downcasted) {
+    downcasted = int248(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(248, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int240 from int256, reverting on
+   * overflow (when the input is less than smallest int240 or
+   * greater than largest int240).
+   *
+   * Counterpart to Solidity's `int240` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 240 bits
+   */
+  function toInt240(int256 value) internal pure returns (int240 downcasted) {
+    downcasted = int240(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(240, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int232 from int256, reverting on
+   * overflow (when the input is less than smallest int232 or
+   * greater than largest int232).
+   *
+   * Counterpart to Solidity's `int232` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 232 bits
+   */
+  function toInt232(int256 value) internal pure returns (int232 downcasted) {
+    downcasted = int232(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(232, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int224 from int256, reverting on
+   * overflow (when the input is less than smallest int224 or
+   * greater than largest int224).
+   *
+   * Counterpart to Solidity's `int224` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 224 bits
+   */
+  function toInt224(int256 value) internal pure returns (int224 downcasted) {
+    downcasted = int224(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(224, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int216 from int256, reverting on
+   * overflow (when the input is less than smallest int216 or
+   * greater than largest int216).
+   *
+   * Counterpart to Solidity's `int216` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 216 bits
+   */
+  function toInt216(int256 value) internal pure returns (int216 downcasted) {
+    downcasted = int216(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(216, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int208 from int256, reverting on
+   * overflow (when the input is less than smallest int208 or
+   * greater than largest int208).
+   *
+   * Counterpart to Solidity's `int208` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 208 bits
+   */
+  function toInt208(int256 value) internal pure returns (int208 downcasted) {
+    downcasted = int208(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(208, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int200 from int256, reverting on
+   * overflow (when the input is less than smallest int200 or
+   * greater than largest int200).
+   *
+   * Counterpart to Solidity's `int200` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 200 bits
+   */
+  function toInt200(int256 value) internal pure returns (int200 downcasted) {
+    downcasted = int200(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(200, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int192 from int256, reverting on
+   * overflow (when the input is less than smallest int192 or
+   * greater than largest int192).
+   *
+   * Counterpart to Solidity's `int192` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 192 bits
+   */
+  function toInt192(int256 value) internal pure returns (int192 downcasted) {
+    downcasted = int192(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(192, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int184 from int256, reverting on
+   * overflow (when the input is less than smallest int184 or
+   * greater than largest int184).
+   *
+   * Counterpart to Solidity's `int184` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 184 bits
+   */
+  function toInt184(int256 value) internal pure returns (int184 downcasted) {
+    downcasted = int184(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(184, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int176 from int256, reverting on
+   * overflow (when the input is less than smallest int176 or
+   * greater than largest int176).
+   *
+   * Counterpart to Solidity's `int176` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 176 bits
+   */
+  function toInt176(int256 value) internal pure returns (int176 downcasted) {
+    downcasted = int176(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(176, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int168 from int256, reverting on
+   * overflow (when the input is less than smallest int168 or
+   * greater than largest int168).
+   *
+   * Counterpart to Solidity's `int168` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 168 bits
+   */
+  function toInt168(int256 value) internal pure returns (int168 downcasted) {
+    downcasted = int168(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(168, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int160 from int256, reverting on
+   * overflow (when the input is less than smallest int160 or
+   * greater than largest int160).
+   *
+   * Counterpart to Solidity's `int160` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 160 bits
+   */
+  function toInt160(int256 value) internal pure returns (int160 downcasted) {
+    downcasted = int160(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(160, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int152 from int256, reverting on
+   * overflow (when the input is less than smallest int152 or
+   * greater than largest int152).
+   *
+   * Counterpart to Solidity's `int152` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 152 bits
+   */
+  function toInt152(int256 value) internal pure returns (int152 downcasted) {
+    downcasted = int152(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(152, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int144 from int256, reverting on
+   * overflow (when the input is less than smallest int144 or
+   * greater than largest int144).
+   *
+   * Counterpart to Solidity's `int144` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 144 bits
+   */
+  function toInt144(int256 value) internal pure returns (int144 downcasted) {
+    downcasted = int144(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(144, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int136 from int256, reverting on
+   * overflow (when the input is less than smallest int136 or
+   * greater than largest int136).
+   *
+   * Counterpart to Solidity's `int136` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 136 bits
+   */
+  function toInt136(int256 value) internal pure returns (int136 downcasted) {
+    downcasted = int136(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(136, value);
+    }
+  }
+
   /**
    * @dev Returns the downcasted int128 from int256, reverting on
    * overflow (when the input is less than smallest int128 or
@@ -160,12 +858,138 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 128 bits
+   */
+  function toInt128(int256 value) internal pure returns (int128 downcasted) {
+    downcasted = int128(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(128, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int120 from int256, reverting on
+   * overflow (when the input is less than smallest int120 or
+   * greater than largest int120).
+   *
+   * Counterpart to Solidity's `int120` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 120 bits
+   */
+  function toInt120(int256 value) internal pure returns (int120 downcasted) {
+    downcasted = int120(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(120, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int112 from int256, reverting on
+   * overflow (when the input is less than smallest int112 or
+   * greater than largest int112).
+   *
+   * Counterpart to Solidity's `int112` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 112 bits
+   */
+  function toInt112(int256 value) internal pure returns (int112 downcasted) {
+    downcasted = int112(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(112, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int104 from int256, reverting on
+   * overflow (when the input is less than smallest int104 or
+   * greater than largest int104).
+   *
+   * Counterpart to Solidity's `int104` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 104 bits
+   */
+  function toInt104(int256 value) internal pure returns (int104 downcasted) {
+    downcasted = int104(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(104, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int96 from int256, reverting on
+   * overflow (when the input is less than smallest int96 or
+   * greater than largest int96).
+   *
+   * Counterpart to Solidity's `int96` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 96 bits
+   */
+  function toInt96(int256 value) internal pure returns (int96 downcasted) {
+    downcasted = int96(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(96, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int88 from int256, reverting on
+   * overflow (when the input is less than smallest int88 or
+   * greater than largest int88).
+   *
+   * Counterpart to Solidity's `int88` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 88 bits
+   */
+  function toInt88(int256 value) internal pure returns (int88 downcasted) {
+    downcasted = int88(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(88, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int80 from int256, reverting on
+   * overflow (when the input is less than smallest int80 or
+   * greater than largest int80).
+   *
+   * Counterpart to Solidity's `int80` operator.
    *
-   * _Available since v3.1._
+   * Requirements:
+   *
+   * - input must fit into 80 bits
    */
-  function toInt128(int256 value) internal pure returns (int128) {
-    require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
-    return int128(value);
+  function toInt80(int256 value) internal pure returns (int80 downcasted) {
+    downcasted = int80(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(80, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int72 from int256, reverting on
+   * overflow (when the input is less than smallest int72 or
+   * greater than largest int72).
+   *
+   * Counterpart to Solidity's `int72` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 72 bits
+   */
+  function toInt72(int256 value) internal pure returns (int72 downcasted) {
+    downcasted = int72(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(72, value);
+    }
   }
 
   /**
@@ -178,12 +1002,66 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 64 bits
+   */
+  function toInt64(int256 value) internal pure returns (int64 downcasted) {
+    downcasted = int64(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(64, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int56 from int256, reverting on
+   * overflow (when the input is less than smallest int56 or
+   * greater than largest int56).
    *
-   * _Available since v3.1._
+   * Counterpart to Solidity's `int56` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 56 bits
    */
-  function toInt64(int256 value) internal pure returns (int64) {
-    require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
-    return int64(value);
+  function toInt56(int256 value) internal pure returns (int56 downcasted) {
+    downcasted = int56(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(56, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int48 from int256, reverting on
+   * overflow (when the input is less than smallest int48 or
+   * greater than largest int48).
+   *
+   * Counterpart to Solidity's `int48` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 48 bits
+   */
+  function toInt48(int256 value) internal pure returns (int48 downcasted) {
+    downcasted = int48(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(48, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int40 from int256, reverting on
+   * overflow (when the input is less than smallest int40 or
+   * greater than largest int40).
+   *
+   * Counterpart to Solidity's `int40` operator.
+   *
+   * Requirements:
+   *
+   * - input must fit into 40 bits
+   */
+  function toInt40(int256 value) internal pure returns (int40 downcasted) {
+    downcasted = int40(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(40, value);
+    }
   }
 
   /**
@@ -196,12 +1074,30 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 32 bits
+   */
+  function toInt32(int256 value) internal pure returns (int32 downcasted) {
+    downcasted = int32(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(32, value);
+    }
+  }
+
+  /**
+   * @dev Returns the downcasted int24 from int256, reverting on
+   * overflow (when the input is less than smallest int24 or
+   * greater than largest int24).
+   *
+   * Counterpart to Solidity's `int24` operator.
+   *
+   * Requirements:
    *
-   * _Available since v3.1._
+   * - input must fit into 24 bits
    */
-  function toInt32(int256 value) internal pure returns (int32) {
-    require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
-    return int32(value);
+  function toInt24(int256 value) internal pure returns (int24 downcasted) {
+    downcasted = int24(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(24, value);
+    }
   }
 
   /**
@@ -214,12 +1110,12 @@ library SafeCast {
    * Requirements:
    *
    * - input must fit into 16 bits
-   *
-   * _Available since v3.1._
    */
-  function toInt16(int256 value) internal pure returns (int16) {
-    require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
-    return int16(value);
+  function toInt16(int256 value) internal pure returns (int16 downcasted) {
+    downcasted = int16(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(16, value);
+    }
   }
 
   /**
@@ -231,13 +1127,13 @@ library SafeCast {
    *
    * Requirements:
    *
-   * - input must fit into 8 bits.
-   *
-   * _Available since v3.1._
+   * - input must fit into 8 bits
    */
-  function toInt8(int256 value) internal pure returns (int8) {
-    require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
-    return int8(value);
+  function toInt8(int256 value) internal pure returns (int8 downcasted) {
+    downcasted = int8(value);
+    if (downcasted != value) {
+      revert SafeCastOverflowedIntDowncast(8, value);
+    }
   }
 
   /**
@@ -249,7 +1145,18 @@ library SafeCast {
    */
   function toInt256(uint256 value) internal pure returns (int256) {
     // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
-    require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
+    if (value > uint256(type(int256).max)) {
+      revert SafeCastOverflowedUintToInt(value);
+    }
     return int256(value);
   }
+
+  /**
+   * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
+   */
+  function toUint(bool b) internal pure returns (uint256 u) {
+    assembly ("memory-safe") {
+      u := iszero(iszero(b))
+    }
+  }
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SafeCast72.sol b/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SafeCast72.sol
deleted file mode 100644
index e03ca52..0000000
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SafeCast72.sol
+++ /dev/null
@@ -1,23 +0,0 @@
-// SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
-
-/**
- * @notice influenced by OpenZeppelin SafeCast lib, which is missing to uint72 cast
- * @author BGD Labs
- */
-library SafeCast72 {
-  /**
-   * @dev Returns the downcasted uint72 from uint256, reverting on
-   * overflow (when the input is greater than largest uint72).
-   *
-   * Counterpart to Solidity's `uint16` operator.
-   *
-   * Requirements:
-   *
-   * - input must fit into 72 bits
-   */
-  function toUint72(uint256 value) internal pure returns (uint72) {
-    require(value <= type(uint72).max, "SafeCast: value doesn't fit in 72 bits");
-    return uint72(value);
-  }
-}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ScaledBalanceTokenBase.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ScaledBalanceTokenBase.sol
index b09c05c..4d22caf 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ScaledBalanceTokenBase.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/ScaledBalanceTokenBase.sol
@@ -1,11 +1,11 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.10;
 
-import {SafeCast} from "./dependencies/SafeCast.sol";
-import {Errors} from "aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol";
-import {WadRayMath} from "aave-v3-core/contracts/protocol/libraries/math/WadRayMath.sol";
-import {IPool} from "aave-v3-core/contracts/interfaces/IPool.sol";
-import {IScaledBalanceToken} from "aave-v3-core/contracts/interfaces/IScaledBalanceToken.sol";
+import {SafeCast} from "openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {Errors} from "../../libraries/helpers/Errors.sol";
+import {WadRayMath} from "../../libraries/math/WadRayMath.sol";
+import {IPool} from "../../../interfaces/IPool.sol";
+import {IScaledBalanceToken} from "../../../interfaces/IScaledBalanceToken.sol";
 import {MintableIncentivizedERC20} from "./MintableIncentivizedERC20.sol";
 
 /**
@@ -23,9 +23,10 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param name The name of the token
    * @param symbol The symbol of the token
    * @param decimals The number of decimals of the token
+   * @param rewardsController The address of the rewards controller contract
    */
-  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals)
-    MintableIncentivizedERC20(pool, name, symbol, decimals)
+  constructor(IPool pool, string memory name, string memory symbol, uint8 decimals, address rewardsController)
+    MintableIncentivizedERC20(pool, name, symbol, decimals, rewardsController)
   {
     // Intentionally left blank
   }
@@ -60,7 +61,7 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    */
   function _mintScaled(address caller, address onBehalfOf, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidMintAmount());
 
     uint256 scaledBalance = super.balanceOf(onBehalfOf);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[onBehalfOf].additionalData);
@@ -84,10 +85,11 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
    * @param target The address that will receive the underlying, if any
    * @param amount The amount getting burned
    * @param index The variable debt index of the reserve
+   * @return `true` if the the new balance of the user is 0
    */
-  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal {
+  function _burnScaled(address user, address target, uint256 amount, uint256 index) internal returns (bool) {
     uint256 amountScaled = amount.rayDiv(index);
-    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);
+    require(amountScaled != 0, Errors.InvalidBurnAmount());
 
     uint256 scaledBalance = super.balanceOf(user);
     uint256 balanceIncrease = scaledBalance.rayMul(index) - scaledBalance.rayMul(_userState[user].additionalData);
@@ -105,40 +107,6 @@ abstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBa
       emit Transfer(user, address(0), amountToBurn);
       emit Burn(user, target, amountToBurn, balanceIncrease, index);
     }
-  }
-
-  /**
-   * @notice Implements the basic logic to transfer scaled balance tokens between two users
-   * @dev It emits a mint event with the interest accrued per user
-   * @param sender The source address
-   * @param recipient The destination address
-   * @param amount The amount getting transferred
-   * @param index The next liquidity index of the reserve
-   */
-  function _transfer(address sender, address recipient, uint256 amount, uint256 index) internal {
-    uint256 senderScaledBalance = super.balanceOf(sender);
-    uint256 senderBalanceIncrease =
-      senderScaledBalance.rayMul(index) - senderScaledBalance.rayMul(_userState[sender].additionalData);
-
-    uint256 recipientScaledBalance = super.balanceOf(recipient);
-    uint256 recipientBalanceIncrease =
-      recipientScaledBalance.rayMul(index) - recipientScaledBalance.rayMul(_userState[recipient].additionalData);
-
-    _userState[sender].additionalData = index.toUint128();
-    _userState[recipient].additionalData = index.toUint128();
-
-    super._transfer(sender, recipient, amount.rayDiv(index).toUint120());
-
-    if (senderBalanceIncrease > 0) {
-      emit Transfer(address(0), sender, senderBalanceIncrease);
-      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);
-    }
-
-    if (sender != recipient && recipientBalanceIncrease > 0) {
-      emit Transfer(address(0), recipient, recipientBalanceIncrease);
-      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);
-    }
-
-    emit Transfer(sender, recipient, amount);
+    return scaledBalance - amountScaled == 0;
   }
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ShortStrings.sol b/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ShortStrings.sol
deleted file mode 100644
index d27c389..0000000
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/ShortStrings.sol
+++ /dev/null
@@ -1,122 +0,0 @@
-// SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)
-
-pragma solidity ^0.8.19;
-
-import "./StorageSlot.sol";
-
-// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |
-// | length  | 0x                                                              BB |
-type ShortString is bytes32;
-
-/**
- * @dev This library provides functions to convert short memory strings
- * into a `ShortString` type that can be used as an immutable variable.
- *
- * Strings of arbitrary length can be optimized using this library if
- * they are short enough (up to 31 bytes) by packing them with their
- * length (1 byte) in a single EVM word (32 bytes). Additionally, a
- * fallback mechanism can be used for every other case.
- *
- * Usage example:
- *
- * ```solidity
- * contract Named {
- *     using ShortStrings for *;
- *
- *     ShortString private immutable _name;
- *     string private _nameFallback;
- *
- *     constructor(string memory contractName) {
- *         _name = contractName.toShortStringWithFallback(_nameFallback);
- *     }
- *
- *     function name() external view returns (string memory) {
- *         return _name.toStringWithFallback(_nameFallback);
- *     }
- * }
- * ```
- */
-library ShortStrings {
-  // Used as an identifier for strings longer than 31 bytes.
-  bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;
-
-  error StringTooLong(string str);
-  error InvalidShortString();
-
-  /**
-   * @dev Encode a string of at most 31 chars into a `ShortString`.
-   *
-   * This will trigger a `StringTooLong` error is the input string is too long.
-   */
-  function toShortString(string memory str) internal pure returns (ShortString) {
-    bytes memory bstr = bytes(str);
-    if (bstr.length > 31) {
-      revert StringTooLong(str);
-    }
-    return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
-  }
-
-  /**
-   * @dev Decode a `ShortString` back to a "normal" string.
-   */
-  function toString(ShortString sstr) internal pure returns (string memory) {
-    uint256 len = byteLength(sstr);
-    // using `new string(len)` would work locally but is not memory safe.
-    string memory str = new string(32);
-    /// @solidity memory-safe-assembly
-    assembly {
-      mstore(str, len)
-      mstore(add(str, 0x20), sstr)
-    }
-    return str;
-  }
-
-  /**
-   * @dev Return the length of a `ShortString`.
-   */
-  function byteLength(ShortString sstr) internal pure returns (uint256) {
-    uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
-    if (result > 31) {
-      revert InvalidShortString();
-    }
-    return result;
-  }
-
-  /**
-   * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.
-   */
-  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
-    if (bytes(value).length < 32) {
-      return toShortString(value);
-    } else {
-      StorageSlot.getStringSlot(store).value = value;
-      return ShortString.wrap(_FALLBACK_SENTINEL);
-    }
-  }
-
-  /**
-   * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
-   */
-  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
-    if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {
-      return toString(value);
-    } else {
-      return store;
-    }
-  }
-
-  /**
-   * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
-   *
-   * WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
-   * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
-   */
-  function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
-    if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {
-      return byteLength(value);
-    } else {
-      return bytes(store).length;
-    }
-  }
-}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SignedMath.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/SignedMath.sol
index 7356cd6..66096c3 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/SignedMath.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/SignedMath.sol
@@ -1,24 +1,42 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)
 
-pragma solidity ^0.8.19;
+pragma solidity ^0.8.20;
+
+import {SafeCast} from "./SafeCast.sol";
 
 /**
  * @dev Standard signed math utilities missing in the Solidity language.
  */
 library SignedMath {
+  /**
+   * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
+   *
+   * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
+   * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
+   * one branch when needed, making this function more expensive.
+   */
+  function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {
+    unchecked {
+      // branchless ternary works because:
+      // b ^ (a ^ b) == a
+      // b ^ 0 == b
+      return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));
+    }
+  }
+
   /**
    * @dev Returns the largest of two signed numbers.
    */
   function max(int256 a, int256 b) internal pure returns (int256) {
-    return a > b ? a : b;
+    return ternary(a > b, a, b);
   }
 
   /**
    * @dev Returns the smallest of two signed numbers.
    */
   function min(int256 a, int256 b) internal pure returns (int256) {
-    return a < b ? a : b;
+    return ternary(a < b, a, b);
   }
 
   /**
@@ -36,8 +54,15 @@ library SignedMath {
    */
   function abs(int256 n) internal pure returns (uint256) {
     unchecked {
-      // must be unchecked in order to support `n = type(int256).min`
-      return uint256(n >= 0 ? n : -n);
+      // Formula from the "Bit Twiddling Hacks" by Sean Eron Anderson.
+      // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,
+      // taking advantage of the most significant (or "sign" bit) in two's complement representation.
+      // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,
+      // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).
+      int256 mask = n >> 255;
+
+      // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.
+      return uint256((n + mask) ^ mask);
     }
   }
 }
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/StorageSlot.sol b/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/StorageSlot.sol
deleted file mode 100644
index 140533c..0000000
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/StorageSlot.sol
+++ /dev/null
@@ -1,138 +0,0 @@
-// SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)
-// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.
-
-pragma solidity ^0.8.19;
-
-/**
- * @dev Library for reading and writing primitive types to specific storage slots.
- *
- * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
- * This library helps with reading and writing to such slots without the need for inline assembly.
- *
- * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
- *
- * Example usage to set ERC1967 implementation slot:
- * ```solidity
- * contract ERC1967 {
- *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
- *
- *     function _getImplementation() internal view returns (address) {
- *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
- *     }
- *
- *     function _setImplementation(address newImplementation) internal {
- *         require(newImplementation.code.length > 0);
- *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
- *     }
- * }
- * ```
- *
- * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._
- * _Available since v4.9 for `string`, `bytes`._
- */
-library StorageSlot {
-  struct AddressSlot {
-    address value;
-  }
-
-  struct BooleanSlot {
-    bool value;
-  }
-
-  struct Bytes32Slot {
-    bytes32 value;
-  }
-
-  struct Uint256Slot {
-    uint256 value;
-  }
-
-  struct StringSlot {
-    string value;
-  }
-
-  struct BytesSlot {
-    bytes value;
-  }
-
-  /**
-   * @dev Returns an `AddressSlot` with member `value` located at `slot`.
-   */
-  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
-   */
-  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
-   */
-  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
-   */
-  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `StringSlot` with member `value` located at `slot`.
-   */
-  function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
-   */
-  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := store.slot
-    }
-  }
-
-  /**
-   * @dev Returns an `BytesSlot` with member `value` located at `slot`.
-   */
-  function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := slot
-    }
-  }
-
-  /**
-   * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
-   */
-  function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
-    /// @solidity memory-safe-assembly
-    assembly {
-      r.slot := store.slot
-    }
-  }
-}
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Strings.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Strings.sol
index 7974238..bd30f10 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/Strings.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/Strings.sol
@@ -1,17 +1,17 @@
 // SPDX-License-Identifier: MIT
-// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)
+// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)
 
-pragma solidity ^0.8.19;
+pragma solidity ^0.8.20;
 
-import "./math/Math.sol";
-import "./math/SignedMath.sol";
+import {Math} from "./math/Math.sol";
+import {SignedMath} from "./math/SignedMath.sol";
 
 /**
  * @dev String operations.
  */
 library Strings {
-  bytes16 private constant _SYMBOLS = "0123456789abcdef";
-  uint8 private constant _ADDRESS_LENGTH = 20;
+  bytes16 private constant HEX_DIGITS = "0123456789abcdef";
+  uint8 private constant ADDRESS_LENGTH = 20;
 
   /**
    * @dev The `value` string doesn't fit in the specified `length`.
@@ -26,15 +26,13 @@ library Strings {
       uint256 length = Math.log10(value) + 1;
       string memory buffer = new string(length);
       uint256 ptr;
-      /// @solidity memory-safe-assembly
-      assembly {
+      assembly ("memory-safe") {
         ptr := add(buffer, add(32, length))
       }
       while (true) {
         ptr--;
-        /// @solidity memory-safe-assembly
-        assembly {
-          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
+        assembly ("memory-safe") {
+          mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
         }
         value /= 10;
         if (value == 0) break;
@@ -68,7 +66,7 @@ library Strings {
     buffer[0] = "0";
     buffer[1] = "x";
     for (uint256 i = 2 * length + 1; i > 1; --i) {
-      buffer[i] = _SYMBOLS[localValue & 0xf];
+      buffer[i] = HEX_DIGITS[localValue & 0xf];
       localValue >>= 4;
     }
     if (localValue != 0) {
@@ -78,10 +76,35 @@ library Strings {
   }
 
   /**
-   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
+   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
+   * representation.
    */
   function toHexString(address addr) internal pure returns (string memory) {
-    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
+    return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
+  }
+
+  /**
+   * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal
+   * representation, according to EIP-55.
+   */
+  function toChecksumHexString(address addr) internal pure returns (string memory) {
+    bytes memory buffer = bytes(toHexString(addr));
+
+    // hash the hex part of buffer (skip length + 2 bytes, length 40)
+    uint256 hashValue;
+    assembly ("memory-safe") {
+      hashValue := shr(96, keccak256(add(buffer, 0x22), 40))
+    }
+
+    for (uint256 i = 41; i > 1; --i) {
+      // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)
+      if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {
+        // case shift by xoring with 0x20
+        buffer[i] ^= 0x20;
+      }
+      hashValue >>= 4;
+    }
+    return string(buffer);
   }
 
   /**
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/VersionedInitializable.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/VersionedInitializable.sol
index 3540fea..97b36b7 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/VersionedInitializable.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/VersionedInitializable.sol
@@ -14,6 +14,15 @@ pragma solidity ^0.8.10;
  * because this is not dealt with automatically as with constructors.
  */
 abstract contract VersionedInitializable {
+  /**
+   * @dev Initializes the implementation contract at the current revision.
+   * In practice this breaks further initialization of the implementation.
+   */
+  constructor() {
+    // break the initialize
+    lastInitializedRevision = getRevision();
+  }
+
   /**
    * @dev Indicates that the contract has been initialized.
    */
diff --git a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/WadRayMath.sol b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/WadRayMath.sol
index 0212ade..433dd94 100644
--- a/tmp/1_0x366AE337897223AEa70e3EBe1862219386f20593_flat/WadRayMath.sol
+++ b/tmp/1_0x17A8419928Aa92C74ae8b1dEC71534Cc2d671878_flat/WadRayMath.sol
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: MIT
+// SPDX-License-Identifier: BUSL-1.1
 pragma solidity ^0.8.0;
 
 /**
