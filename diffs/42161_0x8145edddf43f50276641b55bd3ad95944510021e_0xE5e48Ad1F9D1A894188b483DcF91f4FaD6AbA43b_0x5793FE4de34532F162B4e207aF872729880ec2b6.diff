diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorInputTypes.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ConfiguratorInputTypes.sol
index 7894871..58c8696 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorInputTypes.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ConfiguratorInputTypes.sol
@@ -5,11 +5,7 @@ library ConfiguratorInputTypes {
   struct InitReserveInput {
     address aTokenImpl;
     address variableDebtTokenImpl;
-    bool useVirtualBalance;
-    address interestRateStrategyAddress;
     address underlyingAsset;
-    address treasury;
-    address incentivesController;
     string aTokenName;
     string aTokenSymbol;
     string variableDebtTokenName;
@@ -20,8 +16,6 @@ library ConfiguratorInputTypes {
 
   struct UpdateATokenInput {
     address asset;
-    address treasury;
-    address incentivesController;
     string name;
     string symbol;
     address implementation;
@@ -30,7 +24,6 @@ library ConfiguratorInputTypes {
 
   struct UpdateDebtTokenInput {
     address asset;
-    address incentivesController;
     string name;
     string symbol;
     address implementation;
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ConfiguratorLogic.sol
index d7ca658..48dbd83 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ConfiguratorLogic.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ConfiguratorLogic.sol
@@ -2,6 +2,7 @@
 pragma solidity ^0.8.10;
 
 import {IPool} from "../../../interfaces/IPool.sol";
+import {IPoolConfigurator} from "../../../interfaces/IPoolConfigurator.sol";
 import {IInitializableAToken} from "../../../interfaces/IInitializableAToken.sol";
 import {IInitializableDebtToken} from "../../../interfaces/IInitializableDebtToken.sol";
 import {InitializableImmutableAdminUpgradeabilityProxy} from
@@ -21,17 +22,6 @@ import {IERC20Detailed} from "../../../dependencies/openzeppelin/contracts/IERC2
 library ConfiguratorLogic {
   using ReserveConfiguration for DataTypes.ReserveConfigurationMap;
 
-  // See `IPoolConfigurator` for descriptions
-  event ReserveInitialized(
-    address indexed asset,
-    address indexed aToken,
-    address stableDebtToken,
-    address variableDebtToken,
-    address interestRateStrategyAddress
-  );
-  event ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);
-  event VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);
-
   /**
    * @notice Initialize a reserve by creating and initializing aToken and variable debt token
    * @dev Emits the `ReserveInitialized` event
@@ -41,16 +31,14 @@ library ConfiguratorLogic {
   function executeInitReserve(IPool pool, ConfiguratorInputTypes.InitReserveInput calldata input) external {
     // It is an assumption that the asset listed is non-malicious, and the external call doesn't create re-entrancies
     uint8 underlyingAssetDecimals = IERC20Detailed(input.underlyingAsset).decimals();
-    require(underlyingAssetDecimals > 5, Errors.INVALID_DECIMALS);
+    require(underlyingAssetDecimals > 5, Errors.InvalidDecimals());
 
     address aTokenProxyAddress = _initTokenWithProxy(
       input.aTokenImpl,
       abi.encodeWithSelector(
         IInitializableAToken.initialize.selector,
         pool,
-        input.treasury,
         input.underlyingAsset,
-        input.incentivesController,
         underlyingAssetDecimals,
         input.aTokenName,
         input.aTokenSymbol,
@@ -64,7 +52,6 @@ library ConfiguratorLogic {
         IInitializableDebtToken.initialize.selector,
         pool,
         input.underlyingAsset,
-        input.incentivesController,
         underlyingAssetDecimals,
         input.variableDebtTokenName,
         input.variableDebtTokenSymbol,
@@ -72,9 +59,7 @@ library ConfiguratorLogic {
       )
     );
 
-    pool.initReserve(
-      input.underlyingAsset, aTokenProxyAddress, variableDebtTokenProxyAddress, input.interestRateStrategyAddress
-    );
+    pool.initReserve(input.underlyingAsset, aTokenProxyAddress, variableDebtTokenProxyAddress);
 
     DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes.ReserveConfigurationMap(0);
 
@@ -83,20 +68,17 @@ library ConfiguratorLogic {
     currentConfig.setActive(true);
     currentConfig.setPaused(false);
     currentConfig.setFrozen(false);
-    currentConfig.setVirtualAccActive(input.useVirtualBalance);
+    currentConfig.setVirtualAccActive();
 
     pool.setConfiguration(input.underlyingAsset, currentConfig);
 
-    IReserveInterestRateStrategy(input.interestRateStrategyAddress).setInterestRateParams(
+    address interestRateStrategyAddress = pool.RESERVE_INTEREST_RATE_STRATEGY();
+    IReserveInterestRateStrategy(interestRateStrategyAddress).setInterestRateParams(
       input.underlyingAsset, input.interestRateData
     );
 
-    emit ReserveInitialized(
-      input.underlyingAsset,
-      aTokenProxyAddress,
-      address(0),
-      variableDebtTokenProxyAddress,
-      input.interestRateStrategyAddress
+    emit IPoolConfigurator.ReserveInitialized(
+      input.underlyingAsset, aTokenProxyAddress, address(0), variableDebtTokenProxyAddress, interestRateStrategyAddress
     );
   }
 
@@ -114,9 +96,7 @@ library ConfiguratorLogic {
     bytes memory encodedCall = abi.encodeWithSelector(
       IInitializableAToken.initialize.selector,
       cachedPool,
-      input.treasury,
       input.asset,
-      input.incentivesController,
       decimals,
       input.name,
       input.symbol,
@@ -125,7 +105,7 @@ library ConfiguratorLogic {
 
     _upgradeTokenImplementation(aTokenAddress, input.implementation, encodedCall);
 
-    emit ATokenUpgraded(input.asset, aTokenAddress, input.implementation);
+    emit IPoolConfigurator.ATokenUpgraded(input.asset, aTokenAddress, input.implementation);
   }
 
   /**
@@ -145,7 +125,6 @@ library ConfiguratorLogic {
       IInitializableDebtToken.initialize.selector,
       cachedPool,
       input.asset,
-      input.incentivesController,
       decimals,
       input.name,
       input.symbol,
@@ -154,7 +133,7 @@ library ConfiguratorLogic {
 
     _upgradeTokenImplementation(variableDebtTokenAddress, input.implementation, encodedCall);
 
-    emit VariableDebtTokenUpgraded(input.asset, variableDebtTokenAddress, input.implementation);
+    emit IPoolConfigurator.VariableDebtTokenUpgraded(input.asset, variableDebtTokenAddress, input.implementation);
   }
 
   /**
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/DataTypes.sol
index 3e28687..3debcd4 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/DataTypes.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/DataTypes.sol
@@ -29,11 +29,11 @@ library DataTypes {
     address stableDebtTokenAddress;
     //variableDebtToken address
     address variableDebtTokenAddress;
-    //address of the interest rate strategy
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
     address interestRateStrategyAddress;
     //the current treasury balance, scaled
     uint128 accruedToTreasury;
-    //the outstanding unbacked aTokens minted through the bridging feature
+    // DEPRECATED on v3.4.0
     uint128 unbacked;
     //the outstanding debt borrowed against this asset in isolation mode
     uint128 isolationModeTotalDebt;
@@ -65,16 +65,17 @@ library DataTypes {
     address __deprecatedStableDebtTokenAddress;
     //variableDebtToken address
     address variableDebtTokenAddress;
-    //address of the interest rate strategy
-    address interestRateStrategyAddress;
+    // DEPRECATED on v3.4.0, should use the `RESERVE_INTEREST_RATE_STRATEGY` variable from the Pool contract
+    address __deprecatedInterestRateStrategyAddress;
     //the current treasury balance, scaled
     uint128 accruedToTreasury;
-    //the outstanding unbacked aTokens minted through the bridging feature
-    uint128 unbacked;
+    // In aave 3.3.0 this storage slot contained the `unbacked`
+    uint128 virtualUnderlyingBalance;
     //the outstanding debt borrowed against this asset in isolation mode
     uint128 isolationModeTotalDebt;
     //the amount of underlying accounted for by the protocol
-    uint128 virtualUnderlyingBalance;
+    // DEPRECATED on v3.4.0. Moved into the same slot as accruedToTreasury for optimized storage access.
+    uint128 __deprecatedVirtualUnderlyingBalance;
   }
 
   struct ReserveConfigurationMap {
@@ -95,9 +96,9 @@ library DataTypes {
     //bit 116-151: supply cap in whole tokens, supplyCap == 0 => no cap
     //bit 152-167: liquidation protocol fee
     //bit 168-175: DEPRECATED: eMode category
-    //bit 176-211: unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled
+    //bit 176-211: DEPRECATED: unbacked mint cap
     //bit 212-251: debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals
-    //bit 252: virtual accounting is enabled for the reserve
+    //bit 252: DEPRECATED: virtual accounting is enabled for the reserve
     //bit 253-255 unused
     uint256 data;
   }
@@ -168,19 +169,22 @@ library DataTypes {
   }
 
   struct ExecuteLiquidationCallParams {
-    uint256 reservesCount;
+    address liquidator;
     uint256 debtToCover;
     address collateralAsset;
     address debtAsset;
-    address user;
+    address borrower;
     bool receiveAToken;
     address priceOracle;
-    uint8 userEModeCategory;
+    uint8 borrowerEModeCategory;
     address priceOracleSentinel;
+    address interestRateStrategyAddress;
   }
 
   struct ExecuteSupplyParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address onBehalfOf;
     uint16 referralCode;
@@ -190,11 +194,11 @@ library DataTypes {
     address asset;
     address user;
     address onBehalfOf;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     uint16 referralCode;
     bool releaseUnderlying;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
@@ -202,6 +206,8 @@ library DataTypes {
 
   struct ExecuteRepayParams {
     address asset;
+    address user;
+    address interestRateStrategyAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
     address onBehalfOf;
@@ -209,25 +215,22 @@ library DataTypes {
   }
 
   struct ExecuteWithdrawParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     address to;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
   }
 
   struct ExecuteEliminateDeficitParams {
+    address user;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
   }
 
-  struct ExecuteSetUserEModeParams {
-    uint256 reservesCount;
-    address oracle;
-    uint8 categoryId;
-  }
-
   struct FinalizeTransferParams {
     address asset;
     address from;
@@ -235,22 +238,21 @@ library DataTypes {
     uint256 amount;
     uint256 balanceFromBefore;
     uint256 balanceToBefore;
-    uint256 reservesCount;
     address oracle;
     uint8 fromEModeCategory;
   }
 
   struct FlashloanParams {
+    address user;
     address receiverAddress;
     address[] assets;
     uint256[] amounts;
     uint256[] interestRateModes;
+    address interestRateStrategyAddress;
     address onBehalfOf;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
-    uint256 reservesCount;
+    uint256 flashLoanPremium;
     address addressesProvider;
     address pool;
     uint8 userEModeCategory;
@@ -258,27 +260,28 @@ library DataTypes {
   }
 
   struct FlashloanSimpleParams {
+    address user;
     address receiverAddress;
     address asset;
+    address interestRateStrategyAddress;
     uint256 amount;
     bytes params;
     uint16 referralCode;
-    uint256 flashLoanPremiumToProtocol;
-    uint256 flashLoanPremiumTotal;
+    uint256 flashLoanPremium;
   }
 
   struct FlashLoanRepaymentParams {
+    address user;
     uint256 amount;
     uint256 totalPremium;
-    uint256 flashLoanPremiumToProtocol;
     address asset;
+    address interestRateStrategyAddress;
     address receiverAddress;
     uint16 referralCode;
   }
 
   struct CalculateUserAccountDataParams {
     UserConfigurationMap userConfig;
-    uint256 reservesCount;
     address user;
     address oracle;
     uint8 userEModeCategory;
@@ -291,13 +294,9 @@ library DataTypes {
     address userAddress;
     uint256 amount;
     InterestRateMode interestRateMode;
-    uint256 reservesCount;
     address oracle;
     uint8 userEModeCategory;
     address priceOracleSentinel;
-    bool isolationModeActive;
-    address isolationModeCollateralAddress;
-    uint256 isolationModeDebtCeiling;
   }
 
   struct ValidateLiquidationCallParams {
@@ -305,6 +304,8 @@ library DataTypes {
     uint256 totalDebt;
     uint256 healthFactor;
     address priceOracleSentinel;
+    address borrower;
+    address liquidator;
   }
 
   struct CalculateInterestRatesParams {
@@ -314,6 +315,7 @@ library DataTypes {
     uint256 totalDebt;
     uint256 reserveFactor;
     address reserve;
+    // @notice DEPRECATED in 3.4, but kept for backwards compatibility
     bool usingVirtualBalance;
     uint256 virtualUnderlyingBalance;
   }
@@ -322,7 +324,6 @@ library DataTypes {
     address asset;
     address aTokenAddress;
     address variableDebtAddress;
-    address interestRateStrategyAddress;
     uint16 reservesCount;
     uint16 maxNumberReserves;
   }
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/EModeConfiguration.sol
index be44430..b883b99 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/EModeConfiguration.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/EModeConfiguration.sol
@@ -20,7 +20,7 @@ library EModeConfiguration {
    */
   function setReserveBitmapBit(uint128 bitmap, uint256 reserveIndex, bool enabled) internal pure returns (uint128) {
     unchecked {
-      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
+      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.InvalidReserveIndex());
       uint128 bit = uint128(1 << reserveIndex);
       if (enabled) {
         return bitmap | bit;
@@ -38,7 +38,7 @@ library EModeConfiguration {
    */
   function isReserveEnabledOnBitmap(uint128 bitmap, uint256 reserveIndex) internal pure returns (bool) {
     unchecked {
-      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);
+      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.InvalidReserveIndex());
       return (bitmap >> reserveIndex) & 1 != 0;
     }
   }
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/Errors.sol
index 619ebd0..6c493d8 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/Errors.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/Errors.sol
@@ -7,101 +7,93 @@ pragma solidity ^0.8.0;
  * @notice Defines the error messages emitted by the different contracts of the Aave protocol
  */
 library Errors {
-  string public constant CALLER_NOT_POOL_ADMIN = "1"; // 'The caller of the function is not a pool admin'
-  string public constant CALLER_NOT_EMERGENCY_ADMIN = "2"; // 'The caller of the function is not an emergency admin'
-  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = "3"; // 'The caller of the function is not a pool or emergency admin'
-  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = "4"; // 'The caller of the function is not a risk or pool admin'
-  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = "5"; // 'The caller of the function is not an asset listing or pool admin'
-  string public constant CALLER_NOT_BRIDGE = "6"; // 'The caller of the function is not a bridge'
-  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = "7"; // 'Pool addresses provider is not registered'
-  string public constant INVALID_ADDRESSES_PROVIDER_ID = "8"; // 'Invalid id for the pool addresses provider'
-  string public constant NOT_CONTRACT = "9"; // 'Address is not a contract'
-  string public constant CALLER_NOT_POOL_CONFIGURATOR = "10"; // 'The caller of the function is not the pool configurator'
-  string public constant CALLER_NOT_ATOKEN = "11"; // 'The caller of the function is not an AToken'
-  string public constant INVALID_ADDRESSES_PROVIDER = "12"; // 'The address of the pool addresses provider is invalid'
-  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = "13"; // 'Invalid return value of the flashloan executor function'
-  string public constant RESERVE_ALREADY_ADDED = "14"; // 'Reserve has already been added to reserve list'
-  string public constant NO_MORE_RESERVES_ALLOWED = "15"; // 'Maximum amount of reserves in the pool reached'
-  string public constant EMODE_CATEGORY_RESERVED = "16"; // 'Zero eMode category is reserved for volatile heterogeneous assets'
-  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = "17"; // 'Invalid eMode category assignment to asset'
-  string public constant RESERVE_LIQUIDITY_NOT_ZERO = "18"; // 'The liquidity of the reserve needs to be 0'
-  string public constant FLASHLOAN_PREMIUM_INVALID = "19"; // 'Invalid flashloan premium'
-  string public constant INVALID_RESERVE_PARAMS = "20"; // 'Invalid risk parameters for the reserve'
-  string public constant INVALID_EMODE_CATEGORY_PARAMS = "21"; // 'Invalid risk parameters for the eMode category'
-  string public constant BRIDGE_PROTOCOL_FEE_INVALID = "22"; // 'Invalid bridge protocol fee'
-  string public constant CALLER_MUST_BE_POOL = "23"; // 'The caller of this function must be a pool'
-  string public constant INVALID_MINT_AMOUNT = "24"; // 'Invalid amount to mint'
-  string public constant INVALID_BURN_AMOUNT = "25"; // 'Invalid amount to burn'
-  string public constant INVALID_AMOUNT = "26"; // 'Amount must be greater than 0'
-  string public constant RESERVE_INACTIVE = "27"; // 'Action requires an active reserve'
-  string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
-  string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
-  string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
-  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
-  string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
-  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = "35"; // 'Health factor is lesser than the liquidation threshold'
-  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
-  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-  string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
-  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-  string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
-  string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
-  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
-  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = "45"; // 'Health factor is not below the threshold'
-  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = "46"; // 'The collateral chosen cannot be liquidated'
-  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = "47"; // 'User did not borrow the specified currency'
-  string public constant INCONSISTENT_FLASHLOAN_PARAMS = "49"; // 'Inconsistent flashloan parameters'
-  string public constant BORROW_CAP_EXCEEDED = "50"; // 'Borrow cap is exceeded'
-  string public constant SUPPLY_CAP_EXCEEDED = "51"; // 'Supply cap is exceeded'
-  string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
-  string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
-  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
-  string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
-  string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
-  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = "59"; // 'Price oracle sentinel validation failed'
-  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = "60"; // 'Asset is not borrowable in isolation mode'
-  string public constant RESERVE_ALREADY_INITIALIZED = "61"; // 'Reserve has already been initialized'
-  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = "62"; // 'User is in isolation mode or ltv is zero'
-  string public constant INVALID_LTV = "63"; // 'Invalid ltv parameter for the reserve'
-  string public constant INVALID_LIQ_THRESHOLD = "64"; // 'Invalid liquidity threshold parameter for the reserve'
-  string public constant INVALID_LIQ_BONUS = "65"; // 'Invalid liquidity bonus parameter for the reserve'
-  string public constant INVALID_DECIMALS = "66"; // 'Invalid decimals parameter of the underlying asset of the reserve'
-  string public constant INVALID_RESERVE_FACTOR = "67"; // 'Invalid reserve factor parameter for the reserve'
-  string public constant INVALID_BORROW_CAP = "68"; // 'Invalid borrow cap for the reserve'
-  string public constant INVALID_SUPPLY_CAP = "69"; // 'Invalid supply cap for the reserve'
-  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = "70"; // 'Invalid liquidation protocol fee for the reserve'
-  string public constant INVALID_EMODE_CATEGORY = "71"; // 'Invalid eMode category for the reserve'
-  string public constant INVALID_UNBACKED_MINT_CAP = "72"; // 'Invalid unbacked mint cap for the reserve'
-  string public constant INVALID_DEBT_CEILING = "73"; // 'Invalid debt ceiling for the reserve
-  string public constant INVALID_RESERVE_INDEX = "74"; // 'Invalid reserve index'
-  string public constant ACL_ADMIN_CANNOT_BE_ZERO = "75"; // 'ACL admin cannot be set to the zero address'
-  string public constant INCONSISTENT_PARAMS_LENGTH = "76"; // 'Array parameters that should be equal length are not'
-  string public constant ZERO_ADDRESS_NOT_VALID = "77"; // 'Zero address not valid'
-  string public constant INVALID_EXPIRATION = "78"; // 'Invalid expiration'
-  string public constant INVALID_SIGNATURE = "79"; // 'Invalid signature'
-  string public constant OPERATION_NOT_SUPPORTED = "80"; // 'Operation not supported'
-  string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
-  string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
-  string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-  string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
-  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
-  string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-  string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
-  string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
-  string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
-  string public constant INVALID_MAX_RATE = "92"; // The expect maximum borrow rate is invalid
-  string public constant WITHDRAW_TO_ATOKEN = "93"; // Withdrawing to the aToken is not allowed
-  string public constant SUPPLY_TO_ATOKEN = "94"; // Supplying to the aToken is not allowed
-  string public constant SLOPE_2_MUST_BE_GTE_SLOPE_1 = "95"; // Variable interest rate slope 2 can not be lower than slope 1
-  string public constant CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN = "96"; // 'The caller of the function is not a risk, pool or emergency admin'
-  string public constant LIQUIDATION_GRACE_SENTINEL_CHECK_FAILED = "97"; // 'Liquidation grace sentinel validation failed'
-  string public constant INVALID_GRACE_PERIOD = "98"; // Grace period above a valid range
-  string public constant INVALID_FREEZE_STATE = "99"; // Reserve is already in the passed freeze state
-  string public constant NOT_BORROWABLE_IN_EMODE = "100"; // Asset not borrowable in eMode
-  string public constant CALLER_NOT_UMBRELLA = "101"; // The caller of the function is not the umbrella contract
-  string public constant RESERVE_NOT_IN_DEFICIT = "102"; // The reserve is not in deficit
-  string public constant MUST_NOT_LEAVE_DUST = "103"; // Below a certain threshold liquidators need to take the full position
-  string public constant USER_CANNOT_HAVE_DEBT = "104"; // Thrown when a user tries to interact with a method that requires a position without debt
+  error CallerNotPoolAdmin(); // 'The caller of the function is not a pool admin'
+  error CallerNotPoolOrEmergencyAdmin(); // 'The caller of the function is not a pool or emergency admin'
+  error CallerNotRiskOrPoolAdmin(); // 'The caller of the function is not a risk or pool admin'
+  error CallerNotAssetListingOrPoolAdmin(); // 'The caller of the function is not an asset listing or pool admin'
+  error AddressesProviderNotRegistered(); // 'Pool addresses provider is not registered'
+  error InvalidAddressesProviderId(); // 'Invalid id for the pool addresses provider'
+  error NotContract(); // 'Address is not a contract'
+  error CallerNotPoolConfigurator(); // 'The caller of the function is not the pool configurator'
+  error CallerNotAToken(); // 'The caller of the function is not an AToken'
+  error InvalidAddressesProvider(); // 'The address of the pool addresses provider is invalid'
+  error InvalidFlashloanExecutorReturn(); // 'Invalid return value of the flashloan executor function'
+  error ReserveAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error NoMoreReservesAllowed(); // 'Maximum amount of reserves in the pool reached'
+  error EModeCategoryReserved(); // 'Zero eMode category is reserved for volatile heterogeneous assets'
+  error ReserveLiquidityNotZero(); // 'The liquidity of the reserve needs to be 0'
+  error FlashloanPremiumInvalid(); // 'Invalid flashloan premium'
+  error InvalidReserveParams(); // 'Invalid risk parameters for the reserve'
+  error InvalidEmodeCategoryParams(); // 'Invalid risk parameters for the eMode category'
+  error CallerMustBePool(); // 'The caller of this function must be a pool'
+  error InvalidMintAmount(); // 'Invalid amount to mint'
+  error InvalidBurnAmount(); // 'Invalid amount to burn'
+  error InvalidAmount(); // 'Amount must be greater than 0'
+  error ReserveInactive(); // 'Action requires an active reserve'
+  error ReserveFrozen(); // 'Action cannot be performed because the reserve is frozen'
+  error ReservePaused(); // 'Action cannot be performed because the reserve is paused'
+  error BorrowingNotEnabled(); // 'Borrowing is not enabled'
+  error NotEnoughAvailableUserBalance(); // 'User cannot withdraw more than the available balance'
+  error InvalidInterestRateModeSelected(); // 'Invalid interest rate mode selected'
+  error CollateralBalanceIsZero(); // 'The collateral balance is 0'
+  error HealthFactorLowerThanLiquidationThreshold(); // 'Health factor is below the liquidation threshold'
+  error CollateralCannotCoverNewBorrow(); // 'There is not enough collateral to cover a new borrow'
+  error NoDebtOfSelectedType(); // 'For repayment of a specific type of debt, the user needs to have debt that type'
+  error NoExplicitAmountToRepayOnBehalf(); // 'To repay on behalf of a user an explicit amount to repay is needed'
+  error UnderlyingBalanceZero(); // 'The underlying balance needs to be greater than 0'
+  error HealthFactorNotBelowThreshold(); // 'Health factor is not below the threshold'
+  error CollateralCannotBeLiquidated(); // 'The collateral chosen cannot be liquidated'
+  error SpecifiedCurrencyNotBorrowedByUser(); // 'User did not borrow the specified currency'
+  error InconsistentFlashloanParams(); // 'Inconsistent flashloan parameters'
+  error BorrowCapExceeded(); // 'Borrow cap is exceeded'
+  error SupplyCapExceeded(); // 'Supply cap is exceeded'
+  error DebtCeilingExceeded(); // 'Debt ceiling is exceeded'
+  error UnderlyingClaimableRightsNotZero(); // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
+  error VariableDebtSupplyNotZero(); // 'Variable debt supply is not zero'
+  error LtvValidationFailed(); // 'Ltv validation failed'
+  error InconsistentEModeCategory(); // 'Inconsistent eMode category'
+  error PriceOracleSentinelCheckFailed(); // 'Price oracle sentinel validation failed'
+  error AssetNotBorrowableInIsolation(); // 'Asset is not borrowable in isolation mode'
+  error ReserveAlreadyInitialized(); // 'Reserve has already been initialized'
+  error UserInIsolationModeOrLtvZero(); // 'User is in isolation mode or ltv is zero'
+  error InvalidLtv(); // 'Invalid ltv parameter for the reserve'
+  error InvalidLiquidationThreshold(); // 'Invalid liquidity threshold parameter for the reserve'
+  error InvalidLiquidationBonus(); // 'Invalid liquidity bonus parameter for the reserve'
+  error InvalidDecimals(); // 'Invalid decimals parameter of the underlying asset of the reserve'
+  error InvalidReserveFactor(); // 'Invalid reserve factor parameter for the reserve'
+  error InvalidBorrowCap(); // 'Invalid borrow cap for the reserve'
+  error InvalidSupplyCap(); // 'Invalid supply cap for the reserve'
+  error InvalidLiquidationProtocolFee(); // 'Invalid liquidation protocol fee for the reserve'
+  error InvalidDebtCeiling(); // 'Invalid debt ceiling for the reserve'
+  error InvalidReserveIndex(); // 'Invalid reserve index'
+  error AclAdminCannotBeZero(); // 'ACL admin cannot be set to the zero address'
+  error InconsistentParamsLength(); // 'Array parameters that should be equal length are not'
+  error ZeroAddressNotValid(); // 'Zero address not valid'
+  error InvalidExpiration(); // 'Invalid expiration'
+  error InvalidSignature(); // 'Invalid signature'
+  error OperationNotSupported(); // 'Operation not supported'
+  error DebtCeilingNotZero(); // 'Debt ceiling is not zero'
+  error AssetNotListed(); // 'Asset is not listed'
+  error InvalidOptimalUsageRatio(); // 'Invalid optimal usage ratio'
+  error UnderlyingCannotBeRescued(); // 'The underlying asset cannot be rescued'
+  error AddressesProviderAlreadyAdded(); // 'Reserve has already been added to reserve list'
+  error PoolAddressesDoNotMatch(); // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
+  error SiloedBorrowingViolation(); // 'User is trying to borrow multiple assets including a siloed one'
+  error ReserveDebtNotZero(); // the total debt of the reserve needs to be 0
+  error FlashloanDisabled(); // FlashLoaning for this asset is disabled
+  error InvalidMaxRate(); // The expect maximum borrow rate is invalid
+  error WithdrawToAToken(); // Withdrawing to the aToken is not allowed
+  error SupplyToAToken(); // Supplying to the aToken is not allowed
+  error Slope2MustBeGteSlope1(); // Variable interest rate slope 2 can not be lower than slope 1
+  error CallerNotRiskOrPoolOrEmergencyAdmin(); // 'The caller of the function is not a risk, pool or emergency admin'
+  error LiquidationGraceSentinelCheckFailed(); // 'Liquidation grace sentinel validation failed'
+  error InvalidGracePeriod(); // Grace period above a valid range
+  error InvalidFreezeState(); // Reserve is already in the passed freeze state
+  error NotBorrowableInEMode(); // Asset not borrowable in eMode
+  error CallerNotUmbrella(); // The caller of the function is not the umbrella contract
+  error ReserveNotInDeficit(); // The reserve is not in deficit
+  error MustNotLeaveDust(); // Below a certain threshold liquidators need to take the full position
+  error UserCannotHaveDebt(); // Thrown when a user tries to interact with a method that requires a position without debt
+  error SelfLiquidation(); // Thrown when a user tries to liquidate themselves
+  error CallerNotPositionManager(); // Thrown when the caller has not been enabled as a position manager of the on-behalf-of user
 }
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IInitializableAToken.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IInitializableAToken.sol
index 5967614..6773248 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IInitializableAToken.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IInitializableAToken.sol
@@ -35,9 +35,7 @@ interface IInitializableAToken {
   /**
    * @notice Initializes the aToken
    * @param pool The pool contract that is initializing this contract
-   * @param treasury The address of the Aave treasury, receiving the fees on this aToken
    * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
    * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's
    * @param aTokenName The name of the aToken
    * @param aTokenSymbol The symbol of the aToken
@@ -45,9 +43,7 @@ interface IInitializableAToken {
    */
   function initialize(
     IPool pool,
-    address treasury,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 aTokenDecimals,
     string calldata aTokenName,
     string calldata aTokenSymbol,
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IInitializableDebtToken.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IInitializableDebtToken.sol
index 1413dcb..283c3a9 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IInitializableDebtToken.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IInitializableDebtToken.sol
@@ -34,7 +34,6 @@ interface IInitializableDebtToken {
    * @notice Initializes the debt token.
    * @param pool The pool contract that is initializing this contract
    * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)
-   * @param incentivesController The smart contract managing potential incentives distribution
    * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's
    * @param debtTokenName The name of the token
    * @param debtTokenSymbol The symbol of the token
@@ -43,7 +42,6 @@ interface IInitializableDebtToken {
   function initialize(
     IPool pool,
     address underlyingAsset,
-    IAaveIncentivesController incentivesController,
     uint8 debtTokenDecimals,
     string memory debtTokenName,
     string memory debtTokenSymbol,
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPool.sol
index 68c1799..38aad59 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPool.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPool.sol
@@ -10,27 +10,6 @@ import {DataTypes} from "../protocol/libraries/types/DataTypes.sol";
  * @notice Defines the basic interface for an Aave Pool.
  */
 interface IPool {
-  /**
-   * @dev Emitted on mintUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param user The address initiating the supply
-   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens
-   * @param amount The amount of supplied assets
-   * @param referralCode The referral code used
-   */
-  event MintUnbacked(
-    address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode
-  );
-
-  /**
-   * @dev Emitted on backUnbacked()
-   * @param reserve The address of the underlying asset of the reserve
-   * @param backer The address paying for the backing
-   * @param amount The amount added as backing
-   * @param fee The amount paid in fees
-   */
-  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);
-
   /**
    * @dev Emitted on supply()
    * @param reserve The address of the underlying asset of the reserve
@@ -195,23 +174,18 @@ interface IPool {
   event DeficitCreated(address indexed user, address indexed debtAsset, uint256 amountCreated);
 
   /**
-   * @notice Mints an `amount` of aTokens to the `onBehalfOf`
-   * @param asset The address of the underlying asset to mint
-   * @param amount The amount to mint
-   * @param onBehalfOf The address that will receive the aTokens
-   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.
-   *   0 if the action is executed directly by the user, without any middle-man
+   * @dev Emitted when a position manager is approved by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function mintUnbacked(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
+  event PositionManagerApproved(address indexed user, address indexed positionManager);
 
   /**
-   * @notice Back the current unbacked underlying with `amount` and pay `fee`.
-   * @param asset The address of the underlying asset to back
-   * @param amount The amount to back
-   * @param fee The amount paid in fees
-   * @return The backed amount
+   * @dev Emitted when a position manager is revoked by the user.
+   * @param user The user address
+   * @param positionManager The address of the position manager
    */
-  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);
+  event PositionManagerRevoked(address indexed user, address indexed positionManager);
 
   /**
    * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.
@@ -352,7 +326,7 @@ interface IPool {
    *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk
    * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation
    * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation
-   * @param user The address of the borrower getting liquidated
+   * @param borrower The address of the borrower getting liquidated
    * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover
    * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants
    * to receive the underlying collateral asset directly
@@ -360,7 +334,7 @@ interface IPool {
   function liquidationCall(
     address collateralAsset,
     address debtAsset,
-    address user,
+    address borrower,
     uint256 debtToCover,
     bool receiveAToken
   ) external;
@@ -435,20 +409,13 @@ interface IPool {
     );
 
   /**
-   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an
-   * interest rate strategy
+   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens
    * @dev Only callable by the PoolConfigurator contract
    * @param asset The address of the underlying asset of the reserve
    * @param aTokenAddress The address of the aToken that will be assigned to the reserve
    * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve
-   * @param interestRateStrategyAddress The address of the interest rate strategy contract
    */
-  function initReserve(
-    address asset,
-    address aTokenAddress,
-    address variableDebtAddress,
-    address interestRateStrategyAddress
-  ) external;
+  function initReserve(address asset, address aTokenAddress, address variableDebtAddress) external;
 
   /**
    * @notice Drop a reserve
@@ -458,14 +425,6 @@ interface IPool {
    */
   function dropReserve(address asset) external;
 
-  /**
-   * @notice Updates the address of the interest rate strategy contract
-   * @dev Only callable by the PoolConfigurator contract
-   * @param asset The address of the underlying asset of the reserve
-   * @param rateStrategyAddress The address of the interest rate strategy contract
-   */
-  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;
-
   /**
    * @notice Accumulates interest to all indexes of the reserve
    * @dev Only callable by the PoolConfigurator contract
@@ -586,22 +545,18 @@ interface IPool {
   function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
 
   /**
-   * @notice Updates the protocol fee on the bridging
-   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury
+   * @notice Returns the ReserveInterestRateStrategy connected to all the reserves
+   * @return The address of the ReserveInterestRateStrategy contract
    */
-  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;
+  function RESERVE_INTEREST_RATE_STRATEGY() external view returns (address);
 
   /**
-   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:
-   * - A part is sent to aToken holders as extra, one time accumulated interest
-   * - A part is collected by the protocol treasury
-   * @dev The total premium is calculated on the total borrowed amount
-   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`
+   * @notice Updates flash loan premium. All this premium is collected by the protocol treasury.
+   * @dev The premium is calculated on the total borrowed amount
    * @dev Only callable by the PoolConfigurator contract
-   * @param flashLoanPremiumTotal The total premium, expressed in bps
-   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps
+   * @param flashLoanPremium The flash loan premium, expressed in bps
    */
-  function updateFlashloanPremiums(uint128 flashLoanPremiumTotal, uint128 flashLoanPremiumToProtocol) external;
+  function updateFlashloanPremium(uint128 flashLoanPremium) external;
 
   /**
    * @notice Configures a new or alters an existing collateral configuration of an eMode.
@@ -701,19 +656,16 @@ interface IPool {
   function getLiquidationGracePeriod(address asset) external view returns (uint40);
 
   /**
-   * @notice Returns the total fee on flash loans
+   * @notice Returns the total fee on flash loans.
+   * @dev From v3.4 all flashloan fees will be send to the treasury.
    * @return The total fee on flashloans
    */
   function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);
 
-  /**
-   * @notice Returns the part of the bridge fees sent to protocol
-   * @return The bridge fee sent to the protocol treasury
-   */
-  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);
-
   /**
    * @notice Returns the part of the flashloan fees sent to protocol
+   * @dev From v3.4 all flashloan fees will be send to the treasury and this value
+   *      is always 100_00.
    * @return The flashloan fee sent to the protocol treasury
    */
   function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);
@@ -753,15 +705,51 @@ interface IPool {
   function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;
 
   /**
-   * @notice It covers the deficit of a specified reserve by burning:
-   * - the equivalent aToken `amount` for assets with virtual accounting enabled
-   * - the equivalent `amount` of underlying for assets with virtual accounting disabled (e.g. GHO)
+   * @notice It covers the deficit of a specified reserve by burning the equivalent aToken `amount` for assets
    * @dev The deficit of a reserve can occur due to situations where borrowed assets are not repaid, leading to bad debt.
    * @param asset The address of the underlying asset to cover the deficit.
-   * @param amount The amount to be covered, in aToken or underlying on non-virtual accounted assets
+   * @param amount The amount to be covered, in aToken
    */
   function eliminateReserveDeficit(address asset, uint256 amount) external;
 
+  /**
+   * @notice Approves or disapproves a position manager. This position manager will be able
+   * to call the `setUserUseReserveAsCollateralOnBehalfOf` and the
+   * `setUserEModeOnBehalfOf` function on behalf of the user.
+   * @param positionManager The address of the position manager
+   * @param approve True if the position manager should be approved, false otherwise
+   */
+  function approvePositionManager(address positionManager, bool approve) external;
+
+  /**
+   * @notice Renounces a position manager role for a given user.
+   * @param user The address of the user
+   */
+  function renouncePositionManagerRole(address user) external;
+
+  /**
+   * @notice Sets the use as collateral flag for the user on the specific reserve on behalf of the user.
+   * @param asset The address of the underlying asset of the reserve
+   * @param useAsCollateral True if the user wants to use the reserve as collateral, false otherwise
+   * @param onBehalfOf The address of the user
+   */
+  function setUserUseReserveAsCollateralOnBehalfOf(address asset, bool useAsCollateral, address onBehalfOf) external;
+
+  /**
+   * @notice Sets the eMode category for the user on the specific reserve on behalf of the user.
+   * @param categoryId The id of the category
+   * @param onBehalfOf The address of the user
+   */
+  function setUserEModeOnBehalfOf(uint8 categoryId, address onBehalfOf) external;
+
+  /*
+   * @notice Returns true if the `positionManager` address is approved to use the position manager role on behalf of the user.
+   * @param user The address of the user
+   * @param positionManager The address of the position manager
+   * @return True if the user is approved to use the position manager, false otherwise
+   */
+  function isApprovedPositionManager(address user, address positionManager) external view returns (bool);
+
   /**
    * @notice Returns the current deficit of a reserve.
    * @param asset The address of the underlying asset of the reserve
@@ -793,11 +781,6 @@ interface IPool {
    */
   function getBorrowLogic() external view returns (address);
 
-  /**
-   * @notice Gets the address of the external BridgeLogic
-   */
-  function getBridgeLogic() external view returns (address);
-
   /**
    * @notice Gets the address of the external EModeLogic
    */
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolConfigurator.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPoolConfigurator.sol
index a234edb..0a94778 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolConfigurator.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPoolConfigurator.sol
@@ -130,14 +130,6 @@ interface IPoolConfigurator {
    */
   event LiquidationGracePeriodDisabled(address indexed asset);
 
-  /**
-   * @dev Emitted when the unbacked mint cap of a reserve is updated.
-   * @param asset The address of the underlying asset of the reserve
-   * @param oldUnbackedMintCap The old unbacked mint cap
-   * @param newUnbackedMintCap The new unbacked mint cap
-   */
-  event UnbackedMintCapChanged(address indexed asset, uint256 oldUnbackedMintCap, uint256 newUnbackedMintCap);
-
   /**
    * @dev Emitted when an collateral configuration of an asset in an eMode is changed.
    * @param asset The address of the underlying asset of the reserve
@@ -235,6 +227,8 @@ interface IPoolConfigurator {
 
   /**
    * @dev Emitted when the part of the premium that goes to protocol is updated.
+   *         Deprecated, from the v3.4 version the `flashloanPremiumToProtocol` value
+   *         is always 100%.
    * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps
    * @param newFlashloanPremiumToProtocol The new premium, expressed in bps
    */
@@ -249,8 +243,6 @@ interface IPoolConfigurator {
 
   /**
    * @notice Initializes multiple reserves.
-   * @dev param useVirtualBalance of the input struct should be true for all normal assets and should be false
-   *  only in special cases (ex. GHO) where an asset is minted instead of supplied.
    * @param input The array of initialization parameters
    */
   function initReserves(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;
@@ -358,16 +350,6 @@ interface IPoolConfigurator {
    */
   function setReserveFactor(address asset, uint256 newReserveFactor) external;
 
-  /**
-   * @notice Sets the interest rate strategy of a reserve.
-   * @param asset The address of the underlying asset of the reserve
-   * @param newRateStrategyAddress The address of the new interest strategy contract
-   * @param rateData bytes-encoded rate data. In this format in order to allow the rate strategy contract
-   *  to de-structure custom data
-   */
-  function setReserveInterestRateStrategyAddress(address asset, address newRateStrategyAddress, bytes calldata rateData)
-    external;
-
   /**
    * @notice Sets interest rate data for a reserve
    * @param asset The address of the underlying asset of the reserve
@@ -416,13 +398,6 @@ interface IPoolConfigurator {
    */
   function setLiquidationProtocolFee(address asset, uint256 newFee) external;
 
-  /**
-   * @notice Updates the unbacked mint cap of reserve.
-   * @param asset The address of the underlying asset of the reserve
-   * @param newUnbackedMintCap The new unbacked mint cap of the reserve
-   */
-  function setUnbackedMintCap(address asset, uint256 newUnbackedMintCap) external;
-
   /**
    * @notice Enables/disables an asset to be borrowable in a selected eMode.
    * - eMode.borrowable always has less priority then reserve.borrowable
@@ -463,29 +438,13 @@ interface IPoolConfigurator {
   function dropReserve(address asset) external;
 
   /**
-   * @notice Updates the bridge fee collected by the protocol reserves.
-   * @param newBridgeProtocolFee The part of the fee sent to the protocol treasury, expressed in bps
-   */
-  function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external;
-
-  /**
-   * @notice Updates the total flash loan premium.
-   * Total flash loan premium consists of two parts:
-   * - A part is sent to aToken holders as extra balance
-   * - A part is collected by the protocol reserves
+   * @notice Updates the flash loan premium. All this premium
+   *         will be collected by the treasury.
    * @dev Expressed in bps
    * @dev The premium is calculated on the total amount borrowed
-   * @param newFlashloanPremiumTotal The total flashloan premium
-   */
-  function updateFlashloanPremiumTotal(uint128 newFlashloanPremiumTotal) external;
-
-  /**
-   * @notice Updates the flash loan premium collected by protocol reserves
-   * @dev Expressed in bps
-   * @dev The premium to protocol is calculated on the total flashloan premium
-   * @param newFlashloanPremiumToProtocol The part of the flashloan premium sent to the protocol treasury
+   * @param newFlashloanPremium The flashloan premium
    */
-  function updateFlashloanPremiumToProtocol(uint128 newFlashloanPremiumToProtocol) external;
+  function updateFlashloanPremium(uint128 newFlashloanPremium) external;
 
   /**
    * @notice Sets the debt ceiling for an asset.
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPoolDataProvider.sol
index c23f2c7..fbb2df1 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/IPoolDataProvider.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/IPoolDataProvider.sol
@@ -2,6 +2,7 @@
 pragma solidity ^0.8.0;
 
 import {IPoolAddressesProvider} from "./IPoolAddressesProvider.sol";
+import {IPool} from "./IPool.sol";
 
 /**
  * @title IPoolDataProvider
@@ -20,6 +21,12 @@ interface IPoolDataProvider {
    */
   function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);
 
+  /**
+   * @notice Returns the address for the Pool contract.
+   * @return The address for the Pool contract
+   */
+  function POOL() external view returns (IPool);
+
   /**
    * @notice Returns the list of the existing reserves in the pool.
    * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.
@@ -96,7 +103,7 @@ interface IPoolDataProvider {
   /**
    * @notice Returns the unbacked mint cap of the reserve
    * @param asset The address of the underlying asset of the reserve
-   * @return The unbacked mint cap of the reserve
+   * @return 0, DEPRECATED in v3.4.0
    */
   function getUnbackedMintCap(address asset) external view returns (uint256);
 
@@ -220,7 +227,7 @@ interface IPoolDataProvider {
   /**
    * @notice Returns whether virtual accounting is enabled/not for a reserve
    * @param asset The address of the underlying asset of the reserve
-   * @return True if active, false otherwise
+   * @return True, DEPRECATED in v3.4.0 as all reserves have virtual accounting set as active
    */
   function getIsVirtualAccActive(address asset) external view returns (bool);
 
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfigurator.sol
index 2cb558c..2e1d5b7 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfigurator.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfigurator.sol
@@ -82,10 +82,12 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   {
     IPool cachedPool = _pool;
 
+    address interestRateStrategyAddress = cachedPool.RESERVE_INTEREST_RATE_STRATEGY();
     for (uint256 i = 0; i < input.length; i++) {
       ConfiguratorLogic.executeInitReserve(cachedPool, input[i]);
+
       emit ReserveInterestRateDataChanged(
-        input[i].underlyingAsset, input[i].interestRateStrategyAddress, input[i].interestRateData
+        input[i].underlyingAsset, interestRateStrategyAddress, input[i].interestRateData
       );
     }
   }
@@ -128,23 +130,23 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
     //validation of the parameters: the LTV can
     //only be lower or equal than the liquidation threshold
     //(otherwise a loan against the asset would cause instantaneous liquidation)
-    require(ltv <= liquidationThreshold, Errors.INVALID_RESERVE_PARAMS);
+    require(ltv <= liquidationThreshold, Errors.InvalidReserveParams());
 
     DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
 
     if (liquidationThreshold != 0) {
       //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less
       //collateral than needed to cover the debt
-      require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_PARAMS);
+      require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.InvalidReserveParams());
 
       //if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
       //a loan is taken there is enough collateral available to cover the liquidation bonus
       require(
         liquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,
-        Errors.INVALID_RESERVE_PARAMS
+        Errors.InvalidReserveParams()
       );
     } else {
-      require(liquidationBonus == 0, Errors.INVALID_RESERVE_PARAMS);
+      require(liquidationBonus == 0, Errors.InvalidReserveParams());
       //if the liquidation threshold is being set to 0,
       // the reserve is being disabled as collateral. To do so,
       //we need to ensure no liquidity is supplied
@@ -192,7 +194,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   function setReserveFreeze(address asset, bool freeze) external override onlyRiskOrPoolOrEmergencyAdmins {
     DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
 
-    require(freeze != currentConfig.getFrozen(), Errors.INVALID_FREEZE_STATE);
+    require(freeze != currentConfig.getFrozen(), Errors.InvalidFreezeState());
 
     currentConfig.setFrozen(freeze);
 
@@ -229,7 +231,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   /// @inheritdoc IPoolConfigurator
   function setReservePause(address asset, bool paused, uint40 gracePeriod) public override onlyEmergencyOrPoolAdmin {
     if (!paused && gracePeriod != 0) {
-      require(gracePeriod <= MAX_GRACE_PERIOD, Errors.INVALID_GRACE_PERIOD);
+      require(gracePeriod <= MAX_GRACE_PERIOD, Errors.InvalidGracePeriod());
 
       uint40 until = uint40(block.timestamp) + gracePeriod;
       _pool.setLiquidationGracePeriod(asset, until);
@@ -257,7 +259,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
 
   /// @inheritdoc IPoolConfigurator
   function setReserveFactor(address asset, uint256 newReserveFactor) external override onlyRiskOrPoolAdmins {
-    require(newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_FACTOR);
+    require(newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR, Errors.InvalidReserveFactor());
 
     _pool.syncIndexesState(asset);
 
@@ -324,7 +326,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
 
   /// @inheritdoc IPoolConfigurator
   function setLiquidationProtocolFee(address asset, uint256 newFee) external override onlyRiskOrPoolAdmins {
-    require(newFee <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_LIQUIDATION_PROTOCOL_FEE);
+    require(newFee <= PercentageMath.PERCENTAGE_FACTOR, Errors.InvalidLiquidationProtocolFee());
     DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
     uint256 oldFee = currentConfig.getLiquidationProtocolFee();
     currentConfig.setLiquidationProtocolFee(newFee);
@@ -340,20 +342,20 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
     uint16 liquidationBonus,
     string calldata label
   ) external override onlyRiskOrPoolAdmins {
-    require(ltv != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);
-    require(liquidationThreshold != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);
+    require(ltv != 0, Errors.InvalidEmodeCategoryParams());
+    require(liquidationThreshold != 0, Errors.InvalidEmodeCategoryParams());
 
     // validation of the parameters: the LTV can
     // only be lower or equal than the liquidation threshold
     // (otherwise a loan against the asset would cause instantaneous liquidation)
-    require(ltv <= liquidationThreshold, Errors.INVALID_EMODE_CATEGORY_PARAMS);
-    require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_EMODE_CATEGORY_PARAMS);
+    require(ltv <= liquidationThreshold, Errors.InvalidEmodeCategoryParams());
+    require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.InvalidEmodeCategoryParams());
 
     // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment
     // a loan is taken there is enough collateral available to cover the liquidation bonus
     require(
       uint256(liquidationThreshold).percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,
-      Errors.INVALID_EMODE_CATEGORY_PARAMS
+      Errors.InvalidEmodeCategoryParams()
     );
 
     DataTypes.EModeCategoryBaseConfiguration memory categoryData;
@@ -374,7 +376,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   {
     uint128 collateralBitmap = _pool.getEModeCategoryCollateralBitmap(categoryId);
     DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(asset);
-    require(reserveData.id != 0 || _pool.getReservesList()[0] == asset, Errors.ASSET_NOT_LISTED);
+    require(reserveData.id != 0 || _pool.getReservesList()[0] == asset, Errors.AssetNotListed());
     collateralBitmap = EModeConfiguration.setReserveBitmapBit(collateralBitmap, reserveData.id, allowed);
     _pool.configureEModeCategoryCollateralBitmap(categoryId, collateralBitmap);
     emit AssetCollateralInEModeChanged(asset, categoryId, allowed);
@@ -388,35 +390,21 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   {
     uint128 borrowableBitmap = _pool.getEModeCategoryBorrowableBitmap(categoryId);
     DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(asset);
-    require(reserveData.id != 0 || _pool.getReservesList()[0] == asset, Errors.ASSET_NOT_LISTED);
+    require(reserveData.id != 0 || _pool.getReservesList()[0] == asset, Errors.AssetNotListed());
     borrowableBitmap = EModeConfiguration.setReserveBitmapBit(borrowableBitmap, reserveData.id, borrowable);
     _pool.configureEModeCategoryBorrowableBitmap(categoryId, borrowableBitmap);
     emit AssetBorrowableInEModeChanged(asset, categoryId, borrowable);
   }
 
-  /// @inheritdoc IPoolConfigurator
-  function setUnbackedMintCap(address asset, uint256 newUnbackedMintCap) external override onlyRiskOrPoolAdmins {
-    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);
-    uint256 oldUnbackedMintCap = currentConfig.getUnbackedMintCap();
-    currentConfig.setUnbackedMintCap(newUnbackedMintCap);
-    _pool.setConfiguration(asset, currentConfig);
-    emit UnbackedMintCapChanged(asset, oldUnbackedMintCap, newUnbackedMintCap);
-  }
-
   /// @inheritdoc IPoolConfigurator
   function setReserveInterestRateData(address asset, bytes calldata rateData) external onlyRiskOrPoolAdmins {
-    DataTypes.ReserveDataLegacy memory reserve = _pool.getReserveData(asset);
-    _updateInterestRateStrategy(asset, reserve, reserve.interestRateStrategyAddress, rateData);
-  }
+    _pool.syncIndexesState(asset);
 
-  /// @inheritdoc IPoolConfigurator
-  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress, bytes calldata rateData)
-    external
-    override
-    onlyRiskOrPoolAdmins
-  {
-    DataTypes.ReserveDataLegacy memory reserve = _pool.getReserveData(asset);
-    _updateInterestRateStrategy(asset, reserve, rateStrategyAddress, rateData);
+    address interestRateStrategyAddress = _pool.RESERVE_INTEREST_RATE_STRATEGY();
+    IDefaultInterestRateStrategyV2(interestRateStrategyAddress).setInterestRateParams(asset, rateData);
+    emit ReserveInterestRateDataChanged(asset, interestRateStrategyAddress, rateData);
+
+    _pool.syncRatesState(asset);
   }
 
   /// @inheritdoc IPoolConfigurator
@@ -436,27 +424,13 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
   }
 
   /// @inheritdoc IPoolConfigurator
-  function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external override onlyPoolAdmin {
-    require(newBridgeProtocolFee <= PercentageMath.PERCENTAGE_FACTOR, Errors.BRIDGE_PROTOCOL_FEE_INVALID);
-    uint256 oldBridgeProtocolFee = _pool.BRIDGE_PROTOCOL_FEE();
-    _pool.updateBridgeProtocolFee(newBridgeProtocolFee);
-    emit BridgeProtocolFeeUpdated(oldBridgeProtocolFee, newBridgeProtocolFee);
-  }
+  function updateFlashloanPremium(uint128 newFlashloanPremium) external override onlyPoolAdmin {
+    require(newFlashloanPremium <= PercentageMath.PERCENTAGE_FACTOR, Errors.FlashloanPremiumInvalid());
 
-  /// @inheritdoc IPoolConfigurator
-  function updateFlashloanPremiumTotal(uint128 newFlashloanPremiumTotal) external override onlyPoolAdmin {
-    require(newFlashloanPremiumTotal <= PercentageMath.PERCENTAGE_FACTOR, Errors.FLASHLOAN_PREMIUM_INVALID);
-    uint128 oldFlashloanPremiumTotal = _pool.FLASHLOAN_PREMIUM_TOTAL();
-    _pool.updateFlashloanPremiums(newFlashloanPremiumTotal, _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL());
-    emit FlashloanPremiumTotalUpdated(oldFlashloanPremiumTotal, newFlashloanPremiumTotal);
-  }
+    uint128 oldFlashloanPremium = _pool.FLASHLOAN_PREMIUM_TOTAL();
+    _pool.updateFlashloanPremium(newFlashloanPremium);
 
-  /// @inheritdoc IPoolConfigurator
-  function updateFlashloanPremiumToProtocol(uint128 newFlashloanPremiumToProtocol) external override onlyPoolAdmin {
-    require(newFlashloanPremiumToProtocol <= PercentageMath.PERCENTAGE_FACTOR, Errors.FLASHLOAN_PREMIUM_INVALID);
-    uint128 oldFlashloanPremiumToProtocol = _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();
-    _pool.updateFlashloanPremiums(_pool.FLASHLOAN_PREMIUM_TOTAL(), newFlashloanPremiumToProtocol);
-    emit FlashloanPremiumToProtocolUpdated(oldFlashloanPremiumToProtocol, newFlashloanPremiumToProtocol);
+    emit FlashloanPremiumTotalUpdated(oldFlashloanPremium, newFlashloanPremium);
   }
 
   /// @inheritdoc IPoolConfigurator
@@ -469,49 +443,28 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
     return address(ConfiguratorLogic);
   }
 
-  function _updateInterestRateStrategy(
-    address asset,
-    DataTypes.ReserveDataLegacy memory reserve,
-    address newRateStrategyAddress,
-    bytes calldata rateData
-  ) internal {
-    address oldRateStrategyAddress = reserve.interestRateStrategyAddress;
-
-    _pool.syncIndexesState(asset);
-
-    IDefaultInterestRateStrategyV2(newRateStrategyAddress).setInterestRateParams(asset, rateData);
-    emit ReserveInterestRateDataChanged(asset, newRateStrategyAddress, rateData);
-
-    if (oldRateStrategyAddress != newRateStrategyAddress) {
-      _pool.setReserveInterestRateStrategyAddress(asset, newRateStrategyAddress);
-      emit ReserveInterestRateStrategyChanged(asset, oldRateStrategyAddress, newRateStrategyAddress);
-    }
-
-    _pool.syncRatesState(asset);
-  }
-
   function _checkNoSuppliers(address asset) internal view {
     DataTypes.ReserveDataLegacy memory reserveData = _pool.getReserveData(asset);
     uint256 totalSupplied = IPoolDataProvider(_addressesProvider.getPoolDataProvider()).getATokenTotalSupply(asset);
 
-    require(totalSupplied == 0 && reserveData.accruedToTreasury == 0, Errors.RESERVE_LIQUIDITY_NOT_ZERO);
+    require(totalSupplied == 0 && reserveData.accruedToTreasury == 0, Errors.ReserveLiquidityNotZero());
   }
 
   function _checkNoBorrowers(address asset) internal view {
     uint256 totalDebt = IPoolDataProvider(_addressesProvider.getPoolDataProvider()).getTotalDebt(asset);
-    require(totalDebt == 0, Errors.RESERVE_DEBT_NOT_ZERO);
+    require(totalDebt == 0, Errors.ReserveDebtNotZero());
   }
 
   function _onlyPoolAdmin() internal view {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
-    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);
+    require(aclManager.isPoolAdmin(msg.sender), Errors.CallerNotPoolAdmin());
   }
 
   function _onlyPoolOrEmergencyAdmin() internal view {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
     require(
       aclManager.isPoolAdmin(msg.sender) || aclManager.isEmergencyAdmin(msg.sender),
-      Errors.CALLER_NOT_POOL_OR_EMERGENCY_ADMIN
+      Errors.CallerNotPoolOrEmergencyAdmin()
     );
   }
 
@@ -519,15 +472,13 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
     require(
       aclManager.isAssetListingAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),
-      Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN
+      Errors.CallerNotAssetListingOrPoolAdmin()
     );
   }
 
   function _onlyRiskOrPoolAdmins() internal view {
     IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());
-    require(
-      aclManager.isRiskAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_RISK_OR_POOL_ADMIN
-    );
+    require(aclManager.isRiskAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender), Errors.CallerNotRiskOrPoolAdmin());
   }
 
   function _onlyRiskOrPoolOrEmergencyAdmins() internal view {
@@ -535,7 +486,7 @@ abstract contract PoolConfigurator is VersionedInitializable, IPoolConfigurator
     require(
       aclManager.isRiskAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender)
         || aclManager.isEmergencyAdmin(msg.sender),
-      Errors.CALLER_NOT_RISK_OR_POOL_OR_EMERGENCY_ADMIN
+      Errors.CallerNotRiskOrPoolOrEmergencyAdmin()
     );
   }
 }
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfiguratorInstance.sol
index 832dbdc..90d3f9c 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/PoolConfiguratorInstance.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfiguratorInstance.sol
@@ -8,8 +8,13 @@ import {
   VersionedInitializable
 } from "../protocol/pool/PoolConfigurator.sol";
 
+/**
+ * @title Aave PoolConfigurator Instance
+ * @author BGD Labs
+ * @notice Instance of the PoolConfigurator of the Aave protocol
+ */
 contract PoolConfiguratorInstance is PoolConfigurator {
-  uint256 public constant CONFIGURATOR_REVISION = 5;
+  uint256 public constant CONFIGURATOR_REVISION = 6;
 
   /// @inheritdoc VersionedInitializable
   function getRevision() internal pure virtual override returns (uint256) {
diff --git a/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfiguratorWithCustomInitialize.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfiguratorWithCustomInitialize.sol
new file mode 100644
index 0000000..c48f50a
--- /dev/null
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/PoolConfiguratorWithCustomInitialize.sol
@@ -0,0 +1,26 @@
+// SPDX-License-Identifier: BUSL-1.1
+pragma solidity ^0.8.10;
+
+import {PoolConfiguratorInstance} from "aave-v3-origin/contracts/instances/PoolConfiguratorInstance.sol";
+import {IPoolAddressesProvider} from "aave-v3-origin/contracts/interfaces/IPoolAddressesProvider.sol";
+import {IPool} from "aave-v3-origin/contracts/interfaces/IPool.sol";
+
+contract PoolConfiguratorWithCustomInitialize is PoolConfiguratorInstance {
+  function initialize(IPoolAddressesProvider provider) public virtual override initializer {
+    super.initialize(provider);
+
+    // @note This `initialize` function
+    //       must be executed *before* the main `Pool` contract is upgraded to v3.4.
+    //       This is necessary to fetch the dynamic `FLASHLOAN_PREMIUM_TO_PROTOCOL` value
+    //       from the v3.3 `Pool`'s storage. After the `Pool` contract is upgraded to v3.4,
+    //       its `FLASHLOAN_PREMIUM_TO_PROTOCOL` function will become a constant and always
+    //       return `100_00`, making the old dynamic value inaccessible.
+    uint128 oldFlashloanPremiumToProtocol = _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();
+    if (oldFlashloanPremiumToProtocol != 100_00) {
+      emit FlashloanPremiumToProtocolUpdated({
+        oldFlashloanPremiumToProtocol: oldFlashloanPremiumToProtocol,
+        newFlashloanPremiumToProtocol: 100_00
+      });
+    }
+  }
+}
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ReserveConfiguration.sol
index 0bec019..062e4b6 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/ReserveConfiguration.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/ReserveConfiguration.sol
@@ -29,9 +29,10 @@ library ReserveConfiguration {
   uint256 internal constant SUPPLY_CAP_MASK = 0x00000000000000000000000000FFFFFFFFF00000000000000000000000000000; // prettier-ignore
   uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =
     0x0000000000000000000000FFFF00000000000000000000000000000000000000; // prettier-ignore
-  //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
-  uint256 internal constant UNBACKED_MINT_CAP_MASK = 0x00000000000FFFFFFFFF00000000000000000000000000000000000000000000; // prettier-ignore
+  //@notice there is an unoccupied hole of 8 bits from 168 to 175 left from pre 3.2 eModeCategory
+  //@notice there is an unoccupied hole of 34 bits from 176 to 211 left from pre 3.4 unbackedMintCap
   uint256 internal constant DEBT_CEILING_MASK = 0x0FFFFFFFFFF00000000000000000000000000000000000000000000000000000; // prettier-ignore
+  //@notice DEPRECATED: in v3.4 all reserves have virtual accounting enabled
   uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK = 0x1000000000000000000000000000000000000000000000000000000000000000; // prettier-ignore
 
   /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
@@ -49,9 +50,10 @@ library ReserveConfiguration {
   uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;
   uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;
   uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;
-  //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
-  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;
+  //@notice there is an unoccupied hole of 8 bits from 168 to 175 left from pre 3.2 eModeCategory
+  //@notice there is an unoccupied hole of 34 bits from 176 to 211 left from pre 3.4 unbackedMintCap
   uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;
+  //@notice DEPRECATED: in v3.4 all reserves have virtual accounting enabled
   uint256 internal constant VIRTUAL_ACC_START_BIT_POSITION = 252;
 
   uint256 internal constant MAX_VALID_LTV = 65535;
@@ -62,7 +64,6 @@ library ReserveConfiguration {
   uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;
   uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;
   uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;
-  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;
   uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;
 
   uint256 public constant DEBT_CEILING_DECIMALS = 2;
@@ -74,7 +75,7 @@ library ReserveConfiguration {
    * @param ltv The new ltv
    */
   function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {
-    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);
+    require(ltv <= MAX_VALID_LTV, Errors.InvalidLtv());
 
     self.data = (self.data & ~LTV_MASK) | ltv;
   }
@@ -94,7 +95,7 @@ library ReserveConfiguration {
    * @param threshold The new liquidation threshold
    */
   function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {
-    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);
+    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.InvalidLiquidationThreshold());
 
     self.data = (self.data & ~LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);
   }
@@ -114,7 +115,7 @@ library ReserveConfiguration {
    * @param bonus The new liquidation bonus
    */
   function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {
-    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);
+    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.InvalidLiquidationBonus());
 
     self.data = (self.data & ~LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
   }
@@ -134,7 +135,7 @@ library ReserveConfiguration {
    * @param decimals The decimals
    */
   function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {
-    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);
+    require(decimals <= MAX_VALID_DECIMALS, Errors.InvalidDecimals());
 
     self.data = (self.data & ~DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
   }
@@ -273,7 +274,7 @@ library ReserveConfiguration {
    * @param reserveFactor The reserve factor
    */
   function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {
-    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);
+    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.InvalidReserveFactor());
 
     self.data = (self.data & ~RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);
   }
@@ -293,7 +294,7 @@ library ReserveConfiguration {
    * @param borrowCap The borrow cap
    */
   function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap) internal pure {
-    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);
+    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.InvalidBorrowCap());
 
     self.data = (self.data & ~BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);
   }
@@ -313,7 +314,7 @@ library ReserveConfiguration {
    * @param supplyCap The supply cap
    */
   function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap) internal pure {
-    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);
+    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.InvalidSupplyCap());
 
     self.data = (self.data & ~SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
   }
@@ -333,7 +334,7 @@ library ReserveConfiguration {
    * @param ceiling The maximum debt ceiling for the asset
    */
   function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling) internal pure {
-    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);
+    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.InvalidDebtCeiling());
 
     self.data = (self.data & ~DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);
   }
@@ -356,7 +357,7 @@ library ReserveConfiguration {
     internal
     pure
   {
-    require(liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE, Errors.INVALID_LIQUIDATION_PROTOCOL_FEE);
+    require(liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE, Errors.InvalidLiquidationProtocolFee());
 
     self.data = (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK)
       | (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);
@@ -371,26 +372,6 @@ library ReserveConfiguration {
     return (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
   }
 
-  /**
-   * @notice Sets the unbacked mint cap of the reserve
-   * @param self The reserve configuration
-   * @param unbackedMintCap The unbacked mint cap
-   */
-  function setUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self, uint256 unbackedMintCap) internal pure {
-    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);
-
-    self.data = (self.data & ~UNBACKED_MINT_CAP_MASK) | (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
-  }
-
-  /**
-   * @dev Gets the unbacked mint cap of the reserve
-   * @param self The reserve configuration
-   * @return The unbacked mint cap
-   */
-  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {
-    return (self.data & UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;
-  }
-
   /**
    * @notice Sets the flashloanable flag for the reserve
    * @param self The reserve configuration
@@ -411,26 +392,13 @@ library ReserveConfiguration {
   }
 
   /**
-   * @notice Sets the virtual account active/not state of the reserve
+   * @notice Forcefully set the virtual account active state of the reserve to `true`
+   * @dev DEPRECATED: in v3.4 all reserves have virtual accounting enabled.
+   * The flag is carried along for backward compatibility with integrations directly querying the configuration.
    * @param self The reserve configuration
-   * @param active The active state
-   */
-  function setVirtualAccActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {
-    self.data = (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) | (uint256(active ? 1 : 0) << VIRTUAL_ACC_START_BIT_POSITION);
-  }
-
-  /**
-   * @notice Gets the virtual account active/not state of the reserve
-   * @dev The state should be true for all normal assets and should be false
-   * Virtual accounting being disabled means that the asset:
-   * - is GHO
-   * - can never be supplied
-   * - the interest rate strategy is not influenced by the virtual balance
-   * @param self The reserve configuration
-   * @return The active state
    */
-  function getIsVirtualAccActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {
-    return (self.data & VIRTUAL_ACC_ACTIVE_MASK) != 0;
+  function setVirtualAccActive(DataTypes.ReserveConfigurationMap memory self) internal pure {
+    self.data = (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) | (uint256(1) << VIRTUAL_ACC_START_BIT_POSITION);
   }
 
   /**
diff --git a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/VersionedInitializable.sol b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/VersionedInitializable.sol
index 3540fea..97b36b7 100644
--- a/tmp/42161_0xE5e48Ad1F9D1A894188b483DcF91f4FaD6AbA43b_flat/VersionedInitializable.sol
+++ b/tmp/42161_0x5793FE4de34532F162B4e207aF872729880ec2b6_flat/VersionedInitializable.sol
@@ -14,6 +14,15 @@ pragma solidity ^0.8.10;
  * because this is not dealt with automatically as with constructors.
  */
 abstract contract VersionedInitializable {
+  /**
+   * @dev Initializes the implementation contract at the current revision.
+   * In practice this breaks further initialization of the implementation.
+   */
+  constructor() {
+    // break the initialize
+    lastInitializedRevision = getRevision();
+  }
+
   /**
    * @dev Indicates that the contract has been initialized.
    */
